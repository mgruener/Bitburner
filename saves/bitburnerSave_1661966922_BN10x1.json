{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":31,\"max\":31},\"skills\":{\"hacking\":438,\"strength\":213,\"defense\":213,\"dexterity\":247,\"agility\":187,\"charisma\":172,\"intelligence\":35},\"exp\":{\"hacking\":719300347.9592708,\"strength\":1784043.5157799467,\"defense\":1784043.5157799467,\"dexterity\":1784043.5157799467,\"agility\":1784233.8726055014,\"charisma\":131010.1728546104,\"intelligence\":1014.4386989013514},\"mults\":{\"hacking_chance\":2.2397022943351588,\"hacking_speed\":2.0795927616082395,\"hacking_money\":2.654769777865833,\"hacking_grow\":1.8467963672110148,\"hacking\":2.769844551140039,\"strength\":2.051995963567794,\"defense\":2.051995963567794,\"dexterity\":2.3700553379208023,\"agility\":1.79549646812182,\"charisma\":2.4325796549307133,\"hacking_exp\":5.529078397282061,\"strength_exp\":2.1631457449277165,\"defense_exp\":2.1631457449277165,\"dexterity_exp\":2.1631457449277165,\"agility_exp\":2.1631457449277165,\"charisma_exp\":2.3312221693086,\"company_rep\":3.0772132634873515,\"faction_rep\":2.3312221693086,\"crime_money\":1.8428633749475098,\"crime_success\":1.8428633749475098,\"hacknet_node_money\":1.7099966363064951,\"hacknet_node_purchase_cost\":0.5698256822917811,\"hacknet_node_ram_cost\":0.5698256822917811,\"hacknet_node_core_cost\":0.5698256822917811,\"hacknet_node_level_cost\":0.5698256822917811,\"work_money\":3.3425304249883063,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"money\":969596604431.7662,\"city\":\"Volhaven\",\"location\":\"Alpha Enterprises\",\"jobs\":{\"Alpha Enterprises\":\"Software Consultant\",\"NWO\":\"IT Analyst\"},\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"NWO\",\"The Black Hand\",\"NiteSec\",\"Chongqing\",\"Ishima\",\"New Tokyo\",\"Tetrads\",\"Slum Snakes\",\"Tian Di Hui\",\"CyberSec\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"INFRARET Enhancement\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":40,\"name\":\"NeuroFlux Governor\"},{\"level\":41,\"name\":\"NeuroFlux Governor\"},{\"level\":42,\"name\":\"NeuroFlux Governor\"},{\"level\":43,\"name\":\"NeuroFlux Governor\"},{\"level\":44,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"level\":39,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"}],\"sourceFiles\":[{\"lvl\":1,\"n\":1},{\"lvl\":1,\"n\":5}],\"numPeopleKilled\":33,\"karma\":-99,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":21,\"max\":21},\"skills\":{\"hacking\":146,\"strength\":100,\"defense\":110,\"dexterity\":115,\"agility\":91,\"charisma\":93,\"intelligence\":2},\"exp\":{\"hacking\":3168204.9783277228,\"strength\":192793.59000000416,\"defense\":192793.59000000416,\"dexterity\":192793.59000000416,\"agility\":192793.59000000416,\"charisma\":87585.51839359106,\"intelligence\":24.375},\"mults\":{\"hacking_chance\":1.2127500000000002,\"hacking_speed\":1.0932564816,\"hacking_money\":1.15,\"hacking_grow\":1,\"hacking\":1.4998104828000005,\"hacking_exp\":2.9938754999999997,\"strength\":1.32,\"strength_exp\":1.5179999999999998,\"defense\":1.4520000000000002,\"defense_exp\":1.5179999999999998,\"dexterity\":1.5246000000000002,\"dexterity_exp\":1.5179999999999998,\"agility\":1.2127500000000002,\"agility_exp\":1.5179999999999998,\"charisma\":1.4225640000000002,\"charisma_exp\":1.3632905,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1.7995434600000002,\"faction_rep\":1.3632905,\"work_money\":1.9547,\"crime_success\":1.3471250000000001,\"crime_money\":1.6300212500000004,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen I\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"Neuregen Gene Modification\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"CRTX42-AA Gene Modification\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen III\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1}],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveFactionWork\",\"data\":{\"type\":\"FACTION\",\"factionWorkType\":\"HACKING\",\"factionName\":\"NWO\"}},\"memory\":1,\"shock\":100,\"storedCycles\":1,\"sync\":100}}],\"sleevesFromCovenant\":0,\"bitNodeN\":10,\"entropy\":0,\"lastUpdate\":1661966922249,\"lastSave\":1661966891063,\"totalPlaytime\":2142598600,\"playtimeSinceLastAug\":82945400,\"playtimeSinceLastBitnode\":888896400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-21120,\"codingcontract\":0,\"corporation\":0,\"crime\":1368326.0558985255,\"gang\":0,\"hacking\":1614240082336.5767,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":-91199444.12787507,\"stock\":0,\"total\":969595604431.7662,\"work\":40686771.10152712,\"servers\":0,\"other\":-26813600000,\"augmentations\":-617781712437.6711}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-21120,\"codingcontract\":0,\"corporation\":0,\"crime\":1368326.0558985255,\"gang\":0,\"hacking\":3401585569841.0283,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":-7390199444.127878,\"stock\":0,\"total\":1076997791731.9307,\"work\":40686771.10152712,\"servers\":-1293199642913.3767,\"other\":-29440600000,\"augmentations\":-994599369728.5814}},\"scriptProdSinceLastAug\":473043011488,\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1659824867829},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1659825047835},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1659979761452},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1660064291656},{\"ID\":\"FROZE\",\"unlockedOn\":1660070224596},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1660073344593},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1660074763681},{\"ID\":\"TOR\",\"unlockedOn\":1660156303324},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1660156543333},{\"ID\":\"NITESEC\",\"unlockedOn\":1660254508514},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1660254628533},{\"ID\":\"TRAVEL\",\"unlockedOn\":1660255468524},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1660485627110},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1660485627120},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1660485627122},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1660512825233},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1660566971219},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1660650992951},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1660678330325},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1660724917416},{\"ID\":\"4S\",\"unlockedOn\":1660751408262},{\"ID\":\"DONATION\",\"unlockedOn\":1660820248649},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1660847929353},{\"ID\":\"SF1.1\",\"unlockedOn\":1660863818847},{\"ID\":\"WORKOUT\",\"unlockedOn\":1660864298842},{\"ID\":\"SF5.1\",\"unlockedOn\":1661503823880}],\"terminalCommandHistory\":[\"connect sigma-cosmetics\",\"connect CSEC\",\"connect phantasy\",\"connect the-hub\",\"connect I.I.I.I\",\"analyze\",\"backdoor\",\"home\",\"ls\",\"./scripts/backdoor-worm.js\",\"./scripts/find-server.js powerhouse\",\"./scripts/find-server.js powerhouse-gym\",\"connect darkweb\",\"buy -a\",\"home\",\"scan-analyze\",\"connect iron-gym\",\"backdoor\",\"home\",\"scan-analyze home\",\"scan-analyze 10\",\"backdoor\",\"scan-analyze 10\",\"home\",\"./scripts/compare-servers.js\",\"./scripts/find-server.js powerhouse-fitness\",\"connect sigma-cosmetics\",\"connect CSEC\",\"connect phantasy\",\"connect the-hub\",\"connect I.I.I.I\",\"connect alpha-ent\",\"connect snap-fitness\",\"backdoor\",\"connect deltaone\",\"connect defcomm\",\"connect zb-def\",\"connect applied-energetics\",\"connect stormtech\",\"connect 4sigma\",\"connect powerhouse-fitness\",\"analyze\",\"home\",\"ls\",\"touch foo\",\"ls\",\"cat j3.msg\",\"./scripts/compare-servers.js\",\"./scripts/add-all-targets.js\",\"./scripts/remove-targets.js foodnstuff\"],\"focus\":false,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":40163,\"factionWorkType\":\"HACKING\",\"factionName\":\"NWO\"}},\"identifier\":\"15ded30ed8298a\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":4,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"19.7.1.8\",\"isConnectedTo\":true,\"maxRam\":32768,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"Formulas.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\",\"DeepscanV2.exe\"],\"ramUsed\":32734.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/scripts/multi-target-scheduler.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":460294908.1959181,\"offlineMoneyMade\":0,\"offlineRunningTime\":67662.468,\"onlineExpGained\":253094875.96235803,\"onlineMoneyMade\":471393055048,\"onlineRunningTime\":15274.210000020497,\"pid\":1,\"ramUsage\":9.35,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///a4fd9487-d87f-40cc-80d8-d411659c20ca\",\"moduleSequenceNumber\":319},{\"filename\":\"/scripts/multi-target-scheduler.js\",\"url\":\"blob:file:///ff6b52c6-0981-41a9-834a-6773491d5fd1\",\"moduleSequenceNumber\":633}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",101],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":361.4099999999881,\"pid\":10022,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":101,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///bcc970d9-4572-47b5-bdfc-f53ef6c87a79\",\"moduleSequenceNumber\":492}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"computek\",96],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":355.40999999998843,\"pid\":10067,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":96,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///bcc970d9-4572-47b5-bdfc-f53ef6c87a79\",\"moduleSequenceNumber\":492}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",3532],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10176,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":3532,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///1ddf4a89-59e7-4c49-a66d-213a8059d838\",\"moduleSequenceNumber\":483}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",683],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":131.2100000000011,\"pid\":10329,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":683,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///1ddf4a89-59e7-4c49-a66d-213a8059d838\",\"moduleSequenceNumber\":483}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",3157],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":89.01000000000073,\"pid\":10370,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":3157,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///1ddf4a89-59e7-4c49-a66d-213a8059d838\",\"moduleSequenceNumber\":483}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",605],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":85.21000000000068,\"pid\":10376,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":605,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///1ddf4a89-59e7-4c49-a66d-213a8059d838\",\"moduleSequenceNumber\":483}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",173],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.41000000000066,\"pid\":10378,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":173,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///bcc970d9-4572-47b5-bdfc-f53ef6c87a79\",\"moduleSequenceNumber\":492}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",142],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.40999999999998,\"pid\":10419,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":142,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///bcc970d9-4572-47b5-bdfc-f53ef6c87a79\",\"moduleSequenceNumber\":492}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",338],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.009999999999934,\"pid\":10422,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":338,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///bcc970d9-4572-47b5-bdfc-f53ef6c87a79\",\"moduleSequenceNumber\":492}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",132],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.20999999999992,\"pid\":10423,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":132,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///bcc970d9-4572-47b5-bdfc-f53ef6c87a79\",\"moduleSequenceNumber\":492}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",213],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.609999999999953,\"pid\":10434,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":213,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///1ddf4a89-59e7-4c49-a66d-213a8059d838\",\"moduleSequenceNumber\":483}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",3125],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.809999999999956,\"pid\":10435,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":3125,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///1ddf4a89-59e7-4c49-a66d-213a8059d838\",\"moduleSequenceNumber\":483}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",125],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.009999999999973,\"pid\":10439,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":125,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///bcc970d9-4572-47b5-bdfc-f53ef6c87a79\",\"moduleSequenceNumber\":492}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",221],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.809999999999977,\"pid\":10440,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":221,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///bcc970d9-4572-47b5-bdfc-f53ef6c87a79\",\"moduleSequenceNumber\":492}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",132],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.40999999999999,\"pid\":10442,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":132,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///1ddf4a89-59e7-4c49-a66d-213a8059d838\",\"moduleSequenceNumber\":483}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1026],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.61,\"pid\":10444,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1026,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///1ddf4a89-59e7-4c49-a66d-213a8059d838\",\"moduleSequenceNumber\":483}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",602],\"dataMap\":{},\"filename\":\"/payload/hack-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.610000000000004,\"pid\":10446,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":602,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///44dc8ec4-0946-420a-8e02-6397b72b6808\",\"moduleSequenceNumber\":493}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",156],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"pid\":10447,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":156,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///bcc970d9-4572-47b5-bdfc-f53ef6c87a79\",\"moduleSequenceNumber\":492}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",4139],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.0100000000000025,\"pid\":10448,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":4139,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///1ddf4a89-59e7-4c49-a66d-213a8059d838\",\"moduleSequenceNumber\":483}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",20],\"dataMap\":{},\"filename\":\"/payload/hack-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"pid\":10452,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":20,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///44dc8ec4-0946-420a-8e02-6397b72b6808\",\"moduleSequenceNumber\":493}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    filter_adminRights,\\r\\n    filter_canNuke,\\r\\n    filter_minRam,\\r\\n    filter_hostname,\\r\\n    filter_playerServer,\\r\\n    getAllServers,\\r\\n    applyFilter,\\r\\n    deployPayload,\\r\\n    portOpener,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var noAdminFilter = filter_adminRights(false)\\r\\n    var hasAdminFilter = filter_adminRights(true)\\r\\n    var canNukeFilter = filter_canNuke(ns)\\r\\n    var ramFilter = filter_minRam(4)\\r\\n    var nameFilter = filter_hostname(ns, \\\"darkweb|home\\\")\\r\\n    var playerServerFilter = filter_playerServer()\\r\\n\\r\\n    var targets = getAllServers(ns)\\r\\n    targets = applyFilter(targets, [noAdminFilter, canNukeFilter], false, false)\\r\\n    targets = applyFilter(targets, [nameFilter, playerServerFilter])\\r\\n    for (const t in targets) {\\r\\n        ns.printf(\\\"Nuking Target: %s\\\", targets[t].hostname)\\r\\n        attack(ns, targets[t])\\r\\n    }\\r\\n\\r\\n    targets = getAllServers(ns)\\r\\n    targets = applyFilter(targets, [hasAdminFilter, ramFilter], false, false)\\r\\n    for (const t in targets) {\\r\\n        ns.printf(\\\"Deploying payload on Target: %s\\\", targets[t].hostname)\\r\\n        await deployPayload(ns, t)\\r\\n    }\\r\\n    for (const name of ns.getPurchasedServers()) {\\r\\n        ns.printf(\\\"Deploying payload on Target: %s\\\", name)\\r\\n        await deployPayload(ns, name)\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function attack(ns, target) {\\r\\n    var po = portOpener(ns)\\r\\n    if (target.openPortCount < target.numOpenPortsRequired) {\\r\\n        for (let attack of po) {\\r\\n            if (attack[\\\"check\\\"](target)) {\\r\\n                attack[\\\"func\\\"](target.hostname)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    ns.nuke(target.hostname)\\r\\n\\r\\n    // if (!target.backdoorInstalled) {\\r\\n    //     await ns.singularity.installBackdoor(target.hostname)\\r\\n    // }\\r\\n}\",\"filename\":\"/scripts/backdoor-worm.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///ac142ea4-b0e6-4c20-b4a5-73ec0535b41e\",\"moduleSequenceNumber\":1915},{\"filename\":\"/scripts/backdoor-worm.js\",\"url\":\"blob:file:///ebc32d22-e076-4f43-b8d6-2265afe7b8aa\",\"moduleSequenceNumber\":1939}],\"dependents\":[],\"ramUsage\":10.7,\"server\":\"home\",\"moduleSequenceNumber\":241,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar host = ns.args[0]\\r\\n\\tvar threads = parseInt(ns.args[1])\\r\\n\\tvar cores = parseInt(ns.args[2])\\r\\n\\tvar resultHack = ns.hackAnalyzeSecurity(threads, host)\\r\\n\\tvar resultGrow = ns.growthAnalyzeSecurity(threads, host, cores)\\r\\n\\tvar resultWeaken = ns.weakenAnalyze(threads, cores)\\r\\n\\tns.tprintf(\\\"h: %s; g: %s; w: -%s\\\", resultHack, resultGrow, resultWeaken)\\r\\n}\\r\\n\",\"filename\":\"/scratch/test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scratch/test.js\",\"url\":\"blob:file:///ad2b7bcf-b248-43d2-a6e1-5ccbe009023a\",\"moduleSequenceNumber\":5524}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":242,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"home\",\"moduleSequenceNumber\":243,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAdditionalServerInfo, hasFormulas } from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var server = ns.getServer(name)\\r\\n    var advancedServer = getAdditionalServerInfo(ns, server)\\r\\n\\r\\n    ns.tprint(name)\\r\\n    ns.tprintf(\\\"  Weaken time: %s\\\", ns.nFormat(advancedServer.weakenTime / 1000, \\\"00:00:00\\\"))\\r\\n    ns.tprintf(\\\"  Hack time: %s\\\", ns.nFormat(advancedServer.hackTime / 1000, \\\"00:00:00\\\"))\\r\\n    ns.tprintf(\\\"  Grow time: %s\\\", ns.nFormat(advancedServer.growTime / 1000, \\\"00:00:00\\\"))\\r\\n    ns.tprintf(\\\"  Max money: %s (%f)\\\", ns.nFormat(server.moneyMax, \\\"($0.00a)\\\"), server.moneyMax)\\r\\n    ns.tprintf(\\\"  Money: %s (%f)\\\", ns.nFormat(server.moneyAvailable, \\\"($0.00a)\\\"), server.moneyAvailable)\\r\\n    ns.tprintf(\\\"  Money threshold: %s (%f)\\\", ns.nFormat(advancedServer.moneyThreshold, \\\"($0.00a)\\\"), advancedServer.moneyThreshold)\\r\\n    ns.tprintf(\\\"  Max Regrow amount: %s (%f)\\\", ns.nFormat(advancedServer.maxRegrowAmount, \\\"($0.00a)\\\"), advancedServer.maxRegrowAmount)\\r\\n    ns.tprintf(\\\"  Growth rate: %d\\\", server.serverGrowth)\\r\\n    ns.tprintf(\\\"  Security min: %d\\\", server.minDifficulty)\\r\\n    ns.tprintf(\\\"  Security: %d\\\", server.hackDifficulty)\\r\\n    ns.tprintf(\\\"  Security threshold: %d\\\", advancedServer.securityThreshold)\\r\\n    ns.tprintf(\\\"  Weaken threads: %f\\\", advancedServer.weakenThreads)\\r\\n    ns.tprintf(\\\"  Grow threads: %f\\\", advancedServer.growThreads)\\r\\n    ns.tprintf(\\\"  Hack threads: %f\\\", advancedServer.hackThreads)\\r\\n    ns.tprintf(\\\"  Score: %s\\\", ns.nFormat(advancedServer.score, '0.00e+0'))\\r\\n    ns.tprintf(\\\"  TimeScore: %s/s\\\", ns.nFormat(advancedServer.timeScore, \\\"($0.00a)\\\"))\\r\\n}\\r\\n\\r\\n\",\"filename\":\"/scripts/analyze-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///9a8b37f0-dd00-4f89-8858-40a4c40312b7\",\"moduleSequenceNumber\":10589},{\"filename\":\"/scripts/analyze-server.js\",\"url\":\"blob:file:///d654e717-e11d-42d7-bed5-84a86b0350cc\",\"moduleSequenceNumber\":10590}],\"dependents\":[],\"ramUsage\":7.55,\"server\":\"home\",\"moduleSequenceNumber\":244,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { threadsAvailable } from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var threadSize = 0.15 + 1.6\\r\\n    let systemThreads = threadsAvailable(ns, threadSize, false)\\r\\n    let idleThreads = threadsAvailable(ns, threadSize, true)\\r\\n    ns.tprintf(\\\"==> Attack threads: %d (idle); %d (available)\\\", idleThreads, systemThreads)\\r\\n}\",\"filename\":\"/scripts/threads-available.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///7926943b-ab6d-44a3-a32e-f40ab4132812\",\"moduleSequenceNumber\":114289},{\"filename\":\"/scripts/threads-available.js\",\"url\":\"blob:file:///e72c6ba0-9b70-4980-8126-0fe4f12b53f5\",\"moduleSequenceNumber\":114290}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home\",\"moduleSequenceNumber\":245,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///1ddf4a89-59e7-4c49-a66d-213a8059d838\",\"moduleSequenceNumber\":483}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///44dc8ec4-0946-420a-8e02-6397b72b6808\",\"moduleSequenceNumber\":493}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":493,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///bcc970d9-4572-47b5-bdfc-f53ef6c87a79\",\"moduleSequenceNumber\":492}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    applyFilter,\\r\\n    filter_adminRights,\\r\\n    filter_minRamAvailable,\\r\\n    getAllServers,\\r\\n    performAttack,\\r\\n    getGrowAttack,\\r\\n    getWeakenAttack,\\r\\n    getHackAttack,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const targetName = ns.args[0]\\r\\n    const growAttack = getGrowAttack(ns)\\r\\n    const weakenAttack = getWeakenAttack(ns)\\r\\n    const hackAttack = getHackAttack(ns)\\r\\n    await ns.sleep(10000)\\r\\n\\r\\n    while (true) {\\r\\n        let target = ns.getServer(targetName)\\r\\n        let attackers = getAttackers(ns)\\r\\n\\r\\n        if (Object.keys(attackers).length <= 0) {\\r\\n            ns.print(\\\"No attackers available, sleeping 10 seconds before retrying\\\")\\r\\n            await ns.sleep(10000)\\r\\n            continue\\r\\n        }\\r\\n\\r\\n        if (target.hackDifficulty > target.securityThreshold) {\\r\\n            await ns.sleep(performAttack(ns, weakenAttack, target, attackers))\\r\\n        } else if (target.moneyAvailable < target.moneyThreshold) {\\r\\n            await ns.sleep(performAttack(ns, growAttack, target, attackers))\\r\\n        } else {\\r\\n            await ns.sleep(performAttack(ns, hackAttack, target, attackers))\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function getAttackers(ns) {\\r\\n    var hasAdminFilter = filter_adminRights(true)\\r\\n    // 1.6G base script size + 0.15G (weaken/grow)\\r\\n    // hack() requires 0.1G so it works everywhere where weaken/grow works\\r\\n    var ramFilter = filter_minRamAvailable(ns.getScriptRam(\\\"/payload/weaken-only.js\\\"))\\r\\n    return applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n}\\r\\n\\r\\n\",\"filename\":\"/scripts/single-target-scheduler.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///e34114a3-4a42-4b8a-9301-6dd5dd6934c8\",\"moduleSequenceNumber\":27714},{\"filename\":\"/scripts/single-target-scheduler.js\",\"url\":\"blob:file:///48284b6f-e9df-4c95-ba95-d2ec4a215546\",\"moduleSequenceNumber\":27715}],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"home\",\"moduleSequenceNumber\":249,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    buyServers,\\r\\n    upgradeServers,\\r\\n    buyHacknetNodes,\\r\\n    upgradeHacknetNodes,\\r\\n    getHacknetRamUpgrade,\\r\\n    getHacknetCoreUpgrade,\\r\\n    getHacknetLevelUpgrade,\\r\\n    schedule,\\r\\n    getServersByRam,\\r\\n    maxServerUpgrade,\\r\\n    bulkServerUpgrade,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var count = Infinity\\r\\n    if (ns.args.length > 0) {\\r\\n        count = parseInt(ns.args[0])\\r\\n    }\\r\\n\\r\\n    var completed = []\\r\\n    // with the ability to set a money limit with\\r\\n    // the money-limit.js script, there is no need\\r\\n    // to limit the size of our compute nodes here\\r\\n    var serverRamLimit = ns.getPurchasedServerMaxRam()\\r\\n    var hacknetNodeLimit = 8\\r\\n    var hacknetRamUpgrade = getHacknetRamUpgrade(ns, hacknetNodeLimit)\\r\\n    var doHacknet = false\\r\\n    var expected = doHacknet ? 6 : 2\\r\\n    var hacknetCoreUpgrade = getHacknetCoreUpgrade(ns, hacknetNodeLimit)\\r\\n    var hacknetLevelUpgrade = getHacknetLevelUpgrade(ns, hacknetNodeLimit)\\r\\n\\r\\n    ns.disableLog(\\\"disableLog\\\")\\r\\n    var markCompleted = (name) => {\\r\\n        if (!completed.includes(name)) {\\r\\n            completed.push(name)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    while ((completed.length < expected) && (count > 0)) {\\r\\n        let maxUpgrade = maxServerUpgrade(ns) > serverRamLimit ? serverRamLimit : maxServerUpgrade(ns)\\r\\n        let serversByRam = getServersByRam(ns)\\r\\n        let serverCount = ns.getPurchasedServers().length\\r\\n        let largestServer = serverCount > 0 ? Object.keys(serversByRam).sort()[0] : 0\\r\\n\\r\\n        ns.printf(\\\"MaxUpgrade: %d; largest Server: %d\\\", maxUpgrade, largestServer)\\r\\n        if ((maxUpgrade > 4) && (maxUpgrade > largestServer)) {\\r\\n            if (await bulkServerUpgrade(ns, maxUpgrade) && maxUpgrade >= serverRamLimit) {\\r\\n                markCompleted(\\\"buyServers\\\")\\r\\n                markCompleted(\\\"upgradeServers\\\")\\r\\n            }\\r\\n\\r\\n        } else {\\r\\n            if (await buyServers(ns)) {\\r\\n                markCompleted(\\\"buyServers\\\")\\r\\n            }\\r\\n            if (await upgradeServers(ns, serverRamLimit)) {\\r\\n                markCompleted(\\\"upgradeServers\\\")\\r\\n            }\\r\\n        }\\r\\n        // only start upgrading hacknet when we at least have\\r\\n        // a basic set of purchased servers\\r\\n        if (completed.includes(\\\"buyServers\\\") && doHacknet) {\\r\\n            if (buyHacknetNodes(ns, hacknetNodeLimit)) {\\r\\n                markCompleted(\\\"buyHacknetNodes\\\")\\r\\n            }\\r\\n            if (await upgradeHacknetNodes(ns, hacknetRamUpgrade)) {\\r\\n                markCompleted(\\\"buyHacknetRam\\\")\\r\\n            }\\r\\n            if (await upgradeHacknetNodes(ns, hacknetCoreUpgrade)) {\\r\\n                markCompleted(\\\"buyHacknetCores\\\")\\r\\n            }\\r\\n            if (await upgradeHacknetNodes(ns, hacknetLevelUpgrade)) {\\r\\n                markCompleted(\\\"buyHacknetLevel\\\")\\r\\n            }\\r\\n        }\\r\\n        if (!await schedule(ns, \\\"/scripts/backdoor-worm.js\\\")) {\\r\\n            ns.print(\\\"Failed to execute backdoor-worm\\\")\\r\\n        }\\r\\n        count--\\r\\n        if (count > 0) {\\r\\n            await ns.sleep(10000)\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/setup-upgrade-infra.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///b503f5ce-5154-4510-bdb8-1740cca696d1\",\"moduleSequenceNumber\":1637},{\"filename\":\"/scripts/setup-upgrade-infra.js\",\"url\":\"blob:file:///3a87c5dc-9a42-4f34-8bd4-4b66ba733227\",\"moduleSequenceNumber\":37040}],\"dependents\":[],\"ramUsage\":21.3,\"server\":\"home\",\"moduleSequenceNumber\":250,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    filter_adminRights,\\r\\n    filter_minRamAvailable,\\r\\n    getAllServers,\\r\\n    applyFilter,\\r\\n    ramAvail,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var script = \\\"/payload/share.js\\\"\\r\\n    var scriptRam = ns.getScriptRam(script)\\r\\n    var hasAdminFilter = filter_adminRights(true)\\r\\n    var ramFilter = filter_minRamAvailable(scriptRam)\\r\\n    var targets = getAllServers(ns)\\r\\n    targets = applyFilter(targets, [hasAdminFilter, ramFilter], false, false)\\r\\n    for (const t in targets) {\\r\\n        // we don't ever want to use home to boost faction gain as the compute\\r\\n        // power there is way to valuable for that. Given a large enough size\\r\\n        // later in the game, most attacks are executed from home, so we can use\\r\\n        // all other compute power for sharing.\\r\\n        if (targets[t].hostname == \\\"home\\\") {\\r\\n            continue\\r\\n        }\\r\\n        let serverThreads = Math.floor(ramAvail(targets[t]) / scriptRam)\\r\\n        if (ns.exec(script, t, serverThreads) == 0) {\\r\\n            ns.tprintf(\\\"Failed to share() on '%s' with %d threads\\\", t, serverThreads)\\r\\n        }\\r\\n    }\\r\\n    await ns.sleep(2000)\\r\\n    ns.tprintf(\\\"Share power: %f\\\", ns.getSharePower())\\r\\n}\",\"filename\":\"/scripts/boost-faction-reputation.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///c9fa377f-8efe-4acc-ab92-889cf3703648\",\"moduleSequenceNumber\":51742},{\"filename\":\"/scripts/boost-faction-reputation.js\",\"url\":\"blob:file:///f63c3263-3ae7-453e-a520-ac2682b9ae62\",\"moduleSequenceNumber\":55701}],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"home\",\"moduleSequenceNumber\":251,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getSharePower\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { schedule } from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    if (!await schedule(ns, ...ns.args)) {\\r\\n        ns.print(\\\"Failed to execute '%s'\\\", ns.args[0])\\r\\n    }\\r\\n}\",\"filename\":\"run.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.55,\"server\":\"home\",\"moduleSequenceNumber\":252,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///a20ca803-efea-4f7b-a4a4-973c7fafd698\",\"moduleSequenceNumber\":6260}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":253,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    filter_hostname,\\r\\n    filter_playerServer,\\r\\n    getAllServers,\\r\\n    applyFilter,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var known = []\\r\\n    var nameFilter = filter_hostname(ns, \\\"darkweb|home\\\")\\r\\n    var playerServerFilter = filter_playerServer(true)\\r\\n    var targets = getAllServers(ns)\\r\\n    targets = applyFilter(targets, [nameFilter, playerServerFilter])\\r\\n\\r\\n\\r\\n    for (const t in targets) {\\r\\n        let result = []\\r\\n        for (const f of ns.ls(t)) {\\r\\n            if (f.startsWith(\\\"/payload/\\\") || f.startsWith(\\\"/lib/\\\") || f.startsWith(\\\"/scripts/\\\") || f.startsWith(\\\"/scratch/\\\")) {\\r\\n                continue\\r\\n            }\\r\\n            if (!known.includes(f)) {\\r\\n                result.push(f)\\r\\n                known.push(f)\\r\\n            }\\r\\n        }\\r\\n        if (result.length > 0) {\\r\\n            ns.tprintf(\\\"%s:\\\", t)\\r\\n            for (const f of result) {\\r\\n                ns.tprintf(\\\"  %s\\\", f)\\r\\n                if (f.endsWith(\\\".lit\\\")) {\\r\\n                    await ns.scp(f, \\\"home\\\", t)\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/find-files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///eb0a39a2-2c7b-45b9-b992-8caaa11f548a\",\"moduleSequenceNumber\":136926},{\"filename\":\"/scripts/find-files.js\",\"url\":\"blob:file:///c750a4a9-9a84-448e-a5f8-716975578a18\",\"moduleSequenceNumber\":147666}],\"dependents\":[],\"ramUsage\":8.35,\"server\":\"home\",\"moduleSequenceNumber\":254,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    applyFilter,\\r\\n    filter_adminRights,\\r\\n    filter_minRamAvailable,\\r\\n    getAllServers,\\r\\n    performAttack,\\r\\n    getGrowAttack,\\r\\n    getWeakenAttack,\\r\\n    getHackAttack,\\r\\n    getTargetAddPort,\\r\\n    getTargetRemovePort,\\r\\n    threadsAvailable,\\r\\n    sortObjectBy,\\r\\n    sortByKey,\\r\\n    getAdditionalServerInfo,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var targets = [...ns.args]\\r\\n    const growAttack = getGrowAttack(ns)\\r\\n    const weakenAttack = getWeakenAttack(ns)\\r\\n    const hackAttack = getHackAttack(ns)\\r\\n    ns.disableLog(\\\"disableLog\\\")\\r\\n    ns.disableLog(\\\"sleep\\\")\\r\\n\\r\\n    // If there is an already running instance of the scheduler\\r\\n    // just add the parameters as targets and exit. Bitburner\\r\\n    // itself prevents multiple instances of the same script running\\r\\n    // with the same parameters\\r\\n    if (isRunning(ns)) {\\r\\n        let addPort = getTargetAddPort(ns)\\r\\n        for (const t of targets) {\\r\\n            while (!addPort.tryWrite(t)) {\\r\\n                await ns.sleep(1000)\\r\\n            }\\r\\n        }\\r\\n        return\\r\\n    }\\r\\n\\r\\n    var procs = {}\\r\\n    var startDate = new Date()\\r\\n    while (true) {\\r\\n        let schedulables = getSchedulables(targets, procs)\\r\\n        for (const targetName of schedulables) {\\r\\n            let target = getAdditionalServerInfo(ns, ns.getServer(targetName))\\r\\n            let attackers = getAttackers(ns)\\r\\n\\r\\n            // no attackers available, skip this scheduling cycle\\r\\n            if (Object.keys(attackers).length <= 0) {\\r\\n                continue\\r\\n            }\\r\\n\\r\\n            var nextAttack = hackAttack\\r\\n            if (target.hackDifficulty > target.securityThreshold) {\\r\\n                nextAttack = weakenAttack\\r\\n            } else if (target.moneyAvailable < target.moneyThreshold) {\\r\\n                nextAttack = growAttack\\r\\n            }\\r\\n            var state = performAttack(ns, nextAttack, target, attackers)\\r\\n            procs[targetName] = state\\r\\n        }\\r\\n        printState(ns, procs, targets)\\r\\n        let waitResult = await wait(ns, procs, startDate)\\r\\n        procs = waitResult[\\\"procs\\\"]\\r\\n        startDate = waitResult[\\\"startDate\\\"]\\r\\n        targets = updateTargets(ns, targets)\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getAttackers(ns) {\\r\\n    var hasAdminFilter = filter_adminRights(true)\\r\\n    // 1.6G base script size + 0.15G (weaken/grow)\\r\\n    // hack() requires 0.1G so it works everywhere where weaken/grow works\\r\\n    var ramFilter = filter_minRamAvailable(ns.getScriptRam(\\\"/payload/weaken-only.js\\\"))\\r\\n    return applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n}\\r\\n\\r\\nfunction getSchedulables(targets, procs) {\\r\\n    var schedulables = []\\r\\n    var running = Object.keys(procs)\\r\\n    for (const t of targets) {\\r\\n        if (!running.includes(t)) {\\r\\n            schedulables.push(t)\\r\\n        }\\r\\n    }\\r\\n    return schedulables\\r\\n}\\r\\n\\r\\nasync function wait(ns, procs, startDate = new Date()) {\\r\\n    var newProcs = {}\\r\\n    await ns.sleep(200)\\r\\n    var newStartDate = new Date()\\r\\n    var endDate = new Date()\\r\\n    var iterationTime = endDate.getTime() - startDate.getTime()\\r\\n    ns.printf(\\\"Schedule iteration took %s ms\\\", iterationTime)\\r\\n    for (const proc in procs) {\\r\\n        let newWaitTime = procs[proc][\\\"waitTime\\\"] - iterationTime\\r\\n        let pids = procs[proc][\\\"pids\\\"]\\r\\n        let newPids = [...pids].filter((p) => ns.isRunning(p))\\r\\n        if (newPids.length < 1) {\\r\\n            continue\\r\\n        }\\r\\n        newProcs[proc] = procs[proc]\\r\\n        newProcs[proc][\\\"pids\\\"] = newPids\\r\\n        newProcs[proc][\\\"waitTime\\\"] = newWaitTime\\r\\n    }\\r\\n    return {\\r\\n        \\\"procs\\\": newProcs,\\r\\n        \\\"startDate\\\": newStartDate,\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction updateTargets(ns, current) {\\r\\n    var newTargets = [...current]\\r\\n    var addPort = getTargetAddPort(ns)\\r\\n    var removePort = getTargetRemovePort(ns)\\r\\n\\r\\n    while (!addPort.empty()) {\\r\\n        let data = addPort.read()\\r\\n        // Just a safety precaution as I have no idea\\r\\n        // how race-condition safe the port interface is.\\r\\n        // As in \\\"if empty() returns false, is it guaranteed to\\r\\n        // stay non empty in the current function?\\\"\\r\\n        // Also do not add targets that are already present\\r\\n        if ((data != \\\"NULL PORT DATA\\\") && (!newTargets.includes(data))) {\\r\\n            if (!ns.serverExists(data)) {\\r\\n                ns.printf(\\\"Failed to add new target, server does not exist: %s\\\", data)\\r\\n            }\\r\\n            newTargets.push(data)\\r\\n        }\\r\\n    }\\r\\n    while (!removePort.empty()) {\\r\\n        let data = removePort.read()\\r\\n        // See comment above\\r\\n        if (data != \\\"NULL PORT DATA\\\") {\\r\\n            newTargets = newTargets.filter((v) => v != data)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return newTargets\\r\\n}\\r\\n\\r\\nfunction printState(ns, procs, targets) {\\r\\n    var procNames = [...Object.keys(procs)].sort()\\r\\n    var sortedProcs = sortObjectBy(procs, sortByKey(\\\"waitTime\\\"))\\r\\n    if (sortedProcs.length > 0) {\\r\\n        ns.print(\\\"Running attacks:\\\")\\r\\n        for (const proc of sortedProcs) {\\r\\n            ns.printf(\\\"  %20s: %6s (s: %3d / %3d; t: %6d; rt: %6d; wt: %8s)\\\",\\r\\n                proc[\\\"target\\\"],\\r\\n                proc[\\\"operation\\\"],\\r\\n                proc[\\\"pids\\\"].length,\\r\\n                proc[\\\"serverCount\\\"],\\r\\n                proc[\\\"attackThreads\\\"],\\r\\n                proc[\\\"requiredThreads\\\"],\\r\\n                ns.nFormat(proc[\\\"waitTime\\\"] / 1000, \\\"00:00:00\\\"),\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n    var idleTargets = []\\r\\n    for (const t of targets) {\\r\\n        if (!procNames.includes(t)) {\\r\\n            idleTargets.push(t)\\r\\n        }\\r\\n    }\\r\\n    if (idleTargets.length > 0) {\\r\\n        ns.print(\\\"Idle targets:\\\")\\r\\n        for (const t of idleTargets) {\\r\\n            ns.printf(\\\"  %s\\\", t)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let maxAttackScriptSize = ns.getScriptRam(\\\"/payload/weaken-only.js\\\")\\r\\n    let systemThreads = threadsAvailable(ns, maxAttackScriptSize, false)\\r\\n    let idleThreads = threadsAvailable(ns, maxAttackScriptSize, true)\\r\\n    ns.printf(\\\"System threads: %d (idle); %d (available)\\\", idleThreads, systemThreads)\\r\\n}\\r\\n\\r\\nfunction isRunning(ns) {\\r\\n    var myself = ns.getScriptName()\\r\\n    var count = 0\\r\\n    for (const proc of ns.ps()) {\\r\\n        if (proc.filename == myself) {\\r\\n            count++\\r\\n        }\\r\\n        if (count > 1) {\\r\\n            return true\\r\\n        }\\r\\n    }\\r\\n    return false\\r\\n}\",\"filename\":\"/scripts/multi-target-scheduler.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///8a9dc810-69a0-4a40-bb01-9bbd754e6a77\",\"moduleSequenceNumber\":243},{\"filename\":\"/scripts/multi-target-scheduler.js\",\"url\":\"blob:file:///b5968a59-b2ea-427d-a69b-1e02ad95c71c\",\"moduleSequenceNumber\":481}],\"dependents\":[],\"ramUsage\":9.35,\"server\":\"home\",\"moduleSequenceNumber\":481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    getTargetAddPort,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var targets = ns.args\\r\\n    var addPort = getTargetAddPort(ns)\\r\\n    for (const t of targets) {\\r\\n        if (!ns.serverExists(t)) {\\r\\n            ns.tprintf(\\\"Server does not exist: %s\\\", t)\\r\\n        }\\r\\n        while (!addPort.tryWrite(t)) {\\r\\n            await ns.sleep(1000)\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/add-targets.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///e6134bbb-ab73-467a-875d-34fa6e41015e\",\"moduleSequenceNumber\":1915},{\"filename\":\"/scripts/add-targets.js\",\"url\":\"blob:file:///02406b3a-c965-4042-bddf-2079ea459a4b\",\"moduleSequenceNumber\":2061}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    getTargetRemovePort,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var targets = ns.args\\r\\n    var removePort = getTargetRemovePort(ns)\\r\\n    for (const t of targets) {\\r\\n        while (!removePort.tryWrite(t)) {\\r\\n            await ns.sleep(1000)\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/remove-targets.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///4b21ab29-770b-4d06-b25d-77ac845f5435\",\"moduleSequenceNumber\":243},{\"filename\":\"/scripts/remove-targets.js\",\"url\":\"blob:file:///a84cae8f-0120-4863-b84f-392ceadfdc12\",\"moduleSequenceNumber\":12792}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":12792,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    setMoneyLimit,\\r\\n    getMoneyLimit,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args.length < 1) {\\r\\n        ns.tprintf(\\\"Current money limit: %d\\\", getMoneyLimit(ns))\\r\\n        return\\r\\n    }\\r\\n    setMoneyLimit(ns, ns.args[0])\\r\\n    ns.tprintf(\\\"New money limit: %d\\\", getMoneyLimit(ns))\\r\\n}\\r\\n\",\"filename\":\"/scripts/money-limit.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///38f37ecb-2dcb-43cc-aa01-659b0c27cd7b\",\"moduleSequenceNumber\":4401},{\"filename\":\"/scripts/money-limit.js\",\"url\":\"blob:file:///74a582ff-9db2-4fd5-94ea-61f71843b326\",\"moduleSequenceNumber\":4565}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":258,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    getAllServers,\\r\\n    applyFilter,\\r\\n    filter_hackingSkill,\\r\\n    filter_minMaxMoney,\\r\\n    filter_adminRights,\\r\\n    sortObjectBy,\\r\\n    //sortByFunctionValue,\\r\\n    sortByKey,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    // can be used to add specialized sort functions \\r\\n    // if necessary, but most information should be\\r\\n    // already injected in the server object by getAdditionalServerInfo()\\r\\n    // during the getAllServers() call\\r\\n    var sortTypes = {\\r\\n        // \\\"weakenTime\\\": sortByFunctionValue(ns.getWeakenTime),\\r\\n        // \\\"growTime\\\": sortByFunctionValue(ns.getGrowTime),\\r\\n        // \\\"hackTime\\\": sortByFunctionValue(ns.getHackTime),\\r\\n    }\\r\\n\\r\\n    var sortType = \\\"moneyMax\\\"\\r\\n    if (ns.args.length > 0) {\\r\\n        sortType = ns.args[0]\\r\\n    }\\r\\n    var output = \\\"\\\"\\r\\n    if (ns.args.length > 1) {\\r\\n        output = ns.args[1]\\r\\n    }\\r\\n    var sortFunc = sortByKey(sortType)\\r\\n    if (Object.keys(sortTypes).includes(sortType)) {\\r\\n        sortFunc = sortTypes[sortType]\\r\\n    }\\r\\n\\r\\n    var skillFilter = filter_hackingSkill(ns.getHackingLevel())\\r\\n    var maxMoneyFilter = filter_minMaxMoney(1)\\r\\n    var hasAdminFilter = filter_adminRights(false)\\r\\n    var servers = applyFilter(getAllServers(ns), [skillFilter, hasAdminFilter])\\r\\n    servers = applyFilter(servers, [maxMoneyFilter], false)\\r\\n\\r\\n    for (const server of sortObjectBy(servers, sortFunc)) {\\r\\n        if (output != \\\"\\\") {\\r\\n            ns.tprintf(\\\"%s\\\", server[output])\\r\\n            continue\\r\\n        }\\r\\n        ns.tprintf(\\r\\n            \\\"%20s: sc: %8s; tsc: %8s; m: %8s; gr: %4d; sm: %3d; wt: %8s; gt: %8s; ht: %8s\\\",\\r\\n            server.hostname,\\r\\n            ns.nFormat(server.score, '0.00e+0'),\\r\\n            ns.nFormat(server.timeScore, \\\"($0.00a)\\\"),\\r\\n            ns.nFormat(server.moneyMax, \\\"($0.00a)\\\"),\\r\\n            server.serverGrowth,\\r\\n            server.minDifficulty,\\r\\n            ns.nFormat(server.weakenTime / 1000, \\\"00:00:00\\\"),\\r\\n            ns.nFormat(server.growTime / 1000, \\\"00:00:00\\\"),\\r\\n            ns.nFormat(server.hackTime / 1000, \\\"00:00:00\\\"),\\r\\n        )\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/compare-servers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///accd25c4-d701-40ad-bfaa-01f6dfaf6c05\",\"moduleSequenceNumber\":243},{\"filename\":\"/scripts/compare-servers.js\",\"url\":\"blob:file:///8b28613e-fd1a-4252-9f1d-c211951c2734\",\"moduleSequenceNumber\":11774}],\"dependents\":[],\"ramUsage\":7.6,\"server\":\"home\",\"moduleSequenceNumber\":11774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var base = 8\\r\\n    var ram = base\\r\\n    while (ram <= ns.getPurchasedServerMaxRam()) {\\r\\n        ns.tprintf(\\r\\n            \\\"%9s: %8s (%8s)\\\",\\r\\n            ns.nFormat(ram * 1024 * 1024 * 1024, \\\"0.00ib\\\"),\\r\\n            ns.nFormat(ns.getPurchasedServerCost(ram), \\\"($0.00a)\\\"),\\r\\n            ns.nFormat(ns.getPurchasedServerCost(ram) * ns.getPurchasedServerLimit(), \\\"($0.00a)\\\")\\r\\n        )\\r\\n        ram = ram * 2\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/server-upgrade-costs.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/server-upgrade-costs.js\",\"url\":\"blob:file:///595528d5-7fe3-4aee-a017-e5fce3098534\",\"moduleSequenceNumber\":37039}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":260,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    getAllServers,\\r\\n    applyFilter,\\r\\n    filter_hackingSkill,\\r\\n    filter_minMaxMoney,\\r\\n    filter_adminRights,\\r\\n    getTargetAddPort,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var skillFilter = filter_hackingSkill(ns.getHackingLevel())\\r\\n    var maxMoneyFilter = filter_minMaxMoney(1)\\r\\n    var hasAdminFilter = filter_adminRights(false)\\r\\n    var servers = applyFilter(getAllServers(ns), [skillFilter, hasAdminFilter])\\r\\n    servers = applyFilter(servers, [maxMoneyFilter], false)\\r\\n\\r\\n    var addPort = getTargetAddPort(ns)\\r\\n    for (const t of Object.keys(servers)) {\\r\\n        ns.tprintf(\\\"Adding %s as target\\\", t)\\r\\n        while (!addPort.tryWrite(t)) {\\r\\n            await ns.sleep(1000)\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/add-all-targets.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///47be6fcc-ba38-4506-83fe-dd76f22896c8\",\"moduleSequenceNumber\":243},{\"filename\":\"/scripts/add-all-targets.js\",\"url\":\"blob:file:///adb1ee75-c08e-4dd1-b85d-cc2257a514ae\",\"moduleSequenceNumber\":11775}],\"dependents\":[],\"ramUsage\":7.6,\"server\":\"home\",\"moduleSequenceNumber\":11775,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    portOpener,\\r\\n    threadsAvailable,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hackScheduler = \\\"/scripts/multi-target-scheduler.js\\\"\\r\\n    ns.exec(\\\"/scripts/backdoor-worm.js\\\", \\\"home\\\")\\r\\n    if (!ns.scriptRunning(hackScheduler, \\\"home\\\")) {\\r\\n        ns.tail(ns.exec(hackScheduler, \\\"home\\\"))\\r\\n    }\\r\\n\\r\\n    var portOpenerSeen = portOpener(ns).length\\r\\n    while (true) {\\r\\n        var currentPortOpener = portOpener(ns).length\\r\\n        if (currentPortOpener > portOpenerSeen) {\\r\\n            ns.exec(\\\"/scripts/backdoor-worm.js\\\", \\\"home\\\")\\r\\n            portOpenerSeen = currentPortOpener\\r\\n        }\\r\\n\\r\\n        var player = ns.getPlayer()\\r\\n        var sleeveCount = ns.sleeve.getNumSleeves()\\r\\n        var threadsAvail = threadsAvailable(ns, 1.75, false)\\r\\n        if (sleeveCount >= 1) {\\r\\n            for (var id = 0; id < sleeveCount; id++) {\\r\\n                var sleeve = ns.sleeve.getSleeveStats(id)\\r\\n                var task = ns.sleeve.getTask(id)\\r\\n                if ((sleeve.shock > 0) && (task.type != \\\"RECOVERY\\\")) {\\r\\n                    ns.sleeve.setToShockRecovery(id)\\r\\n                    continue\\r\\n                }\\r\\n                if ((sleeve.sync < 100) && (task.type != \\\"SYNCHRO\\\")) {\\r\\n                    ns.sleeve.setToSynchronize(id)\\r\\n                }\\r\\n            }\\r\\n            if ((player.skills.hacking < 10) && (ns.sleeve.getSleeveStats(0).sync >= 100)) {\\r\\n                if (!ns.sleeve.setToUniversityCourse(0, \\\"Rothman University\\\", \\\"Study Computer Science\\\")) {\\r\\n                    ns.print(\\\"Failed to send sleeve 0 to study computer science at Rothman University\\\")\\r\\n                }\\r\\n            }\\r\\n            if ((player.skills.hacking >= 10) && (player.factions.includes(\\\"Tian Di Hui\\\")) && (ns.sleeve.getSleeveStats(0).sync >= 100)) {\\r\\n                if (!ns.sleeve.setToFactionWork(0, \\\"Tian Di Hui\\\", \\\"Hacking Contracts\\\")) {\\r\\n                    ns.print(\\\"Failed to send sleeve 0 to do hacking contracts for Tian Di Hui\\\")\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        var stages = {\\r\\n            0: [\\\"joesguns\\\"],\\r\\n            1500: [\\\"sigma-cosmetics\\\"],\\r\\n            3000: [\\\"harakiri-sushi\\\", \\\"max-hardware\\\", \\\"zer0\\\"],\\r\\n            6000: [\\\"phantasy\\\", \\\"iron-gym\\\"],\\r\\n            15000: [\\\"omega-net\\\", \\\"silver-helix\\\"],\\r\\n            25000: [\\\"nectar-net\\\", \\\"hong-fang-tea\\\", \\\"neo-net\\\"],\\r\\n            40000: [\\\"computek\\\", \\\"netlink\\\", \\\"catalyst\\\", \\\"summit-uni\\\"],\\r\\n            70000: [\\\"rho-construction\\\", \\\"the-hub\\\", \\\"alpha-ent\\\", \\\"snap-fitness\\\", \\\"lexo-corp\\\"]\\r\\n        }\\r\\n        for (const stage of Object.keys(stages)) {\\r\\n            if (threadsAvail >= stage) {\\r\\n                for (const name of stages[stage]) {\\r\\n                    var server = ns.getServer(name)\\r\\n                    if (server.hasAdminRights && (server.hackDifficulty <= player.skills.hacking)) {\\r\\n                        addTarget(ns, name)\\r\\n                        await ns.sleep(100)\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (threadsAvail >= 100000 && (player.skills.hacking > 2200)) {\\r\\n            ns.exec(\\\"/scripts/add-all-targets.js\\\", \\\"home\\\")\\r\\n            return\\r\\n        }\\r\\n        await ns.sleep(2000)\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction addTarget(ns, ...names) {\\r\\n    ns.exec(\\\"/scripts/add-targets.js\\\", \\\"home\\\", 1, ...names)\\r\\n}\",\"filename\":\"/scripts/startup.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///f0a1d6d3-f3c7-404f-bb66-231f51d8cb0d\",\"moduleSequenceNumber\":1915},{\"filename\":\"/scripts/startup.js\",\"url\":\"blob:file:///a71bad9c-25df-495b-9032-993627e9ead6\",\"moduleSequenceNumber\":1938}],\"dependents\":[],\"ramUsage\":34.95,\"server\":\"home\",\"moduleSequenceNumber\":262,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getSleeveStats\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getTask\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToShockRecovery\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToSynchronize\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToUniversityCourse\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToFactionWork\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    findServer\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\nexport async function main(ns) {\\r\\n    var names = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"fulcrumassets\\\", \\\"w0r1d_d43m0n\\\"]\\r\\n    if (ns.args.length > 0) {\\r\\n        names = ns.args\\r\\n    }\\r\\n    for (const name of names) {\\r\\n        ns.tprintf(\\\"%s\\\", findServer(ns, name))\\r\\n    }\\r\\n}\\r\\n\\r\\n\",\"filename\":\"/scripts/find-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///9ce99c79-f2b5-45c3-a161-26e2275a66d1\",\"moduleSequenceNumber\":1915},{\"filename\":\"/scripts/find-server.js\",\"url\":\"blob:file:///83c6916d-e90d-4e0b-9595-d3ef69d802f9\",\"moduleSequenceNumber\":2148}],\"dependents\":[],\"ramUsage\":7.55,\"server\":\"home\",\"moduleSequenceNumber\":263,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar multipliers = ns.getBitNodeMultipliers()\\r\\n\\tfor (const key in multipliers) {\\r\\n\\t\\tif (multipliers[key] != 1) {\\r\\n\\t\\t\\tns.tprintf(\\\"%27s: %s\\\", key, multipliers[key])\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"filename\":\"/scripts/bitnode-details.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/bitnode-details.js\",\"url\":\"blob:file:///af4b5d30-bd00-4505-880e-d59a14180e24\",\"moduleSequenceNumber\":3593}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    applyFilter,\\r\\n    filter_adminRights,\\r\\n    filter_minRamAvailable,\\r\\n    getAllServers,\\r\\n    threadsAvailable,\\r\\n    getHackAttack,\\r\\n    sortObjectBy,\\r\\n    sortByKey,\\r\\n    getAdditionalServerInfo,\\r\\n    ramAvail,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var targets = [\\\"darkweb\\\"]\\r\\n    const hackAttack = getHackAttack(ns)\\r\\n    ns.disableLog(\\\"disableLog\\\")\\r\\n    ns.disableLog(\\\"sleep\\\")\\r\\n\\r\\n    // If there is an already running instance of the scheduler\\r\\n    // just add the parameters as targets and exit. Bitburner\\r\\n    // itself prevents multiple instances of the same script running\\r\\n    // with the same parameters\\r\\n    if (isRunning(ns)) {\\r\\n        return\\r\\n    }\\r\\n\\r\\n    var procs = {}\\r\\n    var startDate = new Date()\\r\\n    while (true) {\\r\\n        let schedulables = getSchedulables(targets, procs)\\r\\n        for (const targetName of schedulables) {\\r\\n            let target = getAdditionalServerInfo(ns, ns.getServer(targetName))\\r\\n            let attackers = getAttackers(ns)\\r\\n\\r\\n            // no attackers available, skip this scheduling cycle\\r\\n            if (Object.keys(attackers).length <= 0) {\\r\\n                continue\\r\\n            }\\r\\n\\r\\n            var nextAttack = hackAttack\\r\\n            var state = performUnboundAttack(ns, nextAttack, target, attackers)\\r\\n            procs[targetName] = state\\r\\n        }\\r\\n        printState(ns, procs, targets)\\r\\n        let waitResult = await wait(ns, procs, startDate)\\r\\n        procs = waitResult[\\\"procs\\\"]\\r\\n        startDate = waitResult[\\\"startDate\\\"]\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getAttackers(ns) {\\r\\n    var hasAdminFilter = filter_adminRights(true)\\r\\n    // 1.6G base script size + 0.15G (weaken/grow)\\r\\n    // hack() requires 0.1G so it works everywhere where weaken/grow works\\r\\n    var ramFilter = filter_minRamAvailable(ns.getScriptRam(\\\"/payload/hack-only.js\\\"))\\r\\n    return applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n}\\r\\n\\r\\nfunction getSchedulables(targets, procs) {\\r\\n    var schedulables = []\\r\\n    var running = Object.keys(procs)\\r\\n    for (const t of targets) {\\r\\n        if (!running.includes(t)) {\\r\\n            schedulables.push(t)\\r\\n        }\\r\\n    }\\r\\n    return schedulables\\r\\n}\\r\\n\\r\\nasync function wait(ns, procs, startDate = new Date()) {\\r\\n    var newProcs = {}\\r\\n    await ns.sleep(200)\\r\\n    var newStartDate = new Date()\\r\\n    var endDate = new Date()\\r\\n    var iterationTime = endDate.getTime() - startDate.getTime()\\r\\n    ns.printf(\\\"Schedule iteration took %s ms\\\", iterationTime)\\r\\n    for (const proc in procs) {\\r\\n        let newWaitTime = procs[proc][\\\"waitTime\\\"] - iterationTime\\r\\n        let pids = procs[proc][\\\"pids\\\"]\\r\\n        let newPids = [...pids].filter((p) => ns.isRunning(p))\\r\\n        if (newPids.length < 1) {\\r\\n            continue\\r\\n        }\\r\\n        newProcs[proc] = procs[proc]\\r\\n        newProcs[proc][\\\"pids\\\"] = newPids\\r\\n        newProcs[proc][\\\"waitTime\\\"] = newWaitTime\\r\\n    }\\r\\n    return {\\r\\n        \\\"procs\\\": newProcs,\\r\\n        \\\"startDate\\\": newStartDate,\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction printState(ns, procs, targets) {\\r\\n    var procNames = [...Object.keys(procs)].sort()\\r\\n    var sortedProcs = sortObjectBy(procs, sortByKey(\\\"waitTime\\\"))\\r\\n    if (sortedProcs.length > 0) {\\r\\n        ns.print(\\\"Running attacks:\\\")\\r\\n        for (const proc of sortedProcs) {\\r\\n            ns.printf(\\\"  %20s: %6s (s: %3d / %3d; t: %6d; rt: %6d; wt: %8s)\\\",\\r\\n                proc[\\\"target\\\"].hostname,\\r\\n                proc[\\\"type\\\"],\\r\\n                proc[\\\"pids\\\"].length,\\r\\n                proc[\\\"serverCount\\\"],\\r\\n                proc[\\\"attackThreads\\\"],\\r\\n                proc[\\\"requiredThreads\\\"],\\r\\n                ns.nFormat(proc[\\\"waitTime\\\"] / 1000, \\\"00:00:00\\\"),\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n    var idleTargets = []\\r\\n    for (const t of targets) {\\r\\n        if (!procNames.includes(t)) {\\r\\n            idleTargets.push(t)\\r\\n        }\\r\\n    }\\r\\n    if (idleTargets.length > 0) {\\r\\n        ns.print(\\\"Idle targets:\\\")\\r\\n        for (const t of idleTargets) {\\r\\n            ns.printf(\\\"  %s\\\", t)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let maxAttackScriptSize = ns.getScriptRam(\\\"/payload/hack-only.js\\\")\\r\\n    let systemThreads = threadsAvailable(ns, maxAttackScriptSize, false)\\r\\n    let idleThreads = threadsAvailable(ns, maxAttackScriptSize, true)\\r\\n    ns.printf(\\\"System threads: %d (idle); %d (available)\\\", idleThreads, systemThreads)\\r\\n}\\r\\n\\r\\nfunction isRunning(ns) {\\r\\n    var myself = ns.getScriptName()\\r\\n    var count = 0\\r\\n    for (const proc of ns.ps()) {\\r\\n        if (proc.filename == myself) {\\r\\n            count++\\r\\n        }\\r\\n        if (count > 1) {\\r\\n            return true\\r\\n        }\\r\\n    }\\r\\n    return false\\r\\n}\\r\\n\\r\\nfunction performUnboundAttack(ns, attack, target, attackers) {\\r\\n    var waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n    var attackThreads = 0\\r\\n    var serverCount = 0\\r\\n    var scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n    ns.disableLog(\\\"exec\\\")\\r\\n    var pids = []\\r\\n    // this sorts the servers according to the amount of threads required by\\r\\n    // a single core system (assuming that all attackable systems are single core)...\\r\\n    var servers = Object.values(attackers)\\r\\n    // ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n    // this with the most suitable attacker\\r\\n    var requiredThreads = threadsAvailable(ns, 1.7, true)\\r\\n    var threadCount = requiredThreads\\r\\n    if (threadCount <= 0) {\\r\\n        ns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n        return {\\r\\n            \\\"waitTime\\\": 0,\\r\\n            \\\"requiredThreads\\\": requiredThreads,\\r\\n            \\\"attackThreads\\\": 0,\\r\\n            \\\"operation\\\": attack[\\\"type\\\"],\\r\\n            \\\"serverCount\\\": 0,\\r\\n            \\\"pids\\\": [],\\r\\n            \\\"target\\\": target.hostname,\\r\\n        }\\r\\n    }\\r\\n    for (const server of servers) {\\r\\n        let serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n        if (serverThreads > threadCount) {\\r\\n            serverThreads = threadCount\\r\\n        }\\r\\n        let pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n        if (pid == 0) {\\r\\n            ns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n            continue\\r\\n        }\\r\\n        pids.push(pid)\\r\\n        threadCount = threadCount - serverThreads\\r\\n        attackThreads = attackThreads + serverThreads\\r\\n        serverCount++\\r\\n        if (threadCount <= 0) {\\r\\n            break\\r\\n        }\\r\\n    }\\r\\n    return {\\r\\n        \\\"waitTime\\\": waitTime,\\r\\n        \\\"requiredThreads\\\": requiredThreads,\\r\\n        \\\"attackThreads\\\": attackThreads,\\r\\n        \\\"operation\\\": attack[\\\"type\\\"],\\r\\n        \\\"serverCount\\\": serverCount,\\r\\n        \\\"pids\\\": pids,\\r\\n        \\\"target\\\": target.hostname,\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/scratch/exp-farm.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///8c436446-d865-4b1e-8dcb-56f26abdeb28\",\"moduleSequenceNumber\":53028},{\"filename\":\"/scratch/exp-farm.js\",\"url\":\"blob:file:///42716f10-a1ea-40c3-b446-424dc768f130\",\"moduleSequenceNumber\":55877}],\"dependents\":[],\"ramUsage\":9.25,\"server\":\"home\",\"moduleSequenceNumber\":265,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"V2_0_0_API_BREAK.txt\",\"text\":\"This file contains the list of potential API break. A pattern was used to look through all your files and note the spots where you might have a problem. Not everything here is broken./ns\\\\.scp/g\\nscp arguments were switch, it is now scp(files, destination, optionally_source). If you were using 2 argument (not 3) this doesn't affect you.\\n\\n\\t/lib/utils.js\\n\\t\\tLine 230 await ns.scp(files, \\\"home\\\", name)\\n\\t\\tLine 481 await ns.scp(\\\"/lib/utils.js\\\", \\\"home\\\", target)\\n\\t\\tLine 482 await ns.scp(script, \\\"home\\\", target)\\n\\t/scripts/find-files.js\\n\\t\\tLine 33 await ns.scp(f, t, \\\"home\\\")\\n\\n\\n/ns.installBackdoor/g\\nns.installBackdoor was moved to ns.singularity.installBackdoor\\n\\n\\t/scripts/backdoor-worm.js\\n\\t\\tLine 50 //     await ns.installBackdoor(target.hostname)\\n\\n\\n/hacking/g\\nThe work system is completely reworked and ns.getPlayer().hacking no longer exists. This data is likely available inside ns.getPlayer().currentWork, skills, exp, or hp\\n\\n\\t/lib/utils.js\\n\\t\\tLine 69 export function filter_hackingSkill(level) {\\n\\t/scripts/compare-servers.js\\n\\t\\tLine 1 import { getAllServers, applyFilter, filter_hackingSkill, filter_minMaxMoney, filter_adminRights, sortObjectsBy } from \\\"lib/utils.js\\\";\\n\\t\\tLine 9 var skillFilter = filter_hackingSkill(ns.getHackingLevel())\\n\\n\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"91.8.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":43345096617,\"moneyMax\":1083627415425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1183,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"14.9.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":58458766098,\"moneyMax\":1461469152450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1277,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-927948.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0100100000000000101111100111001110100000111010000100101100000011\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"13.2.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":28651278695,\"moneyMax\":716281967375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1087,\"serverGrowth\":64}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-361131-CyberSec.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"EMAILFLASHTRASHMOUSELOGIN\",\"NOTEBOOK\"],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-960477.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,1],[0,1,0,0,0,0],[0,1,0,0,0,0],[1,1,0,0,0,0],[0,0,0,0,0,0],[0,0,0,1,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,1,0,0,1,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"77.5.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",18],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10205,\"ramUsage\":1.75,\"server\":\"blade\",\"threads\":18,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///f372c758-15f8-483c-bfcf-d8488d37103f\",\"moduleSequenceNumber\":12047}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"blade\",\"moduleSequenceNumber\":266,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///b71d9cec-9a7e-49b3-bdf5-cdc8f75a6779\",\"moduleSequenceNumber\":13034}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":13034,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///f372c758-15f8-483c-bfcf-d8488d37103f\",\"moduleSequenceNumber\":12047}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":12047,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":269,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"blade\",\"moduleSequenceNumber\":270,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":31803322945,\"moneyMax\":795083073625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":908,\"serverGrowth\":56}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"15.4.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":31792665753,\"moneyMax\":794816643825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1083,\"serverGrowth\":77}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-396449.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,0,1,0,0,1,1],[0,0,0,0,0,1,0,1,0,1,1,1],[1,0,0,0,1,0,0,0,1,0,1,0],[0,0,1,0,0,1,0,0,1,1,1,0],[0,0,0,0,1,0,1,0,0,1,1,1],[0,0,0,0,0,0,0,1,1,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,1,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"13.0.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":17132285333,\"moneyMax\":428307133325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":973,\"serverGrowth\":45}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"64.5.4.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",60],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10180,\"ramUsage\":1.75,\"server\":\"omnitek\",\"threads\":60,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///2d00c3fd-92a2-48ae-bd89-a083ce8409be\",\"moduleSequenceNumber\":12017}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",86],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.0100000000000025,\"pid\":10449,\"ramUsage\":1.75,\"server\":\"omnitek\",\"threads\":86,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///2d00c3fd-92a2-48ae-bd89-a083ce8409be\",\"moduleSequenceNumber\":12017}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":271,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///e242daaa-c970-4a8b-bdcb-d3605d06588a\",\"moduleSequenceNumber\":14489}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":14489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///2d00c3fd-92a2-48ae-bd89-a083ce8409be\",\"moduleSequenceNumber\":12017}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":12017,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///77e30089-fd3a-4f91-9934-3670dfbcafe2\",\"moduleSequenceNumber\":15451}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":15451,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"omnitek\",\"moduleSequenceNumber\":275,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"stormtech\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":20663744173,\"moneyMax\":516593604325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1033,\"serverGrowth\":98}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"69.7.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":17737373279,\"moneyMax\":443434331975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1115,\"serverGrowth\":94}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"18.6.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"nwo\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":28950291906,\"moneyMax\":723757297650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":995,\"serverGrowth\":99}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-132664.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[11,3,39,44,16],[13,14,3,29,44],[27,50,18,29,35],[16,30,35,26,38],[37,18,4,16,25],[9,5,1,35,14],[8,23,24,8,43],[3,29,2,48,2],[39,23,35,26,46]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"98.5.1.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",576],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":89.01000000000073,\"pid\":10371,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":576,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///6317be5f-f849-4097-a9de-dd74d434b2b2\",\"moduleSequenceNumber\":12016}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",9],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.0100000000000025,\"pid\":10450,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":9,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///6317be5f-f849-4097-a9de-dd74d434b2b2\",\"moduleSequenceNumber\":12016}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":276,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///caa5b131-6b1a-429e-94a3-1a6753c73b5a\",\"moduleSequenceNumber\":13033}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":13033,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///6317be5f-f849-4097-a9de-dd74d434b2b2\",\"moduleSequenceNumber\":12016}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":12016,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///fa0feb27-3491-426f-b043-99a82be24063\",\"moduleSequenceNumber\":15450}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":15450,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":280,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":1592141878,\"moneyMax\":39803546950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":979,\"serverGrowth\":91}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-341577-AlphaEnterprises.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"218135137227\",\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"22.4.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1588,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-228843-AlphaEnterprises.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[2],[6,7],[3,2,6],[8,2,2,1],[4,3,8,4,3],[4,9,7,2,5,8],[2,5,8,2,6,1,6],[9,5,7,4,5,9,5,2],[2,9,8,5,3,1,6,1,3]],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-846884-NWO.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[14,[[0,5],[4,10],[2,12],[6,10],[4,13],[0,12],[0,8],[5,13],[5,9],[12,13],[5,10],[9,12],[1,4],[6,13],[8,10],[1,11],[0,6],[2,6],[2,8],[8,9],[1,13],[7,8],[3,7],[1,9],[2,3],[3,13]]],\"reward\":{\"name\":\"NWO\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"12.5.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1034601844,\"moneyMax\":25865046100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":997,\"serverGrowth\":73}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"0.8.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":892171634,\"moneyMax\":22304290850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":900,\"serverGrowth\":73}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-309775.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,1],[0,0,1,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,0],[1,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0],[0,0,1,0,0,0,1,1,0],[0,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-687169-CyberSec.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":357359463,\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"76.7.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":635733819,\"moneyMax\":15893345475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":934,\"serverGrowth\":66}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"34.9.4.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",73],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10179,\"ramUsage\":1.75,\"server\":\"helios\",\"threads\":73,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///97951a46-d84f-4df5-a5e3-1007d9c3267b\",\"moduleSequenceNumber\":12061}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"helios\",\"moduleSequenceNumber\":281,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///364074f0-415c-4f5d-b1a0-a9dfac62c506\",\"moduleSequenceNumber\":12020}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":12020,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///97951a46-d84f-4df5-a5e3-1007d9c3267b\",\"moduleSequenceNumber\":12061}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":12061,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":284,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"helios\",\"moduleSequenceNumber\":285,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"titan-labs\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":653021461,\"moneyMax\":16325536525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":824,\"serverGrowth\":78}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"30.4.5.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",36],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10189,\"ramUsage\":1.75,\"server\":\"vitalife\",\"threads\":36,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///e6d6ada4-a301-470b-9155-b271f88afa4c\",\"moduleSequenceNumber\":12030}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":286,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///5135b246-bff8-43de-a220-81ac4fe054e9\",\"moduleSequenceNumber\":17378}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":17378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///e6d6ada4-a301-470b-9155-b271f88afa4c\",\"moduleSequenceNumber\":12030}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":12030,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///c5b0ccf6-1d89-494c-b469-1d2830b1bc17\",\"moduleSequenceNumber\":19274}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":289,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"vitalife\",\"moduleSequenceNumber\":290,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":756216583,\"moneyMax\":18905414575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":868,\"serverGrowth\":69}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"68.0.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":996812911,\"moneyMax\":24920322775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":860,\"serverGrowth\":89}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"8.7.8.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",73],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10178,\"ramUsage\":1.75,\"server\":\"univ-energy\",\"threads\":73,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///25a5555c-0cc7-48d3-acdc-5a42f5c02765\",\"moduleSequenceNumber\":12019}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":291,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///ab5c10ca-c495-4be4-8567-4093023b3a6d\",\"moduleSequenceNumber\":12021}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":12021,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///25a5555c-0cc7-48d3-acdc-5a42f5c02765\",\"moduleSequenceNumber\":12019}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":12019,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":294,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"univ-energy\",\"moduleSequenceNumber\":295,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1167040209,\"moneyMax\":29176005225,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":870,\"serverGrowth\":85}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-475407-TheBlackHand.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[9],[9,1],[5,1,1],[6,3,2,1],[1,7,7,4,4],[5,2,4,5,6,7]],\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"54.2.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",18],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10204,\"ramUsage\":1.75,\"server\":\"titan-labs\",\"threads\":18,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///fb06b853-d9ff-42c9-9fcb-6f7e499f02c4\",\"moduleSequenceNumber\":12046}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":296,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///5d69f041-a6a7-460d-a8e6-8329ee4ee4b8\",\"moduleSequenceNumber\":13046}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":13046,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///fb06b853-d9ff-42c9-9fcb-6f7e499f02c4\",\"moduleSequenceNumber\":12046}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":12046,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"titan-labs\",\"moduleSequenceNumber\":300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":870655501,\"moneyMax\":21766387525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":841,\"serverGrowth\":61}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-566404-Chongqing.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[5,5],\"reward\":{\"name\":\"Chongqing\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"44.9.9.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",36],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10188,\"ramUsage\":1.75,\"server\":\"microdyne\",\"threads\":36,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d737975a-c4db-4c46-8ae8-a2c1b198fd68\",\"moduleSequenceNumber\":12029}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":301,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///dcffc404-09d1-48be-935f-1c7939a3a933\",\"moduleSequenceNumber\":17377}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":17377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d737975a-c4db-4c46-8ae8-a2c1b198fd68\",\"moduleSequenceNumber\":12029}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":12029,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///899fcbc1-fb25-4f14-94b6-29e5e313bc29\",\"moduleSequenceNumber\":19273}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"microdyne\",\"moduleSequenceNumber\":305,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":635641122,\"moneyMax\":15891028050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":824,\"serverGrowth\":70}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"93.8.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":849092589,\"moneyMax\":21227314725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":906,\"serverGrowth\":73}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"25.8.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":846357160,\"moneyMax\":21158929000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":860,\"serverGrowth\":81}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-813128.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":2154729469584,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"82.6.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1199886466,\"moneyMax\":29997161650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":877,\"serverGrowth\":59}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"81.3.1.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",36],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10187,\"ramUsage\":1.75,\"server\":\"omnia\",\"threads\":36,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///42bd5469-1895-4889-9a69-cb9614b8cacb\",\"moduleSequenceNumber\":12028}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"omnia\",\"moduleSequenceNumber\":306,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///95a5b8cd-9cef-477d-bfaf-dda1db3153a6\",\"moduleSequenceNumber\":17376}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":17376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///42bd5469-1895-4889-9a69-cb9614b8cacb\",\"moduleSequenceNumber\":12028}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":12028,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///29a1eeee-ef3d-4155-b9f4-7abda93deb60\",\"moduleSequenceNumber\":19272}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"omnia\",\"moduleSequenceNumber\":310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":972883200,\"moneyMax\":24322080000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":931,\"serverGrowth\":65}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"59.9.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":1038629475,\"moneyMax\":25965736875,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":799,\"serverGrowth\":72}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"6.9.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":755716645,\"moneyMax\":18892916125,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":808,\"serverGrowth\":75}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-724098.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":5,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"84.8.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",9],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10215,\"ramUsage\":1.75,\"server\":\"solaris\",\"threads\":9,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///ef5f1191-6952-415f-9200-b2c184a55c5f\",\"moduleSequenceNumber\":12057}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"solaris\",\"moduleSequenceNumber\":311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///c946acf3-5286-46d0-a6f1-c52e372e9897\",\"moduleSequenceNumber\":13044}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":13044,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///ef5f1191-6952-415f-9200-b2c184a55c5f\",\"moduleSequenceNumber\":12057}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":12057,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"solaris\",\"moduleSequenceNumber\":315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":844457962,\"moneyMax\":21111449050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":820,\"serverGrowth\":70}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-600113-NewTokyo.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[106,24,5,167,41,85,53,111,119,112,53,36,135,197,1,176,66,19,44],\"reward\":{\"name\":\"New Tokyo\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-115704.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"1100000000001100101011010100000101000111110101101111011110011100\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"8.8.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"icarus\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1338640379,\"moneyMax\":33466009475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":803,\"serverGrowth\":61}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-98551.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[6,7],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"16.1.9.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",36],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10186,\"ramUsage\":1.75,\"server\":\"global-pharm\",\"threads\":36,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///72be6a64-1319-4abb-bf27-12b35b903153\",\"moduleSequenceNumber\":12027}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":316,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///512cd9e0-d668-401d-8256-0949dbf9d2e1\",\"moduleSequenceNumber\":17375}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":17375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///72be6a64-1319-4abb-bf27-12b35b903153\",\"moduleSequenceNumber\":12027}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":12027,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///582c538b-be40-47fa-a816-593e9d6eae19\",\"moduleSequenceNumber\":19271}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":319,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"global-pharm\",\"moduleSequenceNumber\":320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1708996478,\"moneyMax\":42724911950,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":800,\"serverGrowth\":88}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-153489.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[8,-9,0,4,8,-7,10,10],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"54.7.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":1121370221,\"moneyMax\":28034255525,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":838,\"serverGrowth\":74}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-736290.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[8,8],[9,7,1]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"11.7.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1443908568,\"moneyMax\":36097714200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":838,\"serverGrowth\":79}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-334459-NWO.cct\",\"type\":\"Array Jumping Game\",\"data\":[2,10,0,9,8,6,3,7,8,10,0,1,0,4],\"reward\":{\"name\":\"NWO\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"59.7.6.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",9],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10214,\"ramUsage\":1.75,\"server\":\"unitalife\",\"threads\":9,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///469b244e-ca50-4a9f-9cd6-ff9de539ca66\",\"moduleSequenceNumber\":12056}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":321,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///97180163-5766-4591-9fe9-59fdf4c09a2e\",\"moduleSequenceNumber\":13043}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":13043,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///469b244e-ca50-4a9f-9cd6-ff9de539ca66\",\"moduleSequenceNumber\":12056}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":12056,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":324,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"unitalife\",\"moduleSequenceNumber\":325,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":1093959210,\"moneyMax\":27348980250,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":807,\"serverGrowth\":73}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-326071.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[13,11],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"84.1.0.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",36],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10185,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"threads\":36,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///9a731765-6fe2-432f-bc07-0f68f3c980c9\",\"moduleSequenceNumber\":12026}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":326,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///a691eed4-552f-4bf1-bdab-743212deb125\",\"moduleSequenceNumber\":17380}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":17380,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///9a731765-6fe2-432f-bc07-0f68f3c980c9\",\"moduleSequenceNumber\":12026}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":12026,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///3ffebf2a-a3ed-4ebe-8f06-d6e8738e5eb2\",\"moduleSequenceNumber\":19270}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":329,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":330,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":756018462,\"moneyMax\":18900461550,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":694,\"serverGrowth\":56}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"41.6.7.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",36],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10184,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"threads\":36,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///0548be05-62ad-4a6a-ac49-894946df8a2b\",\"moduleSequenceNumber\":12025}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":331,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///34c8e7fe-9897-4c58-9b0d-7095c79e57c5\",\"moduleSequenceNumber\":19063}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":19063,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///0548be05-62ad-4a6a-ac49-894946df8a2b\",\"moduleSequenceNumber\":12025}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":12025,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///66a78327-b7c2-469e-af88-7898136d7086\",\"moduleSequenceNumber\":19269}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"rho-construction\",\"moduleSequenceNumber\":335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":525474840,\"moneyMax\":13136871000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":517,\"serverGrowth\":54}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"36.0.3.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",9],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10213,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"threads\":9,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///dd1b1a85-4631-4976-a535-fd2e7ae81de3\",\"moduleSequenceNumber\":12055}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":336,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///918a07a1-09d1-4360-a5a8-6be9500237f9\",\"moduleSequenceNumber\":13042}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":13042,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///dd1b1a85-4631-4976-a535-fd2e7ae81de3\",\"moduleSequenceNumber\":12055}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":12055,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":339,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":340,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"I.I.I.I\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":663921108,\"moneyMax\":16598027700,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":513,\"serverGrowth\":50}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-38596.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[151,143,43,94],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"7.9.3.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",9],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10212,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":9,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///0be8bde1-db07-44df-977c-5bac4035c0a7\",\"moduleSequenceNumber\":12054}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":341,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///bff7774d-3681-4632-ac5b-02dbc70a9128\",\"moduleSequenceNumber\":13041}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":13041,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///0be8bde1-db07-44df-977c-5bac4035c0a7\",\"moduleSequenceNumber\":12054}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":12054,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":344,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"aevum-police\",\"moduleSequenceNumber\":345,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":398653061,\"moneyMax\":9966326525,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":432,\"serverGrowth\":33}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"3.4.8.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",36],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10182,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":36,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///f7d16acf-2b1b-4ba6-a49f-9d6ff1866601\",\"moduleSequenceNumber\":12032}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///c05cfcae-2c04-4f97-a7d5-8f3bdb60afff\",\"moduleSequenceNumber\":12023}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":12023,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///f7d16acf-2b1b-4ba6-a49f-9d6ff1866601\",\"moduleSequenceNumber\":12032}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":12032,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"netlink\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":15,\"minDifficulty\":15,\"moneyAvailable\":2184102142,\"moneyMax\":6224819750,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":428,\"serverGrowth\":35}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"96.3.0.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",18],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10202,\"ramUsage\":1.75,\"server\":\"zb-institute\",\"threads\":18,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///16fcb733-c4d1-47d7-ae8c-babf72c0a662\",\"moduleSequenceNumber\":12044}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":351,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///45677db4-9496-4a43-a790-ee8761f8ac37\",\"moduleSequenceNumber\":16413}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":16413,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///16fcb733-c4d1-47d7-ae8c-babf72c0a662\",\"moduleSequenceNumber\":12044}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":12044,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":354,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zb-institute\",\"moduleSequenceNumber\":355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1008999790,\"moneyMax\":25224994750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":737,\"serverGrowth\":79}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"62.6.7.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",18],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10200,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":18,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///b02f3aa8-aee2-4c8e-b47f-eba08ea71c3b\",\"moduleSequenceNumber\":12042}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///53a6b839-a90c-4b85-895a-235074164783\",\"moduleSequenceNumber\":12071}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":12071,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///b02f3aa8-aee2-4c8e-b47f-eba08ea71c3b\",\"moduleSequenceNumber\":12042}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":12042,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"summit-uni\",\"moduleSequenceNumber\":360,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":279634845,\"moneyMax\":6990871125,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":449,\"serverGrowth\":58}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-942810-AlphaEnterprises.cct\",\"type\":\"Array Jumping Game II\",\"data\":[4,2,1,3,5,4,4],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"52.3.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":434363571,\"moneyMax\":10859089275,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":591,\"serverGrowth\":60}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"53.1.7.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",73],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10177,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":73,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///2fc0d1bd-eec2-46e7-9144-82f0ad372fd7\",\"moduleSequenceNumber\":12018}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":361,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///d4408d26-cde6-48c3-a369-5f9295d3dc53\",\"moduleSequenceNumber\":19061}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":19061,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///2fc0d1bd-eec2-46e7-9144-82f0ad372fd7\",\"moduleSequenceNumber\":12018}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":12018,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":364,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"catalyst\",\"moduleSequenceNumber\":365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":20,\"minDifficulty\":20,\"moneyAvailable\":103403200,\"moneyMax\":10155407175,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":406,\"serverGrowth\":25}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-117969.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[7,14],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-627433-CyberSec.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"MMMMHHwwaaJsssssssssssVVVVVVVVff444hhtttttttttLL556vvKeeJzzzzzzzHyy22YYYYYYYYYYYY55i2TK\",\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-684234-AlphaEnterprises.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0],[0,0,0,0,0,0],[1,0,0,0,1,0],[0,0,0,0,0,1],[0,0,0,0,0,0],[0,0,0,1,0,0],[1,1,0,0,1,0]],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"98.6.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",18],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10198,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":18,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///759fb4a9-54ae-4464-b2c5-d27722ff7bda\",\"moduleSequenceNumber\":12040}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":366,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///6e9ed4e2-25fd-4c10-92ce-4e12bd8f4693\",\"moduleSequenceNumber\":12069}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":12069,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///759fb4a9-54ae-4464-b2c5-d27722ff7bda\",\"moduleSequenceNumber\":12040}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":12040,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":369,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"the-hub\",\"moduleSequenceNumber\":370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"phantasy\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37,\"hackDifficulty\":13.246,\"minDifficulty\":12,\"moneyAvailable\":38308340.68897295,\"moneyMax\":4668499000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":296,\"serverGrowth\":50}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-138010-NWO.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,7,9,4],\"reward\":{\"name\":\"NWO\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"85.6.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":25.692,\"minDifficulty\":20,\"moneyAvailable\":5951853200,\"moneyMax\":5951853200,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":347,\"serverGrowth\":61}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"85.3.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",18],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10199,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":18,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///11b556ed-22d3-4644-8638-4c7acab26503\",\"moduleSequenceNumber\":12041}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"netlink\",\"moduleSequenceNumber\":371,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///ef037d68-e297-4e0d-8760-406d81823f4c\",\"moduleSequenceNumber\":12070}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":12070,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///11b556ed-22d3-4644-8638-4c7acab26503\",\"moduleSequenceNumber\":12041}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":12041,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":374,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"netlink\",\"moduleSequenceNumber\":375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":30.968,\"minDifficulty\":25,\"moneyAvailable\":403690673.6492281,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":402,\"serverGrowth\":45}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"1.1.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\",\"syscore\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":19.156,\"minDifficulty\":18,\"moneyAvailable\":1815575825,\"moneyMax\":1815575825,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":278,\"serverGrowth\":55}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"38.1.8.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",2],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10218,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///782cbfdf-785b-4325-a36a-4a5e9356b648\",\"moduleSequenceNumber\":12060}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///ba60f57d-b654-4df4-a289-4947f278e6b0\",\"moduleSequenceNumber\":13048}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":13048,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///782cbfdf-785b-4325-a36a-4a5e9356b648\",\"moduleSequenceNumber\":12060}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":12060,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"n00dles\",\"moduleSequenceNumber\":380,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":3.0440000000000005,\"minDifficulty\":1,\"moneyAvailable\":1562240,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"99.9.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",9],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10206,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":9,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///54a2f3f9-6d34-404c-a4d8-7d490c7726cb\",\"moduleSequenceNumber\":12048}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":381,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///a2571ae3-db0b-4417-995e-10f422f5a3b8\",\"moduleSequenceNumber\":13035}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":13035,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///54a2f3f9-6d34-404c-a4d8-7d490c7726cb\",\"moduleSequenceNumber\":12048}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":12048,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":5309909.946432307,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-810471.cct\",\"type\":\"Array Jumping Game II\",\"data\":[2,0,3],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"90.5.2.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",9],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10207,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":9,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///63618d14-b76b-4b92-8d6f-f485e31dcdb9\",\"moduleSequenceNumber\":12049}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":386,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///29543fab-bd00-49d5-a2c9-c0264db0748a\",\"moduleSequenceNumber\":13036}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":13036,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///63618d14-b76b-4b92-8d6f-f485e31dcdb9\",\"moduleSequenceNumber\":12049}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":12049,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.372,\"minDifficulty\":3,\"moneyAvailable\":647054,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"60.4.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",9],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10208,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":9,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///98820608-fe89-41e7-9117-426292838c2b\",\"moduleSequenceNumber\":12050}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///d44b7152-76b7-4f6e-a0de-547297c6c1f6\",\"moduleSequenceNumber\":13037}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":13037,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///98820608-fe89-41e7-9117-426292838c2b\",\"moduleSequenceNumber\":12050}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":12050,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":394,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"joesguns\",\"moduleSequenceNumber\":395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":18.116000000000003,\"minDifficulty\":5,\"moneyAvailable\":14387495.342244115,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"16.2.4.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",18],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10192,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":18,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///1ee48fef-ed30-40ee-9327-4647efb641b8\",\"moduleSequenceNumber\":12034}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"zer0\",\"moduleSequenceNumber\":396,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///aa1e5652-3ff2-4aaa-8f39-853d2582f8e4\",\"moduleSequenceNumber\":12063}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":12063,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///1ee48fef-ed30-40ee-9327-4647efb641b8\",\"moduleSequenceNumber\":12034}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":12034,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":399,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zer0\",\"moduleSequenceNumber\":400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8.226,\"minDifficulty\":8,\"moneyAvailable\":97905690,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-158112-Ishima.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[6,-4,-5,1,-2,-2,0,3,2,-5,-3,-7,-7,2,7,-3],\"reward\":{\"name\":\"Ishima\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"66.5.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",9],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10211,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":9,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///0d22ebd4-d89c-4c8b-8ad3-ee832f930d80\",\"moduleSequenceNumber\":12053}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":401,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///481f4cd3-f955-404a-9474-01d131eaeaf5\",\"moduleSequenceNumber\":13040}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":13040,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///0d22ebd4-d89c-4c8b-8ad3-ee832f930d80\",\"moduleSequenceNumber\":12053}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":12053,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":404,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":405,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":16.252000000000002,\"minDifficulty\":7,\"moneyAvailable\":68750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"56.5.7.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",18],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10196,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///1a45e101-68ae-4b4e-93f5-88f2a0ab4757\",\"moduleSequenceNumber\":12038}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":406,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///e04f9159-534b-4ae0-ac69-9f553e5b202b\",\"moduleSequenceNumber\":12067}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":12067,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///1a45e101-68ae-4b4e-93f5-88f2a0ab4757\",\"moduleSequenceNumber\":12038}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":12038,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":409,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"neo-net\",\"moduleSequenceNumber\":410,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"max-hardware\",\"computek\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":12.026000000000002,\"minDifficulty\":8,\"moneyAvailable\":1750123,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"64.7.0.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",36],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10181,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":36,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///c23e72a7-b8cc-4324-ac91-4ec8373ca936\",\"moduleSequenceNumber\":12062}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":411,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///1d6d58d6-256c-44dd-8dcf-9d11f16adcd2\",\"moduleSequenceNumber\":12022}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":12022,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///c23e72a7-b8cc-4324-ac91-4ec8373ca936\",\"moduleSequenceNumber\":12062}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":12062,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":414,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":415,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":20.23,\"minDifficulty\":10,\"moneyAvailable\":1125000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-273213-AlphaEnterprises.cct\",\"type\":\"Array Jumping Game\",\"data\":[10,6,5,0,0],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-45055.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[13,18],[4,9],[7,12],[5,13]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"9.9.6.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",9],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10209,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":9,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///c6bee7ae-9c69-46f1-a59c-1d994836103b\",\"moduleSequenceNumber\":12051}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///292440eb-a51e-4c5c-b8a9-750da0c186fa\",\"moduleSequenceNumber\":13038}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":13038,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///c6bee7ae-9c69-46f1-a59c-1d994836103b\",\"moduleSequenceNumber\":12051}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":12051,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":419,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":420,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":7.152000000000001,\"minDifficulty\":5,\"moneyAvailable\":15569733.580742275,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-930634-AlphaEnterprises.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"CACHEMACROQUEUELINUXPOPUP\",\"FIREWALL\"],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"17.1.6.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",9],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10210,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":9,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///b855e74b-ad9e-4d37-b73c-5d45a72a69ac\",\"moduleSequenceNumber\":12052}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":421,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///d3446464-8fa8-4051-8eb0-0d2ac083aef8\",\"moduleSequenceNumber\":13039}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":13039,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///b855e74b-ad9e-4d37-b73c-5d45a72a69ac\",\"moduleSequenceNumber\":12052}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":12052,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":424,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":425,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":12.374,\"minDifficulty\":5,\"moneyAvailable\":100000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"11.2.4.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",18],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10195,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":18,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///56b00456-a15e-4be1-81df-c147ef46a2b4\",\"moduleSequenceNumber\":12037}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///a6b8fcff-ee9b-46df-a027-7a19ab1090ef\",\"moduleSequenceNumber\":12066}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":12066,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///56b00456-a15e-4be1-81df-c147ef46a2b4\",\"moduleSequenceNumber\":12037}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":12037,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":429,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"phantasy\",\"moduleSequenceNumber\":430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7.722,\"minDifficulty\":7,\"moneyAvailable\":421314150.00132334,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"47.9.6.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",18],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10193,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":18,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///1ba3b8f1-881d-4b2c-a8a8-0b74b27ba7bb\",\"moduleSequenceNumber\":12035}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":431,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///cd359975-9d5b-4de9-918f-a7ab65136bc5\",\"moduleSequenceNumber\":12064}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":12064,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///1ba3b8f1-881d-4b2c-a8a8-0b74b27ba7bb\",\"moduleSequenceNumber\":12035}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":12035,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":435,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"iron-gym\",\"neo-net\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":12.78,\"minDifficulty\":5,\"moneyAvailable\":62595807.40935302,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-976670-NWO.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[4,-7,0,2,9,7,0,10,3,3,3,7,2,-8],\"reward\":{\"name\":\"NWO\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"76.6.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",18],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10194,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///b3d38b2c-c0b0-4c98-ab91-b6b8ad07ebbb\",\"moduleSequenceNumber\":12036}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":436,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///7976b9d7-7082-4799-84b6-851097ae4c44\",\"moduleSequenceNumber\":12065}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":12065,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///b3d38b2c-c0b0-4c98-ab91-b6b8ad07ebbb\",\"moduleSequenceNumber\":12036}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":12036,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":439,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"omega-net\",\"moduleSequenceNumber\":440,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zer0\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":26,\"hackDifficulty\":17.392,\"minDifficulty\":9,\"moneyAvailable\":1593112050,\"moneyMax\":1593112050,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":183,\"serverGrowth\":34}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"50.3.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":35,\"hackDifficulty\":13.048,\"minDifficulty\":12,\"moneyAvailable\":11832189,\"moneyMax\":1167036825,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":269,\"serverGrowth\":29}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"94.9.8.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",18],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10191,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":18,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///42722808-636f-4120-8462-4b47fe6b5af8\",\"moduleSequenceNumber\":12033}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":441,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///e9de2b4d-d302-4d47-95b5-48ac3982a24d\",\"moduleSequenceNumber\":19064}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":19064,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///42722808-636f-4120-8462-4b47fe6b5af8\",\"moduleSequenceNumber\":12033}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":12033,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":444,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":445,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":30.066,\"minDifficulty\":10,\"moneyAvailable\":500000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-814702.cct\",\"type\":\"Total Ways to Sum\",\"data\":100,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"75.3.5.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",36],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10183,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":36,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///c686dd42-e78c-4e66-8592-0ad9e1b114cc\",\"moduleSequenceNumber\":12024}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///ea81a76a-5c66-46a0-9db3-7190e9bc5fe8\",\"moduleSequenceNumber\":19062}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":19062,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///c686dd42-e78c-4e66-8592-0ad9e1b114cc\",\"moduleSequenceNumber\":12024}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":12024,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///16bf0137-1907-4567-b799-c23c2b89c9b1\",\"moduleSequenceNumber\":19268}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":449,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":450,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":512,\"serverGrowth\":39}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"12.7.9.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",36],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10190,\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"threads\":36,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///0fa99d14-b00b-46ab-9e87-e11951753ecd\",\"moduleSequenceNumber\":12031}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":451,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///b7294a9b-5390-4df3-8e9e-ca1d309669b5\",\"moduleSequenceNumber\":17379}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":17379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///0fa99d14-b00b-46ab-9e87-e11951753ecd\",\"moduleSequenceNumber\":12031}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":12031,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":454,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":455,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1065,\"serverGrowth\":50}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"46.3.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":795,\"serverGrowth\":47}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"60.7.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",18],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10203,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"threads\":18,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///75c248b6-f68d-4b5a-bd0c-3f6f7f922712\",\"moduleSequenceNumber\":12045}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":456,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///d0e9fcab-c6c9-42ad-9356-290be84981a2\",\"moduleSequenceNumber\":16414}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":16414,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///75c248b6-f68d-4b5a-bd0c-3f6f7f922712\",\"moduleSequenceNumber\":12045}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":12045,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":513,\"serverGrowth\":1}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"58.3.1.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",18],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10201,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":18,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///0a1a7822-9b5e-45b5-aece-40b2fddb9315\",\"moduleSequenceNumber\":12043}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":461,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///4340afd7-79da-41dc-875c-c975646ce1d2\",\"moduleSequenceNumber\":16412}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":16412,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///0a1a7822-9b5e-45b5-aece-40b2fddb9315\",\"moduleSequenceNumber\":12043}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":12043,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":464,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":465,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"the-hub\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":351,\"serverGrowth\":1}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-826579.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":243371747,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-664995-AlphaEnterprises.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"9362RlVRpA093Xbzj6clO09yBlIKPBVR589rKPrx8WjS8204347yS2594wO1c284bDjo861I599x3OKv0zRM\",\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"49.5.1.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",18],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10197,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":18,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///597abd96-d055-4046-a062-db3ae25b9c63\",\"moduleSequenceNumber\":12039}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///eec44b23-3433-4ed3-ac9b-0ed638d0e7ea\",\"moduleSequenceNumber\":12068}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":12068,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///597abd96-d055-4046-a062-db3ae25b9c63\",\"moduleSequenceNumber\":12039}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":12039,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omega-net\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":214,\"serverGrowth\":1}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"83.2.9.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",9],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10216,\"ramUsage\":1.75,\"server\":\".\",\"threads\":9,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///cc54903b-269d-4894-a9bc-52b508affab2\",\"moduleSequenceNumber\":12058}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\".\",\"moduleSequenceNumber\":471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///45adcf87-1056-43fb-ae84-6de568e65e4b\",\"moduleSequenceNumber\":13045}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":13045,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///cc54903b-269d-4894-a9bc-52b508affab2\",\"moduleSequenceNumber\":12058}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":12058,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\".\",\"moduleSequenceNumber\":475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":539,\"serverGrowth\":1}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-406374.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[7,2],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"49.2.2.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",4],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":273.4099999999931,\"pid\":10217,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":4,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///4d6d7127-c44d-4ebb-b440-82d0acb82225\",\"moduleSequenceNumber\":12059}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///4ce05ae9-da61-432a-a589-27147286678b\",\"moduleSequenceNumber\":13047}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":13047,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///4d6d7127-c44d-4ebb-b440-82d0acb82225\",\"moduleSequenceNumber\":12059}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":12059,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":479,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"CSEC\",\"moduleSequenceNumber\":480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":57,\"serverGrowth\":1}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"86.1.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":1}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"84.7.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":1}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"65.1.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":421368.7786116868,\"favor\":0.02,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.02,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"NWO\",\"playerReputation\":48672.72512812031}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":9938.565521757342}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":172.8342,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":343968.87565777707}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":123.4253,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":111.0902,\"isBanned\":false,\"isMember\":true,\"name\":\"Chongqing\",\"playerReputation\":218355.17752984838}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":22.601,\"isBanned\":false,\"isMember\":true,\"name\":\"Ishima\",\"playerReputation\":42704.26796768343}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":22.6137,\"isBanned\":false,\"isMember\":true,\"name\":\"New Tokyo\",\"playerReputation\":41714.17489242394}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":77.174,\"isBanned\":true,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":16.8807,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Tetrads\",\"playerReputation\":16578.164946092056}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":23839.31736472594}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":162.8329,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":272050.4072354689}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":111.7421,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":219172.30599951776}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":240,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":2,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":true,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":false,\"MonacoTheme\":\"one-dark\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#98C379\",\"primary\":\"#98C379\",\"primarydark\":\"#98C379\",\"successlight\":\"#98C379\",\"success\":\"#98C379\",\"successdark\":\"#98C379\",\"errorlight\":\"#E06C75\",\"error\":\"#BE5046\",\"errordark\":\"#BE5046\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E5C07B\",\"warning\":\"#E5C07B\",\"warningdark\":\"#D19A66\",\"infolight\":\"#61AFEF\",\"info\":\"#61AFEF\",\"infodark\":\"#61AFEF\",\"welllight\":\"#4B5263\",\"well\":\"#282C34\",\"white\":\"#ABB2BF\",\"black\":\"#282C34\",\"hp\":\"#E06C75\",\"money\":\"#E5C07B\",\"hack\":\"#98C379\",\"combat\":\"#ABB2BF\",\"cha\":\"#C678DD\",\"int\":\"#61AFEF\",\"rep\":\"#ABB2BF\",\"disabled\":\"#56B6C2\",\"backgroundprimary\":\"#282C34\",\"backgroundsecondary\":\"#21252B\",\"button\":\"#4B5263\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-29,\"y\":1,\"opened\":true},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}}}","VersionSave":"25","AllGangsSave":"","LastExportBonus":"1661883910900","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}