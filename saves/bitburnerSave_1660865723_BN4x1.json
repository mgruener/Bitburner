{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":106,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":8712.41199999968,\"strength\":4.549519999999972,\"defense\":4.549519999999972,\"dexterity\":4.549519999999972,\"agility\":4.549519999999972,\"charisma\":9.099039999999944,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.16,\"hacking_speed\":1.16,\"hacking_money\":1.16,\"hacking_grow\":1.16,\"hacking\":1.16,\"hacking_exp\":1.16,\"strength\":1.16,\"strength_exp\":1.16,\"defense\":1.16,\"defense_exp\":1.16,\"dexterity\":1.16,\"dexterity_exp\":1.16,\"agility\":1.16,\"agility_exp\":1.16,\"charisma\":1.16,\"charisma_exp\":1.16,\"hacknet_node_money\":1.16,\"hacknet_node_purchase_cost\":0.84,\"hacknet_node_ram_cost\":0.84,\"hacknet_node_core_cost\":0.84,\"hacknet_node_level_cost\":0.84,\"company_rep\":1.16,\"faction_rep\":1.16,\"work_money\":1.16,\"crime_success\":1.16,\"crime_money\":1.16,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"money\":1490.5912524627238,\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{},\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":37,\"moneyGainRatePerSecond\":3.219,\"onlineTimeSeconds\":735.2000000000302,\"ram\":1,\"totalMoneyGenerated\":1003.8929999999649,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":33,\"moneyGainRatePerSecond\":2.871,\"onlineTimeSeconds\":735.2000000000302,\"ram\":1,\"totalMoneyGenerated\":947.099399999962,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":33,\"moneyGainRatePerSecond\":2.871,\"onlineTimeSeconds\":735.2000000000302,\"ram\":1,\"totalMoneyGenerated\":909.4457999999652,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":33,\"moneyGainRatePerSecond\":2.871,\"onlineTimeSeconds\":735.2000000000302,\"ram\":1,\"totalMoneyGenerated\":660.4344000000071,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":33,\"moneyGainRatePerSecond\":2.871,\"onlineTimeSeconds\":735.2000000000302,\"ram\":1,\"totalMoneyGenerated\":641.0681999999993,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":33,\"moneyGainRatePerSecond\":2.871,\"onlineTimeSeconds\":735.2000000000302,\"ram\":1,\"totalMoneyGenerated\":628.9403999999942,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":33,\"moneyGainRatePerSecond\":2.871,\"onlineTimeSeconds\":735.2000000000302,\"ram\":1,\"totalMoneyGenerated\":668.1599999999892,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":33,\"moneyGainRatePerSecond\":2.871,\"onlineTimeSeconds\":514.9999999999801,\"ram\":1,\"totalMoneyGenerated\":633.4121999999967,\"name\":\"hacknet-node-7\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Netburners\",\"CyberSec\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[],\"sourceFiles\":[{\"lvl\":1,\"n\":1}],\"numPeopleKilled\":0,\"karma\":0,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"sleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":4,\"entropy\":0,\"lastUpdate\":1660865722833,\"lastSave\":1660865718784,\"totalPlaytime\":1041401800,\"playtimeSinceLastAug\":1935000,\"playtimeSinceLastBitnode\":1935000,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":353590,\"hacknet\":6092.453400000916,\"hacknet_expenses\":-360214.75654751406,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":468.59125246271924,\"work\":1000.8944000000055,\"servers\":0,\"other\":0,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":353590,\"hacknet\":6092.453400000916,\"hacknet_expenses\":-360214.75654751406,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":468.59125246271924,\"work\":1000.8944000000055,\"servers\":0,\"other\":0,\"augmentations\":0}},\"scriptProdSinceLastAug\":353590,\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1659824867829},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1659825047835},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1659979761452},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1660064291656},{\"ID\":\"FROZE\",\"unlockedOn\":1660070224596},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1660073344593},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1660074763681},{\"ID\":\"TOR\",\"unlockedOn\":1660156303324},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1660156543333},{\"ID\":\"NITESEC\",\"unlockedOn\":1660254508514},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1660254628533},{\"ID\":\"TRAVEL\",\"unlockedOn\":1660255468524},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1660485627110},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1660485627120},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1660485627122},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1660512825233},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1660566971219},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1660650992951},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1660678330325},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1660724917416},{\"ID\":\"4S\",\"unlockedOn\":1660751408262},{\"ID\":\"DONATION\",\"unlockedOn\":1660820248649},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1660847929353},{\"ID\":\"SF1.1\",\"unlockedOn\":1660863818847},{\"ID\":\"WORKOUT\",\"unlockedOn\":1660864298842}],\"terminalCommandHistory\":[\"ls\",\"scan-analyze 10\",\"backdoor\",\"home\",\"scan-analyze 3\",\"backdoor\",\"home\",\"scan-analyze 10\",\"backdoor\",\"home\",\"scan-analyze 10\",\"backdoor\",\"home\",\"ls\",\"scan-analyze 10\",\"ls\",\"scan-analyze 10\",\"analyze\",\"backdoor\",\"free\",\"ls\",\"scan-analyze 5\",\"scan-analyze 3\",\"ls\",\"./scripts/backdoor-worm.js\",\"ls\",\"./scripts/compare-servers.js\",\"./scripts/multi-target-scheduler.js\",\"./scripts/add-all-targets.js\",\"ls\",\"./scripts/server-upgrade-costs.js\",\"ls\",\"scan-analyze 3\",\"ls\",\"./scripts/compare-servers.js score\",\"./scripts/remove-targets.js foodnstuff\",\"./scripts/add-targets.js joesguns\",\"./fl1ght.exe\",\"free\",\"nano scripts/setup-upgrade-infra.js\",\"./scripts/setup-upgrade-infra.js\",\"scan\",\"scan-analyze 3\",\"./scripts/backdoor-worm.js\",\"scan\",\"scan-analyze 3\",\"connect hong-fang-tea\",\"connect CSEC\",\"backdoor\",\"home\"],\"focus\":false,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":1549,\"factionWorkType\":\"HACKING\",\"factionName\":\"CyberSec\"}},\"identifier\":\"15ded30ed8298a\",\"hacking\":904,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":2,\"agility\":1,\"charisma\":2,\"intelligence\":0,\"hacking_chance_mult\":1.7525293309892913,\"hacking_speed_mult\":1.7095849813898478,\"hacking_money_mult\":2.2850439122876245,\"hacking_grow_mult\":1.4450870591542289,\"hacking_exp\":30355498.266678177,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":2.5748197832152275,\"strength_mult\":1.9942201416328356,\"defense_mult\":1.7341044709850746,\"dexterity_mult\":2.3033242635859255,\"agility_mult\":1.5173414121119404,\"charisma_mult\":2.055728827218677,\"hacking_exp_mult\":4.759051815945787,\"strength_exp_mult\":1.8280351298300996,\"defense_exp_mult\":1.8280351298300996,\"dexterity_exp_mult\":1.8280351298300996,\"agility_exp_mult\":1.8280351298300996,\"charisma_exp_mult\":1.9700734594178986,\"company_rep_mult\":2.600496966431626,\"faction_rep_mult\":1.9700734594178984,\"companyName\":\"\",\"crime_money_mult\":1.5573703236505125,\"crime_success_mult\":1.5573703236505125,\"isWorking\":true,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"BitRunners\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.713857772391868,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":2.037031887791903,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":4376.662002534296,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":12187.90429444565,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":400,\"graftAugmentationName\":\"\",\"timeWorkedGraftAugmentation\":0,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":1226200,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":2.8247116745287713,\"hacknet_node_money_mult\":3.6446450400987604,\"hacknet_node_purchase_cost_mult\":0.5293798703364855,\"hacknet_node_ram_cost_mult\":0.6919998305052099,\"hacknet_node_core_cost_mult\":0.6919998305052099,\"hacknet_node_level_cost_mult\":0.5881998559294284,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"19.7.1.8\",\"isConnectedTo\":true,\"maxRam\":32,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"fl1ght.exe\",\"BruteSSH.exe\"],\"ramUsed\":26.200000000000003,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/scripts/multi-target-scheduler.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6007.872000000008,\"onlineMoneyMade\":353590,\"onlineRunningTime\":1852.2100000002843,\"pid\":3,\"ramUsage\":8.65,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///85ad3cce-fe10-44d4-9601-58d6669dc6dc\",\"moduleSequenceNumber\":7333},{\"filename\":\"/scripts/multi-target-scheduler.js\",\"url\":\"blob:file:///3753106c-d310-4d43-853a-85b463d0db98\",\"moduleSequenceNumber\":7592}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/scripts/setup-upgrade-infra.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":735.4100000000303,\"pid\":160,\"ramUsage\":17.55,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///367acb19-3daf-459f-ada6-0fca4af6c504\",\"moduleSequenceNumber\":82183},{\"filename\":\"/scripts/setup-upgrade-infra.js\",\"url\":\"blob:file:///a54bcb1a-ae6a-4be8-bf77-7db1f5ea9004\",\"moduleSequenceNumber\":85752}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    filter_adminRights,\\r\\n    filter_canNuke,\\r\\n    filter_minRam,\\r\\n    filter_hostname,\\r\\n    filter_playerServer,\\r\\n    getAllServers,\\r\\n    applyFilter,\\r\\n    deployPayload,\\r\\n    portOpener,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var noAdminFilter = filter_adminRights(false)\\r\\n    var hasAdminFilter = filter_adminRights(true)\\r\\n    var canNukeFilter = filter_canNuke(ns)\\r\\n    var ramFilter = filter_minRam(4)\\r\\n    var nameFilter = filter_hostname(ns, \\\"darkweb|home\\\")\\r\\n    var playerServerFilter = filter_playerServer()\\r\\n\\r\\n    var targets = getAllServers(ns)\\r\\n    targets = applyFilter(targets, [noAdminFilter, canNukeFilter], false, false)\\r\\n    targets = applyFilter(targets, [nameFilter, playerServerFilter])\\r\\n    for (const t in targets) {\\r\\n        ns.printf(\\\"Nuking Target: %s\\\", targets[t].hostname)\\r\\n        attack(ns, targets[t])\\r\\n    }\\r\\n\\r\\n    targets = getAllServers(ns)\\r\\n    targets = applyFilter(targets, [hasAdminFilter, ramFilter], false, false)\\r\\n    for (const t in targets) {\\r\\n        ns.printf(\\\"Deploying payload on Target: %s\\\", targets[t].hostname)\\r\\n        await deployPayload(ns, t)\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function attack(ns, target) {\\r\\n    var po = portOpener(ns)\\r\\n    if (target.openPortCount < target.numOpenPortsRequired) {\\r\\n        for (let attack of po) {\\r\\n            if (attack[\\\"check\\\"](target)) {\\r\\n                attack[\\\"func\\\"](target.hostname)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    ns.nuke(target.hostname)\\r\\n\\r\\n    // if (!target.backdoorInstalled) {\\r\\n    //     await ns.singularity.installBackdoor(target.hostname)\\r\\n    // }\\r\\n}\",\"filename\":\"/scripts/backdoor-worm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///c0c28590-bf72-4d86-a925-e22450160980\",\"moduleSequenceNumber\":11659},{\"filename\":\"/scripts/backdoor-worm.js\",\"url\":\"blob:file:///80a9d84a-057a-4bae-bbb0-6e6d0b04d711\",\"moduleSequenceNumber\":11699}],\"dependents\":[],\"ramUsage\":4.8,\"server\":\"home\",\"moduleSequenceNumber\":11699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n\\tgetHackThreads,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar name = \\\"sigma-cosmetics\\\"\\r\\n\\tvar server = ns.getServer(name)\\r\\n\\tvar money = server.moneyAvailable - (server.moneyAvailable * 0.01)\\r\\n\\tvar t1 = getHackThreads(ns, server)\\r\\n\\tvar t2 = Math.floor(money / (ns.hackAnalyze(name) * server.moneyAvailable))\\r\\n\\t//var threads = ns.hackAnalyzeThreads(name, predicted)\\r\\n\\t//var hacked = await ns.hack(name, { threads: 1 })\\r\\n\\tns.tprintf(\\\"t1: %f, t2: %f\\\", t1, t2)\\r\\n}\\r\\n\",\"filename\":\"/scratch/test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///b05aa204-cc59-4a1c-b1d6-1d473873b650\",\"moduleSequenceNumber\":364},{\"filename\":\"/scratch/test.js\",\"url\":\"blob:file:///3a2c0e57-eda2-4b51-87b1-5c61c02514f8\",\"moduleSequenceNumber\":11351}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":11658,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = server.moneyAvailable - (server.moneyAvailable * 0.01)\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"home\",\"moduleSequenceNumber\":11659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAdditionalServerInfo } from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var server = ns.getServer(name)\\r\\n    var advancedServer = getAdditionalServerInfo(ns, server)\\r\\n\\r\\n    ns.tprint(name)\\r\\n    ns.tprintf(\\\"  Weaken time: %s\\\", ns.tFormat(ns.getWeakenTime(name)))\\r\\n    ns.tprintf(\\\"  Hack time: %s\\\", ns.tFormat(ns.getHackTime(name)))\\r\\n    ns.tprintf(\\\"  Grow time: %s\\\", ns.tFormat(ns.getGrowTime(name)))\\r\\n    ns.tprintf(\\\"  Max money: %s (%f)\\\", ns.nFormat(server.moneyMax, \\\"($0.00a)\\\"), server.moneyMax)\\r\\n    ns.tprintf(\\\"  Money: %s (%f)\\\", ns.nFormat(server.moneyAvailable, \\\"($0.00a)\\\"), server.moneyAvailable)\\r\\n    ns.tprintf(\\\"  Money threshold: %s (%f)\\\", ns.nFormat(advancedServer.moneyThreshold, \\\"($0.00a)\\\"), advancedServer.moneyThreshold)\\r\\n    ns.tprintf(\\\"  Growth rate: %d\\\", server.serverGrowth)\\r\\n    ns.tprintf(\\\"  Security min: %d\\\", server.minDifficulty)\\r\\n    ns.tprintf(\\\"  Security: %d\\\", server.hackDifficulty)\\r\\n    ns.tprintf(\\\"  Security threshold: %d\\\", advancedServer.securityThreshold)\\r\\n    ns.tprintf(\\\"  Weaken threads: %f\\\", advancedServer.weakenThreads)\\r\\n    ns.tprintf(\\\"  Grow threads: %f\\\", advancedServer.growThreads)\\r\\n    ns.tprintf(\\\"  Hack threads: %f\\\", advancedServer.hackThreads)\\r\\n}\\r\\n\\r\\n\",\"filename\":\"/scripts/analyze-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///f68ee8b1-05a5-4850-a00e-7dd9be6c7d92\",\"moduleSequenceNumber\":364},{\"filename\":\"/scripts/analyze-server.js\",\"url\":\"blob:file:///f9f556e7-1777-4153-97a2-2f8dd14ddf94\",\"moduleSequenceNumber\":2651}],\"dependents\":[],\"ramUsage\":6.75,\"server\":\"home\",\"moduleSequenceNumber\":11660,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { threadsAvailable } from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var threadSize = 0.15 + 1.6\\r\\n    let systemThreads = threadsAvailable(ns, threadSize, false)\\r\\n    let idleThreads = threadsAvailable(ns, threadSize, true)\\r\\n    ns.tprintf(\\\"==> Attack threads: %d (idle); %d (available)\\\", idleThreads, systemThreads)\\r\\n}\",\"filename\":\"/scripts/threads-available.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///7926943b-ab6d-44a3-a32e-f40ab4132812\",\"moduleSequenceNumber\":114289},{\"filename\":\"/scripts/threads-available.js\",\"url\":\"blob:file:///e72c6ba0-9b70-4980-8126-0fe4f12b53f5\",\"moduleSequenceNumber\":114290}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home\",\"moduleSequenceNumber\":11661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///f0c725b1-61cb-4d2a-a690-4cc22c97ced6\",\"moduleSequenceNumber\":7595}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":11662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///3afa984f-be5f-4548-a069-ad7aaa383dd7\",\"moduleSequenceNumber\":7738}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":11663,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///a30fd86a-f025-44a0-bfd6-e9918753991b\",\"moduleSequenceNumber\":7597}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":11664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    applyFilter,\\r\\n    filter_adminRights,\\r\\n    filter_minRamAvailable,\\r\\n    getAdditionalServerInfo,\\r\\n    getAllServers,\\r\\n    performAttack,\\r\\n    getGrowAttack,\\r\\n    getWeakenAttack,\\r\\n    getHackAttack,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const targetName = ns.args[0]\\r\\n    const growAttack = getGrowAttack(ns)\\r\\n    const weakenAttack = getWeakenAttack(ns)\\r\\n    const hackAttack = getHackAttack(ns)\\r\\n    await ns.sleep(10000)\\r\\n\\r\\n    while (true) {\\r\\n        let target = ns.getServer(targetName)\\r\\n        let addonInfo = getAdditionalServerInfo(ns, target)\\r\\n        let attackers = getAttackers(ns)\\r\\n\\r\\n        if (Object.keys(attackers).length <= 0) {\\r\\n            ns.print(\\\"No attackers available, sleeping 10 seconds before retrying\\\")\\r\\n            await ns.sleep(10000)\\r\\n            continue\\r\\n        }\\r\\n\\r\\n        if (target.hackDifficulty > addonInfo.securityThreshold) {\\r\\n            await ns.sleep(performAttack(ns, weakenAttack, target, attackers))\\r\\n        } else if (target.moneyAvailable < addonInfo.moneyThreshold) {\\r\\n            await ns.sleep(performAttack(ns, growAttack, target, attackers))\\r\\n        } else {\\r\\n            await ns.sleep(performAttack(ns, hackAttack, target, attackers))\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function getAttackers(ns) {\\r\\n    var hasAdminFilter = filter_adminRights(true)\\r\\n    // 1.6G base script size + 0.15G (weaken/grow)\\r\\n    // hack() requires 0.1G so it works everywhere where weaken/grow works\\r\\n    var ramFilter = filter_minRamAvailable(ns.getScriptRam(\\\"/payload/weaken-only.js\\\"))\\r\\n    return applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n}\\r\\n\\r\\n\",\"filename\":\"/scripts/single-target-scheduler.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///e34114a3-4a42-4b8a-9301-6dd5dd6934c8\",\"moduleSequenceNumber\":27714},{\"filename\":\"/scripts/single-target-scheduler.js\",\"url\":\"blob:file:///48284b6f-e9df-4c95-ba95-d2ec4a215546\",\"moduleSequenceNumber\":27715}],\"dependents\":[],\"ramUsage\":8.35,\"server\":\"home\",\"moduleSequenceNumber\":11665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    buyServers,\\r\\n    upgradeServers,\\r\\n    buyHacknetNodes,\\r\\n    upgradeHacknetNodes,\\r\\n    getHacknetRamUpgrade,\\r\\n    getHacknetCoreUpgrade,\\r\\n    getHacknetLevelUpgrade,\\r\\n    schedule,\\r\\n    getServersByRam,\\r\\n    maxServerUpgrade,\\r\\n    bulkServerUpgrade,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var expected = 6\\r\\n    var completed = []\\r\\n    // with the ability to set a money limit with\\r\\n    // the money-limit.js script, there is no need\\r\\n    // to limit the size of our compute nodes here\\r\\n    var serverRamLimit = ns.getPurchasedServerMaxRam()\\r\\n    var hacknetNodeLimit = 8\\r\\n    var hacknetRamUpgrade = getHacknetRamUpgrade(ns, hacknetNodeLimit)\\r\\n    var hacknetCoreUpgrade = getHacknetCoreUpgrade(ns, hacknetNodeLimit)\\r\\n    var hacknetLevelUpgrade = getHacknetLevelUpgrade(ns, hacknetNodeLimit)\\r\\n\\r\\n    ns.disableLog(\\\"disableLog\\\")\\r\\n    var markCompleted = (name) => {\\r\\n        if (!completed.includes(name)) {\\r\\n            completed.push(name)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    while (completed.length < expected) {\\r\\n        let maxUpgrade = maxServerUpgrade(ns) > serverRamLimit ? serverRamLimit : maxServerUpgrade(ns)\\r\\n        let serversByRam = getServersByRam(ns)\\r\\n        let serverCount = ns.getPurchasedServers()\\r\\n        let largestServer = serverCount > 0 ? Object.keys(serversByRam).sort()[0] : 0\\r\\n\\r\\n        if ((maxUpgrade > 4) && (maxUpgrade > largestServer)) {\\r\\n            if (await bulkServerUpgrade(ns, maxUpgrade) && maxUpgrade >= serverRamLimit) {\\r\\n                markCompleted(\\\"buyServers\\\")\\r\\n                markCompleted(\\\"upgradeServers\\\")\\r\\n            }\\r\\n\\r\\n        } else {\\r\\n            if (await buyServers(ns)) {\\r\\n                markCompleted(\\\"buyServers\\\")\\r\\n            }\\r\\n            if (await upgradeServers(ns, serverRamLimit)) {\\r\\n                markCompleted(\\\"upgradeServers\\\")\\r\\n            }\\r\\n        }\\r\\n        if (buyHacknetNodes(ns, hacknetNodeLimit)) {\\r\\n            markCompleted(\\\"buyHacknetNodes\\\")\\r\\n        }\\r\\n        if (await upgradeHacknetNodes(ns, hacknetRamUpgrade)) {\\r\\n            markCompleted(\\\"buyHacknetRam\\\")\\r\\n        }\\r\\n        if (await upgradeHacknetNodes(ns, hacknetCoreUpgrade)) {\\r\\n            markCompleted(\\\"buyHacknetCores\\\")\\r\\n        }\\r\\n        if (await upgradeHacknetNodes(ns, hacknetLevelUpgrade)) {\\r\\n            markCompleted(\\\"buyHacknetLevel\\\")\\r\\n        }\\r\\n        if (!await schedule(ns, \\\"/scripts/backdoor-worm.js\\\")) {\\r\\n            ns.print(\\\"Failed to execute backdoor-worm\\\")\\r\\n        }\\r\\n        await ns.sleep(10000)\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/setup-upgrade-infra.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///bb335e4c-e482-43fb-a6dc-51b2e9a78c33\",\"moduleSequenceNumber\":11659},{\"filename\":\"/scripts/setup-upgrade-infra.js\",\"url\":\"blob:file:///330e7c70-bed8-45cf-b9e7-dd2dd60ed9a4\",\"moduleSequenceNumber\":12861}],\"dependents\":[],\"ramUsage\":17.55,\"server\":\"home\",\"moduleSequenceNumber\":12861,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    filter_adminRights,\\r\\n    filter_minRamAvailable,\\r\\n    getAllServers,\\r\\n    applyFilter,\\r\\n    ramAvail,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var script = \\\"/payload/share.js\\\"\\r\\n    var scriptRam = ns.getScriptRam(script)\\r\\n    var hasAdminFilter = filter_adminRights(true)\\r\\n    var ramFilter = filter_minRamAvailable(scriptRam)\\r\\n    var targets = getAllServers(ns)\\r\\n    targets = applyFilter(targets, [hasAdminFilter, ramFilter], false, false)\\r\\n    for (const t in targets) {\\r\\n        if (targets[t].hostname == \\\"home\\\") {\\r\\n            continue\\r\\n        }\\r\\n        let serverThreads = Math.floor(ramAvail(targets[t]) / scriptRam)\\r\\n        if (ns.exec(script, t, serverThreads) == 0) {\\r\\n            ns.tprintf(\\\"Failed to share() on '%s' with %d threads\\\", t, serverThreads)\\r\\n        }\\r\\n    }\\r\\n    await ns.sleep(2000)\\r\\n    ns.tprintf(\\\"Share power: %f\\\", ns.getSharePower())\\r\\n}\",\"filename\":\"/scripts/boost-faction-reputation.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///b866ce9f-73a0-4f81-83b3-1c9d1a6e9cb0\",\"moduleSequenceNumber\":364},{\"filename\":\"/scripts/boost-faction-reputation.js\",\"url\":\"blob:file:///66d23291-850d-4f97-be3b-94d3b154e6a3\",\"moduleSequenceNumber\":2582}],\"dependents\":[],\"ramUsage\":5.4,\"server\":\"home\",\"moduleSequenceNumber\":11667,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getSharePower\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { schedule } from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    if (!await schedule(ns, ...ns.args)) {\\r\\n        ns.print(\\\"Failed to execute '%s'\\\", ns.args[0])\\r\\n    }\\r\\n}\",\"filename\":\"run.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"home\",\"moduleSequenceNumber\":11668,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///a20ca803-efea-4f7b-a4a4-973c7fafd698\",\"moduleSequenceNumber\":6260}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":11669,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    filter_hostname,\\r\\n    filter_playerServer,\\r\\n    getAllServers,\\r\\n    applyFilter,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var known = []\\r\\n    var nameFilter = filter_hostname(ns, \\\"darkweb|home\\\")\\r\\n    var playerServerFilter = filter_playerServer(true)\\r\\n    var targets = getAllServers(ns)\\r\\n    targets = applyFilter(targets, [nameFilter, playerServerFilter])\\r\\n\\r\\n\\r\\n    for (const t in targets) {\\r\\n        let result = []\\r\\n        for (const f of ns.ls(t)) {\\r\\n            if (f.startsWith(\\\"/payload/\\\") || f.startsWith(\\\"/lib/\\\") || f.startsWith(\\\"/scripts/\\\") || f.startsWith(\\\"/scratch/\\\")) {\\r\\n                continue\\r\\n            }\\r\\n            if (!known.includes(f)) {\\r\\n                result.push(f)\\r\\n                known.push(f)\\r\\n            }\\r\\n        }\\r\\n        if (result.length > 0) {\\r\\n            ns.tprintf(\\\"%s:\\\", t)\\r\\n            for (const f of result) {\\r\\n                ns.tprintf(\\\"  %s\\\", f)\\r\\n                if (f.endsWith(\\\".lit\\\")) {\\r\\n                    await ns.scp(f, \\\"home\\\", t)\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/find-files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///23ed7f7b-fe6e-4028-a498-4a62b33ed755\",\"moduleSequenceNumber\":4277},{\"filename\":\"/scripts/find-files.js\",\"url\":\"blob:file:///1fc76cb2-73df-48aa-8781-703f518df1b5\",\"moduleSequenceNumber\":14001}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":11670,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    applyFilter,\\r\\n    filter_adminRights,\\r\\n    filter_minRamAvailable,\\r\\n    getAdditionalServerInfo,\\r\\n    getAllServers,\\r\\n    performAttack,\\r\\n    getGrowAttack,\\r\\n    getWeakenAttack,\\r\\n    getHackAttack,\\r\\n    getTargetAddPort,\\r\\n    getTargetRemovePort,\\r\\n    threadsAvailable,\\r\\n    sortObjectBy,\\r\\n    sortByKey,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var targets = [...ns.args]\\r\\n    const growAttack = getGrowAttack(ns)\\r\\n    const weakenAttack = getWeakenAttack(ns)\\r\\n    const hackAttack = getHackAttack(ns)\\r\\n    ns.disableLog(\\\"disableLog\\\")\\r\\n    ns.disableLog(\\\"sleep\\\")\\r\\n\\r\\n    // If there is an already running instance of the scheduler\\r\\n    // just add the parameters as targets and exit. Bitburner\\r\\n    // itself prevents multiple instances of the same script running\\r\\n    // with the same parameters\\r\\n    if (isRunning(ns)) {\\r\\n        let addPort = getTargetAddPort(ns)\\r\\n        for (const t of targets) {\\r\\n            while (!addPort.tryWrite(t)) {\\r\\n                await ns.sleep(1000)\\r\\n            }\\r\\n        }\\r\\n        return\\r\\n    }\\r\\n\\r\\n    let procs = {}\\r\\n    while (true) {\\r\\n        let schedulables = getSchedulables(targets, procs)\\r\\n        // check if there is anything to schedule and if not,\\r\\n        // wait a fixed amount before checking again\\r\\n        if (schedulables.length <= 0) {\\r\\n            await ns.sleep(5000)\\r\\n        }\\r\\n        for (const targetName of schedulables) {\\r\\n            let target = ns.getServer(targetName)\\r\\n            let addonInfo = getAdditionalServerInfo(ns, target)\\r\\n            let attackers = getAttackers(ns)\\r\\n\\r\\n            // no attackers available, skip this scheduling cycle\\r\\n            if (Object.keys(attackers).length <= 0) {\\r\\n                continue\\r\\n            }\\r\\n\\r\\n            let state = {}\\r\\n            if (target.hackDifficulty > addonInfo.securityThreshold) {\\r\\n                state = performAttack(ns, weakenAttack, target, attackers)\\r\\n            } else if (target.moneyAvailable < addonInfo.moneyThreshold) {\\r\\n                state = performAttack(ns, growAttack, target, attackers)\\r\\n            } else {\\r\\n                state = performAttack(ns, hackAttack, target, attackers)\\r\\n            }\\r\\n            procs[targetName] = state\\r\\n        }\\r\\n        printState(ns, procs, targets)\\r\\n        procs = await wait(ns, procs, 5000)\\r\\n        targets = updateTargets(ns, targets)\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getAttackers(ns) {\\r\\n    var hasAdminFilter = filter_adminRights(true)\\r\\n    // 1.6G base script size + 0.15G (weaken/grow)\\r\\n    // hack() requires 0.1G so it works everywhere where weaken/grow works\\r\\n    var ramFilter = filter_minRamAvailable(ns.getScriptRam(\\\"/payload/weaken-only.js\\\"))\\r\\n    return applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n}\\r\\n\\r\\nfunction getSchedulables(targets, procs) {\\r\\n    var schedulables = []\\r\\n    var running = Object.keys(procs)\\r\\n    for (const t of targets) {\\r\\n        if (!running.includes(t)) {\\r\\n            schedulables.push(t)\\r\\n        }\\r\\n    }\\r\\n    return schedulables\\r\\n}\\r\\n\\r\\nasync function wait(ns, procs, maxWait) {\\r\\n    var newProcs = {}\\r\\n    var waitOn = \\\"\\\"\\r\\n    var waitTime = Infinity\\r\\n    for (const proc in procs) {\\r\\n        let procWait = procs[proc][\\\"waitTime\\\"]\\r\\n        if (procWait < waitTime) {\\r\\n            waitOn = proc\\r\\n            waitTime = procWait\\r\\n        }\\r\\n    }\\r\\n    if (waitTime > maxWait) {\\r\\n        waitOn = \\\"\\\"\\r\\n        waitTime = maxWait\\r\\n    }\\r\\n\\r\\n    ns.printf(\\\"Sleeping for %s\\\", ns.tFormat(waitTime))\\r\\n    await ns.sleep(waitTime)\\r\\n    for (const proc in procs) {\\r\\n        if (proc == waitOn) {\\r\\n            continue\\r\\n        }\\r\\n        let newWaitTime = procs[proc][\\\"waitTime\\\"] - waitTime\\r\\n        if ((newWaitTime <= 0) || !attackStillRunning(ns, procs[proc][\\\"pids\\\"])) {\\r\\n            continue\\r\\n        }\\r\\n        newProcs[proc] = procs[proc]\\r\\n        newProcs[proc][\\\"waitTime\\\"] = newWaitTime\\r\\n    }\\r\\n    return newProcs\\r\\n}\\r\\n\\r\\nfunction updateTargets(ns, current) {\\r\\n    var newTargets = [...current]\\r\\n    var addPort = getTargetAddPort(ns)\\r\\n    var removePort = getTargetRemovePort(ns)\\r\\n\\r\\n    while (!addPort.empty()) {\\r\\n        let data = addPort.read()\\r\\n        // Just a safety precaution as I have no idea\\r\\n        // how race-condition safe the port interface is.\\r\\n        // As in \\\"if empty() returns false, is it guaranteed to\\r\\n        // stay non empty in the current function?\\\"\\r\\n        // Also do not add targets that are already present\\r\\n        if ((data != \\\"NULL PORT DATA\\\") && (!newTargets.includes(data))) {\\r\\n            newTargets.push(data)\\r\\n        }\\r\\n    }\\r\\n    while (!removePort.empty()) {\\r\\n        let data = removePort.read()\\r\\n        // See comment above\\r\\n        if (data != \\\"NULL PORT DATA\\\") {\\r\\n            newTargets = newTargets.filter((v) => v != data)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return newTargets\\r\\n}\\r\\n\\r\\nfunction printState(ns, procs, targets) {\\r\\n    var procNames = [...Object.keys(procs)].sort()\\r\\n    var sortedProcs = sortObjectBy(procs, sortByKey(\\\"waitTime\\\"))\\r\\n    if (sortedProcs.length > 0) {\\r\\n        ns.print(\\\"Running attacks:\\\")\\r\\n        for (const proc of sortedProcs) {\\r\\n            ns.printf(\\\"  %20s: %6s (s: %3d; t: %6d; rt: %6d; wt: %8s)\\\",\\r\\n                proc[\\\"target\\\"],\\r\\n                proc[\\\"operation\\\"],\\r\\n                proc[\\\"serverCount\\\"],\\r\\n                proc[\\\"attackThreads\\\"],\\r\\n                proc[\\\"requiredThreads\\\"],\\r\\n                ns.nFormat(proc[\\\"waitTime\\\"] / 1000, \\\"00:00:00\\\"),\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n    var idleTargets = []\\r\\n    for (const t of targets) {\\r\\n        if (!procNames.includes(t)) {\\r\\n            idleTargets.push(t)\\r\\n        }\\r\\n    }\\r\\n    if (idleTargets.length > 0) {\\r\\n        ns.print(\\\"Idle targets:\\\")\\r\\n        for (const t of idleTargets) {\\r\\n            ns.printf(\\\"  %s\\\", t)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let maxAttackScriptSize = ns.getScriptRam(\\\"/payload/weaken-only.js\\\")\\r\\n    let systemThreads = threadsAvailable(ns, maxAttackScriptSize, false)\\r\\n    let idleThreads = threadsAvailable(ns, maxAttackScriptSize, true)\\r\\n    ns.printf(\\\"System threads: %d (idle); %d (available)\\\", idleThreads, systemThreads)\\r\\n}\\r\\n\\r\\nfunction isRunning(ns) {\\r\\n    var myself = ns.getScriptName()\\r\\n    var count = 0\\r\\n    for (const proc of ns.ps()) {\\r\\n        if (proc.filename == myself) {\\r\\n            count++\\r\\n        }\\r\\n        if (count > 1) {\\r\\n            return true\\r\\n        }\\r\\n    }\\r\\n    return false\\r\\n}\\r\\n\\r\\nfunction attackStillRunning(ns, pids) {\\r\\n    for (const pid of pids) {\\r\\n        if (ns.isRunning(pid)) {\\r\\n            return true\\r\\n        }\\r\\n    }\\r\\n    return false\\r\\n}\",\"filename\":\"/scripts/multi-target-scheduler.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///85055436-4719-46e3-a86d-07a8f748f209\",\"moduleSequenceNumber\":11659},{\"filename\":\"/scripts/multi-target-scheduler.js\",\"url\":\"blob:file:///c9756b4a-bc72-4624-97bf-d8508d3bc038\",\"moduleSequenceNumber\":11827}],\"dependents\":[],\"ramUsage\":8.65,\"server\":\"home\",\"moduleSequenceNumber\":11827,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    getTargetAddPort,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var targets = ns.args\\r\\n    var addPort = getTargetAddPort(ns)\\r\\n    for (const t of targets) {\\r\\n        while (!addPort.tryWrite(t)) {\\r\\n            await ns.sleep(1000)\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/add-targets.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///180caea0-e4a3-4286-aadf-851ebf0cc34d\",\"moduleSequenceNumber\":11659},{\"filename\":\"/scripts/add-targets.js\",\"url\":\"blob:file:///ba49ad51-477a-46f8-aaba-1a2415685bef\",\"moduleSequenceNumber\":12294}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":12294,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    getTargetRemovePort,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var targets = ns.args\\r\\n    var removePort = getTargetRemovePort(ns)\\r\\n    for (const t of targets) {\\r\\n        while (!removePort.tryWrite(t)) {\\r\\n            await ns.sleep(1000)\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/remove-targets.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///0585ed28-11b3-4393-af2b-1953ec802247\",\"moduleSequenceNumber\":11659},{\"filename\":\"/scripts/remove-targets.js\",\"url\":\"blob:file:///b012697e-1f65-4c4e-8bae-559f56187991\",\"moduleSequenceNumber\":12293}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":12293,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    setMoneyLimit,\\r\\n    getMoneyLimit,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args.length < 1) {\\r\\n        ns.tprintf(\\\"Current money limit: %d\\\", getMoneyLimit(ns))\\r\\n        return\\r\\n    }\\r\\n    setMoneyLimit(ns, ns.args[0])\\r\\n    ns.tprintf(\\\"New money limit: %d\\\", getMoneyLimit(ns))\\r\\n}\\r\\n\",\"filename\":\"/scripts/money-limit.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///38f37ecb-2dcb-43cc-aa01-659b0c27cd7b\",\"moduleSequenceNumber\":4401},{\"filename\":\"/scripts/money-limit.js\",\"url\":\"blob:file:///74a582ff-9db2-4fd5-94ea-61f71843b326\",\"moduleSequenceNumber\":4565}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":11674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    getAllServers,\\r\\n    applyFilter,\\r\\n    filter_hackingSkill,\\r\\n    filter_minMaxMoney,\\r\\n    filter_adminRights,\\r\\n    sortObjectBy,\\r\\n    sortByFunctionValue,\\r\\n    sortByKey,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var sortTypes = {\\r\\n        \\\"weakenTime\\\": sortByFunctionValue(ns.getWeakenTime),\\r\\n        \\\"growTime\\\": sortByFunctionValue(ns.getGrowTime),\\r\\n        \\\"hackTime\\\": sortByFunctionValue(ns.getHackTime),\\r\\n        \\\"score\\\": sortByScore(),\\r\\n    }\\r\\n\\r\\n    var sortType = \\\"moneyMax\\\"\\r\\n    if (ns.args.length > 0) {\\r\\n        sortType = ns.args[0]\\r\\n    }\\r\\n    var output = \\\"\\\"\\r\\n    if (ns.args.length > 1) {\\r\\n        output = ns.args[1]\\r\\n    }\\r\\n    var sortFunc = sortByKey(sortType)\\r\\n    if (Object.keys(sortTypes).includes(sortType)) {\\r\\n        sortFunc = sortTypes[sortType]\\r\\n    }\\r\\n\\r\\n    var skillFilter = filter_hackingSkill(ns.getHackingLevel())\\r\\n    var maxMoneyFilter = filter_minMaxMoney(1)\\r\\n    var hasAdminFilter = filter_adminRights(false)\\r\\n    var servers = applyFilter(getAllServers(ns), [skillFilter, hasAdminFilter])\\r\\n    servers = applyFilter(servers, [maxMoneyFilter], false)\\r\\n\\r\\n    for (const server of sortObjectBy(servers, sortFunc)) {\\r\\n        let name = server.hostname\\r\\n        if (output != \\\"\\\") {\\r\\n            ns.tprintf(\\\"%s\\\", server[output])\\r\\n            continue\\r\\n        }\\r\\n        ns.tprintf(\\r\\n            \\\"%20s: score: %8s; m: %8s; gr: %4d; sm: %3d; wt: %10d; gt: %10d; ht: %10d\\\",\\r\\n            server.hostname,\\r\\n            ns.nFormat(serverScore(server), '0.00e+0'),\\r\\n            ns.nFormat(server.moneyMax, \\\"($0.00a)\\\"),\\r\\n            server.serverGrowth,\\r\\n            server.minDifficulty,\\r\\n            ns.getWeakenTime(name),\\r\\n            ns.getGrowTime(name),\\r\\n            ns.getHackTime(name),\\r\\n        )\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function serverScore(server) {\\r\\n    return server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n}\\r\\n\\r\\nexport function sortByScore() {\\r\\n    return (function (x, y) {\\r\\n        if (serverScore(x) < serverScore(y)) {\\r\\n            return -1\\r\\n        }\\r\\n        if (serverScore(x) > serverScore(y)) {\\r\\n            return 1\\r\\n        }\\r\\n        return 0\\r\\n    })\\r\\n}\",\"filename\":\"/scripts/compare-servers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///e1159458-5290-4c00-aea3-d3c5286171fd\",\"moduleSequenceNumber\":11659},{\"filename\":\"/scripts/compare-servers.js\",\"url\":\"blob:file:///588ad9b0-f7be-4425-97ea-dc4b7232375e\",\"moduleSequenceNumber\":11770}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":11770,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var base = 8\\r\\n    var ram = base\\r\\n    while (ram <= ns.getPurchasedServerMaxRam()) {\\r\\n        ns.tprintf(\\r\\n            \\\"%9s: %8s (%8s)\\\",\\r\\n            ns.nFormat(ram * 1024 * 1024 * 1024, \\\"0.00ib\\\"),\\r\\n            ns.nFormat(ns.getPurchasedServerCost(ram), \\\"($0.00a)\\\"),\\r\\n            ns.nFormat(ns.getPurchasedServerCost(ram) * ns.getPurchasedServerLimit(), \\\"($0.00a)\\\")\\r\\n        )\\r\\n        ram = ram * 2\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/server-upgrade-costs.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/server-upgrade-costs.js\",\"url\":\"blob:file:///750ee87c-ace7-4b5e-b594-b8c656013161\",\"moduleSequenceNumber\":11949}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":11949,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    getAllServers,\\r\\n    applyFilter,\\r\\n    filter_hackingSkill,\\r\\n    filter_minMaxMoney,\\r\\n    filter_adminRights,\\r\\n    getTargetAddPort,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var skillFilter = filter_hackingSkill(ns.getHackingLevel())\\r\\n    var maxMoneyFilter = filter_minMaxMoney(1)\\r\\n    var hasAdminFilter = filter_adminRights(false)\\r\\n    var servers = applyFilter(getAllServers(ns), [skillFilter, hasAdminFilter])\\r\\n    servers = applyFilter(servers, [maxMoneyFilter], false)\\r\\n\\r\\n    var addPort = getTargetAddPort(ns)\\r\\n    for (const t of Object.keys(servers)) {\\r\\n        ns.tprintf(\\\"Adding %s as target\\\", t)\\r\\n        while (!addPort.tryWrite(t)) {\\r\\n            await ns.sleep(1000)\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/add-all-targets.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///448efdac-1260-4815-86c6-f18e3c77e5ed\",\"moduleSequenceNumber\":11659},{\"filename\":\"/scripts/add-all-targets.js\",\"url\":\"blob:file:///38c3b516-5bed-4185-b08b-07a2989a2d35\",\"moduleSequenceNumber\":11828}],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"home\",\"moduleSequenceNumber\":11828,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"V2_0_0_API_BREAK.txt\",\"text\":\"This file contains the list of potential API break. A pattern was used to look through all your files and note the spots where you might have a problem. Not everything here is broken./ns\\\\.scp/g\\nscp arguments were switch, it is now scp(files, destination, optionally_source). If you were using 2 argument (not 3) this doesn't affect you.\\n\\n\\t/lib/utils.js\\n\\t\\tLine 230 await ns.scp(files, \\\"home\\\", name)\\n\\t\\tLine 481 await ns.scp(\\\"/lib/utils.js\\\", \\\"home\\\", target)\\n\\t\\tLine 482 await ns.scp(script, \\\"home\\\", target)\\n\\t/scripts/find-files.js\\n\\t\\tLine 33 await ns.scp(f, t, \\\"home\\\")\\n\\n\\n/ns.installBackdoor/g\\nns.installBackdoor was moved to ns.singularity.installBackdoor\\n\\n\\t/scripts/backdoor-worm.js\\n\\t\\tLine 50 //     await ns.installBackdoor(target.hostname)\\n\\n\\n/hacking/g\\nThe work system is completely reworked and ns.getPlayer().hacking no longer exists. This data is likely available inside ns.getPlayer().currentWork, skills, exp, or hp\\n\\n\\t/lib/utils.js\\n\\t\\tLine 69 export function filter_hackingSkill(level) {\\n\\t/scripts/compare-servers.js\\n\\t\\tLine 1 import { getAllServers, applyFilter, filter_hackingSkill, filter_minMaxMoney, filter_adminRights, sortObjectsBy } from \\\"lib/utils.js\\\";\\n\\t\\tLine 9 var skillFilter = filter_hackingSkill(ns.getHackingLevel())\\n\\n\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"42.1.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":33483203980.5,\"moneyMax\":125562014926.875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1278,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"67.0.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":43495643655.75,\"moneyMax\":163108663709.0625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1277,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"83.4.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":18034979895.75,\"moneyMax\":67631174609.0625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1049,\"serverGrowth\":75}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"40.6.5.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":19128206855.25,\"moneyMax\":71730775707.1875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1055,\"serverGrowth\":77}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"57.5.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":26124349998,\"moneyMax\":97966312492.5,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1186,\"serverGrowth\":68}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"28.5.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":13802299012.5,\"moneyMax\":51758621296.875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1177,\"serverGrowth\":54}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"49.0.8.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"blade\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":14307264427.5,\"moneyMax\":53652241603.125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":937,\"serverGrowth\":98}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"6.7.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":17773366687.5,\"moneyMax\":66650125078.125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1204,\"serverGrowth\":95}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"68.8.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":17218231008,\"moneyMax\":64568366280,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":990,\"serverGrowth\":93}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"15.8.3.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1193609313.75,\"moneyMax\":4476034926.5625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1019,\"serverGrowth\":95}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"75.6.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":750000,\"moneyMax\":2812500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1187,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"71.7.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":853934515.5,\"moneyMax\":3202254433.125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1027,\"serverGrowth\":85}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"46.4.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":677696128.5,\"moneyMax\":2541360481.875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":921,\"serverGrowth\":49}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"70.1.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":501479645.25,\"moneyMax\":1880548669.6875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":916,\"serverGrowth\":35}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"96.6.0.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":433272144.75,\"moneyMax\":1624770542.8125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":880,\"serverGrowth\":71}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"28.8.7.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":538413204,\"moneyMax\":2019049515,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":834,\"serverGrowth\":67}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"13.2.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":702954918.75,\"moneyMax\":2636080945.3125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":914,\"serverGrowth\":88}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"65.7.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":841075306.5,\"moneyMax\":3154032399.375,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":897,\"serverGrowth\":80}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"11.8.8.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":579853611,\"moneyMax\":2174451041.25,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":823,\"serverGrowth\":73}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"4.7.5.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":447741838.5,\"moneyMax\":1679031894.375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":812,\"serverGrowth\":89}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"67.9.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":668472233.25,\"moneyMax\":2506770874.6875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":928,\"serverGrowth\":73}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"35.7.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":596331764.25,\"moneyMax\":2236244115.9375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":833,\"serverGrowth\":90}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"38.9.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":897631140.75,\"moneyMax\":3366116777.8125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":865,\"serverGrowth\":61}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-500494.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-9,-10,-6,-8,-6,-9,-4,3,4,8,6,5,-9,8,-6,5,-1,3,7,2,4,0,-9,5,2,-8,6,8,-2,7,10],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"93.7.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":683294376,\"moneyMax\":2562353910,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":859,\"serverGrowth\":65}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"54.6.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":813492402.75,\"moneyMax\":3050596510.3125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":816,\"serverGrowth\":66}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"93.5.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":531585734.25,\"moneyMax\":1993446503.4375,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":835,\"serverGrowth\":75}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"70.7.5.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":615632725.5,\"moneyMax\":2308622720.625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":830,\"serverGrowth\":74}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"28.6.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1135144866.75,\"moneyMax\":4256793250.3125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":803,\"serverGrowth\":56}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"50.5.6.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1218736680,\"moneyMax\":4570262550,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":835,\"serverGrowth\":87}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"98.4.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":913189707.75,\"moneyMax\":3424461404.0625,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":834,\"serverGrowth\":70}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"30.3.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":1007924086.5,\"moneyMax\":3779715324.375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":823,\"serverGrowth\":80}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"32.3.8.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"icarus\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":823183536.75,\"moneyMax\":3086938262.8125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":783,\"serverGrowth\":78}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"72.6.9.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":553918301.25,\"moneyMax\":2077193629.6875,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":701,\"serverGrowth\":57}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"84.5.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":413744683.5,\"moneyMax\":1551542563.125,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":510,\"serverGrowth\":48}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"14.0.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":514299882,\"moneyMax\":1928624557.5,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":598,\"serverGrowth\":50}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"65.8.8.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":202247901.75,\"moneyMax\":758429631.5625,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":411,\"serverGrowth\":44}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"78.4.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"computek\",\"rho-construction\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":185913660.75,\"moneyMax\":697176227.8125,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":383,\"serverGrowth\":40}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"72.8.3.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"alpha-ent\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":817084850.25,\"moneyMax\":3064068188.4375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":754,\"serverGrowth\":79}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"44.1.9.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":185319428.25,\"moneyMax\":694947855.9375,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":444,\"serverGrowth\":57}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"91.8.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":332561706.75,\"moneyMax\":1247106400.3125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":564,\"serverGrowth\":60}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"47.5.2.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":299890107.75,\"moneyMax\":1124587904.0625,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":419,\"serverGrowth\":54}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"7.0.6.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":39,\"minDifficulty\":13,\"moneyAvailable\":116182871.25,\"moneyMax\":435685767.1875,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":314,\"serverGrowth\":53}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"90.2.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":166164922.5,\"moneyMax\":623118459.375,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":311,\"serverGrowth\":63}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"10.6.1.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":206250000,\"moneyMax\":773437500,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":422,\"serverGrowth\":52}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"12.1.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":53618153.25,\"moneyMax\":201068074.6875,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":292,\"serverGrowth\":49}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"43.3.2.2\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",2],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.41,\"pid\":388,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///8427faf7-026b-4a7a-ad97-7758c191658a\",\"moduleSequenceNumber\":12012}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = server.moneyAvailable - (server.moneyAvailable * 0.01)\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"n00dles\",\"moduleSequenceNumber\":11705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///6aad8e2e-b0f8-4c76-bf4f-acb033270a8f\",\"moduleSequenceNumber\":12523}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":12523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///8427faf7-026b-4a7a-ad97-7758c191658a\",\"moduleSequenceNumber\":12012}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":12012,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///e52df653-eaba-4856-8795-44fa0bd26676\",\"moduleSequenceNumber\":11836}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":11836,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"n00dles\",\"moduleSequenceNumber\":11709,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":5.675999999999963,\"minDifficulty\":1,\"moneyAvailable\":136336,\"moneyMax\":196875,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"45.2.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",9],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.41,\"pid\":394,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":9,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///f9101a27-4b46-495c-94bf-10dc57ef371a\",\"moduleSequenceNumber\":11829}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = server.moneyAvailable - (server.moneyAvailable * 0.01)\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":11715,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///3a6f95b1-f0e3-4016-8e4c-9a1cb45706e6\",\"moduleSequenceNumber\":11950}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":11950,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///f9101a27-4b46-495c-94bf-10dc57ef371a\",\"moduleSequenceNumber\":11829}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":11829,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///3413bfa9-2aad-44df-8a17-c00bf055286f\",\"moduleSequenceNumber\":12580}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":12580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":11719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    filter_adminRights,\\r\\n    filter_canNuke,\\r\\n    filter_minRam,\\r\\n    filter_hostname,\\r\\n    filter_playerServer,\\r\\n    getAllServers,\\r\\n    applyFilter,\\r\\n    deployPayload,\\r\\n    portOpener,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var noAdminFilter = filter_adminRights(false)\\r\\n    var hasAdminFilter = filter_adminRights(true)\\r\\n    var canNukeFilter = filter_canNuke(ns)\\r\\n    var ramFilter = filter_minRam(4)\\r\\n    var nameFilter = filter_hostname(ns, \\\"darkweb|home\\\")\\r\\n    var playerServerFilter = filter_playerServer()\\r\\n\\r\\n    var targets = getAllServers(ns)\\r\\n    targets = applyFilter(targets, [noAdminFilter, canNukeFilter], false, false)\\r\\n    targets = applyFilter(targets, [nameFilter, playerServerFilter])\\r\\n    for (const t in targets) {\\r\\n        ns.printf(\\\"Nuking Target: %s\\\", targets[t].hostname)\\r\\n        attack(ns, targets[t])\\r\\n    }\\r\\n\\r\\n    targets = getAllServers(ns)\\r\\n    targets = applyFilter(targets, [hasAdminFilter, ramFilter], false, false)\\r\\n    for (const t in targets) {\\r\\n        ns.printf(\\\"Deploying payload on Target: %s\\\", targets[t].hostname)\\r\\n        await deployPayload(ns, t)\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function attack(ns, target) {\\r\\n    var po = portOpener(ns)\\r\\n    if (target.openPortCount < target.numOpenPortsRequired) {\\r\\n        for (let attack of po) {\\r\\n            if (attack[\\\"check\\\"](target)) {\\r\\n                attack[\\\"func\\\"](target.hostname)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    ns.nuke(target.hostname)\\r\\n\\r\\n    // if (!target.backdoorInstalled) {\\r\\n    //     await ns.singularity.installBackdoor(target.hostname)\\r\\n    // }\\r\\n}\",\"filename\":\"/scripts/backdoor-worm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///f84d7ca8-543a-4979-b4c4-0d8c1fecfe07\",\"moduleSequenceNumber\":11715},{\"filename\":\"/scripts/backdoor-worm.js\",\"url\":\"blob:file:///8ee4c045-6c40-4dcf-97c1-c934ba49e783\",\"moduleSequenceNumber\":13036}],\"dependents\":[],\"ramUsage\":4.8,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":13036,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":5.859999999999999,\"minDifficulty\":3,\"moneyAvailable\":1527699.0505591366,\"moneyMax\":5625000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"79.4.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",9],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.41,\"pid\":395,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":9,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///566e916c-bc8b-4208-a7ab-80c6e4b61a87\",\"moduleSequenceNumber\":11830}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = server.moneyAvailable - (server.moneyAvailable * 0.01)\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":11725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///8b7fbbd9-9ad1-44da-b9cb-7c584a3aaaed\",\"moduleSequenceNumber\":11951}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":11951,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///566e916c-bc8b-4208-a7ab-80c6e4b61a87\",\"moduleSequenceNumber\":11830}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":11830,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///2e41df70-b5f5-4a88-bb50-1f785eb8043e\",\"moduleSequenceNumber\":11835}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":11835,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":11729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    filter_adminRights,\\r\\n    filter_canNuke,\\r\\n    filter_minRam,\\r\\n    filter_hostname,\\r\\n    filter_playerServer,\\r\\n    getAllServers,\\r\\n    applyFilter,\\r\\n    deployPayload,\\r\\n    portOpener,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var noAdminFilter = filter_adminRights(false)\\r\\n    var hasAdminFilter = filter_adminRights(true)\\r\\n    var canNukeFilter = filter_canNuke(ns)\\r\\n    var ramFilter = filter_minRam(4)\\r\\n    var nameFilter = filter_hostname(ns, \\\"darkweb|home\\\")\\r\\n    var playerServerFilter = filter_playerServer()\\r\\n\\r\\n    var targets = getAllServers(ns)\\r\\n    targets = applyFilter(targets, [noAdminFilter, canNukeFilter], false, false)\\r\\n    targets = applyFilter(targets, [nameFilter, playerServerFilter])\\r\\n    for (const t in targets) {\\r\\n        ns.printf(\\\"Nuking Target: %s\\\", targets[t].hostname)\\r\\n        attack(ns, targets[t])\\r\\n    }\\r\\n\\r\\n    targets = getAllServers(ns)\\r\\n    targets = applyFilter(targets, [hasAdminFilter, ramFilter], false, false)\\r\\n    for (const t in targets) {\\r\\n        ns.printf(\\\"Deploying payload on Target: %s\\\", targets[t].hostname)\\r\\n        await deployPayload(ns, t)\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function attack(ns, target) {\\r\\n    var po = portOpener(ns)\\r\\n    if (target.openPortCount < target.numOpenPortsRequired) {\\r\\n        for (let attack of po) {\\r\\n            if (attack[\\\"check\\\"](target)) {\\r\\n                attack[\\\"func\\\"](target.hostname)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    ns.nuke(target.hostname)\\r\\n\\r\\n    // if (!target.backdoorInstalled) {\\r\\n    //     await ns.singularity.installBackdoor(target.hostname)\\r\\n    // }\\r\\n}\",\"filename\":\"/scripts/backdoor-worm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///272e9615-0f07-459d-b619-5947ac1c2e42\",\"moduleSequenceNumber\":11725},{\"filename\":\"/scripts/backdoor-worm.js\",\"url\":\"blob:file:///14d3a56c-9271-46a4-a469-15c5dda5396f\",\"moduleSequenceNumber\":12976}],\"dependents\":[],\"ramUsage\":4.8,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":12976,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":1725000,\"moneyMax\":6468750,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"84.7.0.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",9],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.41,\"pid\":396,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":9,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d652bed9-2ac3-4a9b-b185-cf1d4df308ce\",\"moduleSequenceNumber\":12008}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = server.moneyAvailable - (server.moneyAvailable * 0.01)\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"joesguns\",\"moduleSequenceNumber\":11735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///27c6b505-f14a-42d5-94e7-06fb04aacb1b\",\"moduleSequenceNumber\":12519}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":12519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d652bed9-2ac3-4a9b-b185-cf1d4df308ce\",\"moduleSequenceNumber\":12008}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":12008,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///cbf3e02c-6b93-43d0-b410-a7ccf907dbdf\",\"moduleSequenceNumber\":11831}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":11831,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"joesguns\",\"moduleSequenceNumber\":11739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":9.10999999999999,\"minDifficulty\":5,\"moneyAvailable\":2617521.891364034,\"moneyMax\":7031250,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"73.5.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",18],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.41,\"pid\":391,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":18,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///ec1fe4d9-bbf5-4160-aea7-42384ea90af1\",\"moduleSequenceNumber\":13413}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = server.moneyAvailable - (server.moneyAvailable * 0.01)\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"zer0\",\"moduleSequenceNumber\":13284,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///6f037a94-32e7-42f7-960b-62f3bfa68093\",\"moduleSequenceNumber\":13323}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":13323,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///ec1fe4d9-bbf5-4160-aea7-42384ea90af1\",\"moduleSequenceNumber\":13413}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":13413,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":13287,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zer0\",\"moduleSequenceNumber\":13288,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5625000,\"moneyMax\":21093750,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"69.7.2.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",9],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.41,\"pid\":399,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":9,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///212c1521-2ffc-49ca-b77b-7c97f8abc85d\",\"moduleSequenceNumber\":12011}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = server.moneyAvailable - (server.moneyAvailable * 0.01)\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"nectar-net\",\"moduleSequenceNumber\":11765,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///d993003b-b1d4-4210-a76f-14a57ca40ffd\",\"moduleSequenceNumber\":12522}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":12522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///212c1521-2ffc-49ca-b77b-7c97f8abc85d\",\"moduleSequenceNumber\":12011}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":12011,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///9e25825a-afd8-48e0-a684-6e925b00ba23\",\"moduleSequenceNumber\":11834}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":11834,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":11769,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"joesguns\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2062500,\"moneyMax\":7734375,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"6.7.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",18],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.41,\"pid\":393,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///c130e3be-b8a6-43d7-970e-828d6e4a4718\",\"moduleSequenceNumber\":13415}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = server.moneyAvailable - (server.moneyAvailable * 0.01)\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"neo-net\",\"moduleSequenceNumber\":13314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///e63734da-e020-4902-aff9-8d0b9339f279\",\"moduleSequenceNumber\":13325}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":13325,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///c130e3be-b8a6-43d7-970e-828d6e4a4718\",\"moduleSequenceNumber\":13415}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":13415,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":13317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"neo-net\",\"moduleSequenceNumber\":13318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":3750000,\"moneyMax\":14062500,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"24.9.1.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"computek\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":33750000,\"moneyMax\":126562500,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"0.9.0.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",9],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.41,\"pid\":397,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":9,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///a98d0993-c638-4a2e-8510-7b840a6edf36\",\"moduleSequenceNumber\":12009}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = server.moneyAvailable - (server.moneyAvailable * 0.01)\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":11745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///7703c547-0af7-4725-a7ec-59c22267729f\",\"moduleSequenceNumber\":12520}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":12520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///a98d0993-c638-4a2e-8510-7b840a6edf36\",\"moduleSequenceNumber\":12009}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":12009,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///d221e4cf-f192-4d7c-8af1-97ec161151cc\",\"moduleSequenceNumber\":11832}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":11832,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":11749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2250000,\"moneyMax\":8437500,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"18.9.7.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",9],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.41,\"pid\":398,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":9,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///484d23db-20cb-433e-901d-59b7476e8e41\",\"moduleSequenceNumber\":12010}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = server.moneyAvailable - (server.moneyAvailable * 0.01)\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":11755,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///807bc3aa-5784-41a8-8844-92a93f76de33\",\"moduleSequenceNumber\":12521}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":12521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///484d23db-20cb-433e-901d-59b7476e8e41\",\"moduleSequenceNumber\":12010}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":12010,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///93a2bb18-478b-4a35-92d1-7eb6ae5c10db\",\"moduleSequenceNumber\":11833}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":11833,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":11759,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":11250000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"95.3.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"max-hardware\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":18000000,\"moneyMax\":67500000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"70.4.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",18],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.41,\"pid\":392,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":18,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///31dfdf69-b0d5-463d-be1b-20c635131331\",\"moduleSequenceNumber\":13414}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = server.moneyAvailable - (server.moneyAvailable * 0.01)\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"max-hardware\",\"moduleSequenceNumber\":13294,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///a650305f-4c53-42a8-a01c-dcc1297f5414\",\"moduleSequenceNumber\":13324}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":13324,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///31dfdf69-b0d5-463d-be1b-20c635131331\",\"moduleSequenceNumber\":13414}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":13414,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":13297,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":13298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"neo-net\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":7500000,\"moneyMax\":28125000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"39.9.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45501887.25,\"moneyMax\":170632077.1875,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":201,\"serverGrowth\":31}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"90.6.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":44293405.5,\"moneyMax\":166100270.625,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":240,\"serverGrowth\":33}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"48.7.7.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",18],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.41,\"pid\":390,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":18,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///f7c3ceec-b2bf-4462-a64c-9eb41dab44c6\",\"moduleSequenceNumber\":13412}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = server.moneyAvailable - (server.moneyAvailable * 0.01)\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"iron-gym\",\"moduleSequenceNumber\":13274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///83a4f92d-7bea-4c54-93df-d8ef3aa8d047\",\"moduleSequenceNumber\":13322}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":13322,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///f7c3ceec-b2bf-4462-a64c-9eb41dab44c6\",\"moduleSequenceNumber\":13412}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":13412,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":13277,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":13278,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    filter_adminRights,\\r\\n    filter_canNuke,\\r\\n    filter_minRam,\\r\\n    filter_hostname,\\r\\n    filter_playerServer,\\r\\n    getAllServers,\\r\\n    applyFilter,\\r\\n    deployPayload,\\r\\n    portOpener,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var noAdminFilter = filter_adminRights(false)\\r\\n    var hasAdminFilter = filter_adminRights(true)\\r\\n    var canNukeFilter = filter_canNuke(ns)\\r\\n    var ramFilter = filter_minRam(4)\\r\\n    var nameFilter = filter_hostname(ns, \\\"darkweb|home\\\")\\r\\n    var playerServerFilter = filter_playerServer()\\r\\n\\r\\n    var targets = getAllServers(ns)\\r\\n    targets = applyFilter(targets, [noAdminFilter, canNukeFilter], false, false)\\r\\n    targets = applyFilter(targets, [nameFilter, playerServerFilter])\\r\\n    for (const t in targets) {\\r\\n        ns.printf(\\\"Nuking Target: %s\\\", targets[t].hostname)\\r\\n        attack(ns, targets[t])\\r\\n    }\\r\\n\\r\\n    targets = getAllServers(ns)\\r\\n    targets = applyFilter(targets, [hasAdminFilter, ramFilter], false, false)\\r\\n    for (const t in targets) {\\r\\n        ns.printf(\\\"Deploying payload on Target: %s\\\", targets[t].hostname)\\r\\n        await deployPayload(ns, t)\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function attack(ns, target) {\\r\\n    var po = portOpener(ns)\\r\\n    if (target.openPortCount < target.numOpenPortsRequired) {\\r\\n        for (let attack of po) {\\r\\n            if (attack[\\\"check\\\"](target)) {\\r\\n                attack[\\\"func\\\"](target.hostname)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    ns.nuke(target.hostname)\\r\\n\\r\\n    // if (!target.backdoorInstalled) {\\r\\n    //     await ns.singularity.installBackdoor(target.hostname)\\r\\n    // }\\r\\n}\",\"filename\":\"/scripts/backdoor-worm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///cff24bed-89e3-49ae-91c0-641887de52c9\",\"moduleSequenceNumber\":13274},{\"filename\":\"/scripts/backdoor-worm.js\",\"url\":\"blob:file:///b484f032-6f08-412a-aaa3-fa84fdcfcc37\",\"moduleSequenceNumber\":13321}],\"dependents\":[],\"ramUsage\":4.8,\"server\":\"iron-gym\",\"moduleSequenceNumber\":13321,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":15000000,\"moneyMax\":56250000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"69.2.5.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":187500000,\"moneyMax\":703125000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":510,\"serverGrowth\":37}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"34.1.0.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":675000000,\"moneyMax\":2531250000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1040,\"serverGrowth\":56}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"3.3.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":337500000,\"moneyMax\":1265625000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":779,\"serverGrowth\":54}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"57.3.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":516,\"serverGrowth\":1}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"1.8.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":346,\"serverGrowth\":1}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"49.0.3.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":202,\"serverGrowth\":1}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"73.6.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":522,\"serverGrowth\":1}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"90.0.6.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",2],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.41,\"pid\":389,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":2,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///f893d5fc-d738-42a8-ae29-44a163f6768a\",\"moduleSequenceNumber\":13416}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",2],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.41,\"pid\":400,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":2,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///f893d5fc-d738-42a8-ae29-44a163f6768a\",\"moduleSequenceNumber\":13416}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = server.moneyAvailable - (server.moneyAvailable * 0.01)\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"CSEC\",\"moduleSequenceNumber\":13304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///940e0f92-6a7c-4f1d-8274-05f1c46ea95e\",\"moduleSequenceNumber\":13326}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":13326,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///f893d5fc-d738-42a8-ae29-44a163f6768a\",\"moduleSequenceNumber\":13416}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":13416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":13307,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"CSEC\",\"moduleSequenceNumber\":13308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":60,\"serverGrowth\":1}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"83.6.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"37.5.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":9000,\"serverGrowth\":1}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"50.0.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1.4666174358974822,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":12.953333333333344}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":115.67276102564084}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":240,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"one-dark\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#98C379\",\"primary\":\"#98C379\",\"primarydark\":\"#98C379\",\"successlight\":\"#98C379\",\"success\":\"#98C379\",\"successdark\":\"#98C379\",\"errorlight\":\"#E06C75\",\"error\":\"#BE5046\",\"errordark\":\"#BE5046\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E5C07B\",\"warning\":\"#E5C07B\",\"warningdark\":\"#D19A66\",\"infolight\":\"#61AFEF\",\"info\":\"#61AFEF\",\"infodark\":\"#61AFEF\",\"welllight\":\"#4B5263\",\"well\":\"#282C34\",\"white\":\"#ABB2BF\",\"black\":\"#282C34\",\"hp\":\"#E06C75\",\"money\":\"#E5C07B\",\"hack\":\"#98C379\",\"combat\":\"#ABB2BF\",\"cha\":\"#C678DD\",\"int\":\"#61AFEF\",\"rep\":\"#ABB2BF\",\"disabled\":\"#56B6C2\",\"backgroundprimary\":\"#282C34\",\"backgroundsecondary\":\"#21252B\",\"button\":\"#4B5263\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-47,\"y\":14,\"opened\":true},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}}}","VersionSave":"23","AllGangsSave":"","LastExportBonus":"1660861433807","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}