{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":200,\"max\":200},\"skills\":{\"hacking\":3272,\"strength\":1844,\"defense\":1900,\"dexterity\":1445,\"agility\":837,\"charisma\":332,\"intelligence\":0},\"exp\":{\"hacking\":2681883098.908104,\"strength\":74891.83269370321,\"defense\":74891.83269370321,\"dexterity\":86107.00759775896,\"agility\":74891.83269370321,\"charisma\":33573.872205829255,\"intelligence\":0},\"mults\":{\"hacking_chance\":2.3965438495503615,\"hacking_speed\":2.34447058798428,\"hacking_money\":7.775025264116275,\"hacking_grow\":3.633648797038419,\"hacking\":6.6144912391055195,\"strength\":11.572938731213284,\"defense\":11.921288057570875,\"dexterity\":8.825695528157365,\"agility\":5.2542055801263,\"charisma\":2.4811670243088777,\"hacking_exp\":10.218207050513662,\"strength_exp\":5.547398181755201,\"defense_exp\":5.547398181755201,\"dexterity_exp\":6.37950790901848,\"agility_exp\":5.547398181755201,\"charisma_exp\":2.491012925198992,\"company_rep\":3.437597836774609,\"faction_rep\":2.6042407854353096,\"crime_money\":5.059870004310453,\"crime_success\":2.7076227447815135,\"hacknet_node_money\":4.189441335179709,\"hacknet_node_purchase_cost\":0.46053914218785325,\"hacknet_node_ram_cost\":0.6020119505723572,\"hacknet_node_core_cost\":0.6020119505723572,\"hacknet_node_level_cost\":0.5117101579865037,\"work_money\":3.246945510203884,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"money\":43723076194020.734,\"city\":\"Aevum\",\"location\":\"NetLink Technologies\",\"jobs\":{},\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-1048576\",\"pserv-1048576-0\",\"pserv-1048576-1\",\"pserv-1048576-2\",\"pserv-1048576-3\",\"pserv-1048576-4\",\"pserv-1048576-5\",\"pserv-1048576-6\",\"pserv-1048576-7\",\"pserv-1048576-8\",\"pserv-1048576-9\",\"pserv-1048576-10\",\"pserv-1048576-11\",\"pserv-1048576-12\",\"pserv-1048576-13\",\"pserv-1048576-14\",\"pserv-1048576-15\",\"pserv-1048576-16\",\"pserv-1048576-17\",\"pserv-1048576-18\",\"pserv-1048576-19\",\"pserv-1048576-20\",\"pserv-1048576-21\",\"pserv-1048576-22\",\"pserv-1048576-23\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":38422.66191328613,\"onlineTimeSeconds\":3792.599999998741,\"ram\":64,\"totalMoneyGenerated\":145623890.2890532,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":38422.66191328613,\"onlineTimeSeconds\":3792.599999998741,\"ram\":64,\"totalMoneyGenerated\":145254648.76152658,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":38422.66191328613,\"onlineTimeSeconds\":3792.599999998741,\"ram\":64,\"totalMoneyGenerated\":145253770.23567858,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":38422.66191328613,\"onlineTimeSeconds\":3792.599999998741,\"ram\":64,\"totalMoneyGenerated\":145253770.23567858,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":38422.66191328613,\"onlineTimeSeconds\":3792.599999998741,\"ram\":64,\"totalMoneyGenerated\":145253770.23567858,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":38422.66191328613,\"onlineTimeSeconds\":3792.599999998741,\"ram\":64,\"totalMoneyGenerated\":145246965.4859763,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":38422.66191328613,\"onlineTimeSeconds\":3792.599999998741,\"ram\":64,\"totalMoneyGenerated\":145246086.9601283,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":38422.66191328613,\"onlineTimeSeconds\":3792.599999998741,\"ram\":64,\"totalMoneyGenerated\":145246086.9601283,\"name\":\"hacknet-node-7\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Daedalus\",\"BitRunners\",\"The Black Hand\",\"NiteSec\",\"Speakers for the Dead\",\"The Dark Army\",\"The Syndicate\",\"Tetrads\",\"Slum Snakes\",\"Netburners\",\"Tian Di Hui\",\"CyberSec\"],\"factionInvitations\":[\"Aevum\",\"Chongqing\"],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"Synfibril Muscle\"}],\"augmentations\":[{\"level\":51,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"INFRARET Enhancement\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"The Shadow's Simulacrum\"},{\"level\":1,\"name\":\"BrachiBlades\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"HemoRecirculator\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"Augmented Targeting III\"},{\"level\":1,\"name\":\"DermaForce Particle Barrier\"},{\"level\":1,\"name\":\"Combat Rib III\"},{\"level\":1,\"name\":\"Bionic Spine\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Unstable Circadian Modulator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Graphene BrachiBlades Upgrade\"},{\"level\":1,\"name\":\"Bionic Legs\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Bionic Arms\"}],\"sourceFiles\":[],\"numPeopleKilled\":31,\"karma\":-634.75,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"sleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"entropy\":0,\"lastUpdate\":1660861433633,\"lastSave\":1660861406871,\"totalPlaytime\":1037112600,\"playtimeSinceLastAug\":7797200,\"playtimeSinceLastBitnode\":1037112600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":7058518.656013087,\"gang\":0,\"hacking\":45470964240603.43,\"hacknet\":1162378989.1618276,\"hacknet_expenses\":-1947684014.4861336,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":43723075194020.734,\"work\":0,\"servers\":-1441792000000,\"other\":-300306300000,\"augmentations\":-5012500000}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-1000,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":45900774.6259831,\"gang\":0,\"hacking\":166517015191600.06,\"hacknet\":36229053482.21823,\"hacknet_expenses\":-21149098912.338486,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-31200000000,\"total\":103651830321748.5,\"work\":18195738.243698753,\"servers\":-47234699529464.39,\"other\":-713730699569.9985,\"augmentations\":-14900698690687.777}},\"scriptProdSinceLastAug\":45433821852696.09,\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1659824867829},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1659825047835},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1659979761452},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1660064291656},{\"ID\":\"FROZE\",\"unlockedOn\":1660070224596},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1660073344593},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1660074763681},{\"ID\":\"TOR\",\"unlockedOn\":1660156303324},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1660156543333},{\"ID\":\"NITESEC\",\"unlockedOn\":1660254508514},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1660254628533},{\"ID\":\"TRAVEL\",\"unlockedOn\":1660255468524},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1660485627110},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1660485627120},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1660485627122},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1660512825233},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1660566971219},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1660650992951},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1660678330325},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1660724917416},{\"ID\":\"4S\",\"unlockedOn\":1660751408262},{\"ID\":\"DONATION\",\"unlockedOn\":1660820248649},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1660847929353}],\"terminalCommandHistory\":[\"buy ServerProfiler.exe\",\"home\",\"./scripts/backdoor-worm.js\",\"ls\",\"./scripts/compare-servers.js hackingLevel\",\"./scripts/compare-servers.js hackingLevel hostname\",\"./scripts/add-targets.js 4sigma aerocorp aevum-police alpha-ent applied-energetics b-and-a blade catalyst clarkinc computek crush-fitness defcomm deltaone ecorp foodnstuff fulcrumassets fulcrumtech galactic-cyber global-pharm harakiri-sushi helios hong-fang-tea icarus infocomm iron-gym joesguns johnson-ortho kuai-gong lexo-corp max-hardware megacorp microdyne millenium-fitness n00dles nectar-net neo-net netlink nova-med nwo omega-net omnia omnitek phantasy powerhouse-fitness rho-construction rothman-uni sigma-cosmetics silver-helix snap-fitness solaris stormtech summit-uni syscore taiyang-digital the-hub titan-labs unitalife univ-energy vitalife zb-def zb-institute zer0 zeus-med\",\"scan-analyze 2\",\"backdoor\",\"home\",\"scan-analyze 5\",\"backdoor\",\"home\",\"scan-analyze 10\",\"backdoor\",\"home\",\"./scratch/test.js\",\"./scripts/multi-target-scheduler.js\",\"./scripts/compare-servers.js hackingLevel\",\"./scripts/add-targets.js 4sigma aerocorp aevum-police alpha-ent applied-energetics b-and-a blade catalyst clarkinc computek crush-fitness defcomm deltaone ecorp foodnstuff fulcrumassets fulcrumtech galactic-cyber global-pharm harakiri-sushi helios hong-fang-tea icarus infocomm iron-gym joesguns johnson-ortho kuai-gong lexo-corp max-hardware megacorp microdyne millenium-fitness n00dles nectar-net neo-net netlink nova-med nwo omega-net omnia omnitek phantasy powerhouse-fitness rho-construction rothman-uni sigma-cosmetics silver-helix snap-fitness solaris stormtech summit-uni syscore taiyang-digital the-hub titan-labs unitalife univ-energy vitalife zb-def zb-institute zer0 zeus-med\",\"./scripts/analyze-server.js sigma-cosmetics\",\"./scripts/setup-upgrade-infra.js\",\"scan\",\"./scripts/boost-faction-reputation.js\",\"./scripts/multi-target-scheduler.js\",\"./scripts/add-targets.js 4sigma aerocorp aevum-police alpha-ent applied-energetics b-and-a blade catalyst clarkinc computek crush-fitness defcomm deltaone ecorp foodnstuff fulcrumassets fulcrumtech galactic-cyber global-pharm harakiri-sushi helios hong-fang-tea icarus infocomm iron-gym joesguns johnson-ortho kuai-gong lexo-corp max-hardware megacorp microdyne millenium-fitness n00dles nectar-net neo-net netlink nova-med nwo omega-net omnia omnitek phantasy powerhouse-fitness rho-construction rothman-uni sigma-cosmetics silver-helix snap-fitness solaris stormtech summit-uni syscore taiyang-digital the-hub titan-labs unitalife univ-energy vitalife zb-def zb-institute zer0 zeus-med\",\"./scripts/multi-target-scheduler.js\",\"./scripts/add-targets.js 4sigma aerocorp aevum-police alpha-ent applied-energetics b-and-a blade catalyst clarkinc computek crush-fitness defcomm deltaone ecorp foodnstuff fulcrumassets fulcrumtech galactic-cyber global-pharm harakiri-sushi helios hong-fang-tea icarus infocomm iron-gym joesguns johnson-ortho kuai-gong lexo-corp max-hardware megacorp microdyne millenium-fitness n00dles nectar-net neo-net netlink nova-med nwo omega-net omnia omnitek phantasy powerhouse-fitness rho-construction rothman-uni sigma-cosmetics silver-helix snap-fitness solaris stormtech summit-uni syscore taiyang-digital the-hub titan-labs unitalife univ-energy vitalife zb-def zb-institute zer0 zeus-med\",\"./scripts/multi-target-scheduler.js\",\"./scripts/add-targets.js 4sigma aerocorp aevum-police alpha-ent applied-energetics b-and-a blade catalyst clarkinc computek crush-fitness defcomm deltaone ecorp foodnstuff fulcrumassets fulcrumtech galactic-cyber global-pharm harakiri-sushi helios hong-fang-tea icarus infocomm iron-gym joesguns johnson-ortho kuai-gong lexo-corp max-hardware megacorp microdyne millenium-fitness n00dles nectar-net neo-net netlink nova-med nwo omega-net omnia omnitek phantasy powerhouse-fitness rho-construction rothman-uni sigma-cosmetics silver-helix snap-fitness solaris stormtech summit-uni syscore taiyang-digital the-hub titan-labs unitalife univ-energy vitalife zb-def zb-institute zer0 zeus-med\",\"./scripts/multi-target-scheduler.js\",\"./scripts/add-targets.js 4sigma aerocorp aevum-police alpha-ent applied-energetics b-and-a blade catalyst clarkinc computek crush-fitness defcomm deltaone ecorp foodnstuff fulcrumassets fulcrumtech galactic-cyber global-pharm harakiri-sushi helios hong-fang-tea icarus infocomm iron-gym joesguns johnson-ortho kuai-gong lexo-corp max-hardware megacorp microdyne millenium-fitness n00dles nectar-net neo-net netlink nova-med nwo omega-net omnia omnitek phantasy powerhouse-fitness rho-construction rothman-uni sigma-cosmetics silver-helix snap-fitness solaris stormtech summit-uni syscore taiyang-digital the-hub titan-labs unitalife univ-energy vitalife zb-def zb-institute zer0 zeus-med\",\"./scripts/boost-faction-reputation.js\",\"./scripts/analyze-server.js sigma-cosmetics\",\"./scripts/remove-targets.js sigma-cosmetics\",\"./scratch/test.js\",\"./scripts/analyze-server.js sigma-cosmetics\",\"./scripts/remove-targets.js sigma-cosmetics -t 32\",\"./scratch/test.js -t 32\",\"connect sigma-cosmetics\",\"weaken\",\"grow\",\"home\",\"./scratch/test.js\",\"./scripts/add-targets.js sigma-cosmetics\",\"./scripts/remove-targets.js sigma-cosmetics\",\"./scripts/analyze-server.js sigma-cosmetics\",\"./scratch/test.js\",\"./scripts/multi-target-scheduler.js\",\"./scripts/add-targets.js 4sigma aerocorp aevum-police alpha-ent applied-energetics b-and-a blade catalyst clarkinc computek crush-fitness defcomm deltaone ecorp foodnstuff fulcrumassets fulcrumtech galactic-cyber global-pharm harakiri-sushi helios hong-fang-tea icarus infocomm iron-gym joesguns johnson-ortho kuai-gong lexo-corp max-hardware megacorp microdyne millenium-fitness n00dles nectar-net neo-net netlink nova-med nwo omega-net omnia omnitek phantasy powerhouse-fitness rho-construction rothman-uni sigma-cosmetics silver-helix snap-fitness solaris stormtech summit-uni syscore taiyang-digital the-hub titan-labs unitalife univ-energy vitalife zb-def zb-institute zer0 zeus-med\"],\"focus\":false,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":18740,\"factionWorkType\":\"HACKING\",\"factionName\":\"Daedalus\"}},\"identifier\":\"15ded30ed8298a\",\"hacking\":904,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":2,\"agility\":1,\"charisma\":2,\"intelligence\":0,\"hacking_chance_mult\":1.7525293309892913,\"hacking_speed_mult\":1.7095849813898478,\"hacking_money_mult\":2.2850439122876245,\"hacking_grow_mult\":1.4450870591542289,\"hacking_exp\":30355498.266678177,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":2.5748197832152275,\"strength_mult\":1.9942201416328356,\"defense_mult\":1.7341044709850746,\"dexterity_mult\":2.3033242635859255,\"agility_mult\":1.5173414121119404,\"charisma_mult\":2.055728827218677,\"hacking_exp_mult\":4.759051815945787,\"strength_exp_mult\":1.8280351298300996,\"defense_exp_mult\":1.8280351298300996,\"dexterity_exp_mult\":1.8280351298300996,\"agility_exp_mult\":1.8280351298300996,\"charisma_exp_mult\":1.9700734594178986,\"company_rep_mult\":2.600496966431626,\"faction_rep_mult\":1.9700734594178984,\"companyName\":\"\",\"crime_money_mult\":1.5573703236505125,\"crime_success_mult\":1.5573703236505125,\"isWorking\":true,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"BitRunners\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.713857772391868,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":2.037031887791903,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":4376.662002534296,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":12187.90429444565,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":400,\"graftAugmentationName\":\"\",\"timeWorkedGraftAugmentation\":0,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":1226200,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":2.8247116745287713,\"hacknet_node_money_mult\":3.6446450400987604,\"hacknet_node_purchase_cost_mult\":0.5293798703364855,\"hacknet_node_ram_cost_mult\":0.6919998305052099,\"hacknet_node_core_cost_mult\":0.6919998305052099,\"hacknet_node_level_cost_mult\":0.5881998559294284,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":6,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"19.7.1.8\",\"isConnectedTo\":true,\"maxRam\":262144,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"fl1ght.exe\",\"HTTPWorm.exe\",\"DeepscanV2.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\"],\"ramUsed\":88781.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/scripts/multi-target-scheduler.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":36744860.56865689,\"onlineMoneyMade\":132439691642,\"onlineRunningTime\":130.8100000000011,\"pid\":1,\"ramUsage\":8.65,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///bf3c5803-3cf1-4ae8-9bc8-7bea774a4f97\",\"moduleSequenceNumber\":364},{\"filename\":\"/scripts/multi-target-scheduler.js\",\"url\":\"blob:file:///4dd0465d-6cea-439a-ae4e-c16c0f4a26a7\",\"moduleSequenceNumber\":1084}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",242],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.61000000000104,\"pid\":3,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":242,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f8a62b7a-1061-48a8-9edf-d5a262f1cda5\",\"moduleSequenceNumber\":1127}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",158],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.61000000000104,\"pid\":4,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":158,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f8a62b7a-1061-48a8-9edf-d5a262f1cda5\",\"moduleSequenceNumber\":1127}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",421],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.61000000000104,\"pid\":5,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":421,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f8a62b7a-1061-48a8-9edf-d5a262f1cda5\",\"moduleSequenceNumber\":1127}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",235],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.61000000000104,\"pid\":7,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":235,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f8a62b7a-1061-48a8-9edf-d5a262f1cda5\",\"moduleSequenceNumber\":1127}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",5702],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.61000000000104,\"pid\":8,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5702,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///3e4cf4dd-7f3f-4a8e-b1e1-89917777f430\",\"moduleSequenceNumber\":1135}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",109],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.61000000000104,\"pid\":9,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":109,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f8a62b7a-1061-48a8-9edf-d5a262f1cda5\",\"moduleSequenceNumber\":1127}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",375],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.61000000000104,\"pid\":11,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":375,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f8a62b7a-1061-48a8-9edf-d5a262f1cda5\",\"moduleSequenceNumber\":1127}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\",131],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.61000000000104,\"pid\":14,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":131,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f8a62b7a-1061-48a8-9edf-d5a262f1cda5\",\"moduleSequenceNumber\":1127}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",397],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.61000000000104,\"pid\":15,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":397,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f8a62b7a-1061-48a8-9edf-d5a262f1cda5\",\"moduleSequenceNumber\":1127}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",83],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.61000000000104,\"pid\":16,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":83,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f8a62b7a-1061-48a8-9edf-d5a262f1cda5\",\"moduleSequenceNumber\":1127}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\",1021],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.61000000000104,\"pid\":18,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1021,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f8a62b7a-1061-48a8-9edf-d5a262f1cda5\",\"moduleSequenceNumber\":1127}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",1000],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.61000000000104,\"pid\":19,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1000,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///3e4cf4dd-7f3f-4a8e-b1e1-89917777f430\",\"moduleSequenceNumber\":1135}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\",1000],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.61000000000104,\"pid\":23,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1000,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///3e4cf4dd-7f3f-4a8e-b1e1-89917777f430\",\"moduleSequenceNumber\":1135}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\",1233],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.61000000000104,\"pid\":25,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1233,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///3e4cf4dd-7f3f-4a8e-b1e1-89917777f430\",\"moduleSequenceNumber\":1135}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\",1000],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.61000000000104,\"pid\":26,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1000,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///3e4cf4dd-7f3f-4a8e-b1e1-89917777f430\",\"moduleSequenceNumber\":1135}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",91],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.61000000000104,\"pid\":30,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":91,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f8a62b7a-1061-48a8-9edf-d5a262f1cda5\",\"moduleSequenceNumber\":1127}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",77],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.61000000000104,\"pid\":33,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":77,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f8a62b7a-1061-48a8-9edf-d5a262f1cda5\",\"moduleSequenceNumber\":1127}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",390],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.61000000000104,\"pid\":39,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":390,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f8a62b7a-1061-48a8-9edf-d5a262f1cda5\",\"moduleSequenceNumber\":1127}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",6696],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.61000000000104,\"pid\":41,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":6696,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///3e4cf4dd-7f3f-4a8e-b1e1-89917777f430\",\"moduleSequenceNumber\":1135}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\",321],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.61000000000104,\"pid\":43,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":321,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f8a62b7a-1061-48a8-9edf-d5a262f1cda5\",\"moduleSequenceNumber\":1127}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1000],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.61000000000104,\"pid\":44,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1000,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///3e4cf4dd-7f3f-4a8e-b1e1-89917777f430\",\"moduleSequenceNumber\":1135}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",315],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.61000000000104,\"pid\":46,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":315,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f8a62b7a-1061-48a8-9edf-d5a262f1cda5\",\"moduleSequenceNumber\":1127}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\",282],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.61000000000104,\"pid\":51,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":282,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f8a62b7a-1061-48a8-9edf-d5a262f1cda5\",\"moduleSequenceNumber\":1127}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",87],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.61000000000104,\"pid\":52,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":87,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f8a62b7a-1061-48a8-9edf-d5a262f1cda5\",\"moduleSequenceNumber\":1127}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\",222],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.01000000000103,\"pid\":55,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":222,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///20c0651d-f4ac-449e-a5e9-3e0ce007ec0a\",\"moduleSequenceNumber\":1135}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\",294],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.01000000000103,\"pid\":58,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":294,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f0130c54-8937-4b7f-8a86-e11ba5cc7ed0\",\"moduleSequenceNumber\":1137}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\",104],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.01000000000103,\"pid\":60,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":104,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f0130c54-8937-4b7f-8a86-e11ba5cc7ed0\",\"moduleSequenceNumber\":1137}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",276],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.01000000000103,\"pid\":61,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":276,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f0130c54-8937-4b7f-8a86-e11ba5cc7ed0\",\"moduleSequenceNumber\":1137}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",1539],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.01000000000103,\"pid\":62,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1539,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///20c0651d-f4ac-449e-a5e9-3e0ce007ec0a\",\"moduleSequenceNumber\":1135}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\",90],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.01000000000103,\"pid\":63,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f0130c54-8937-4b7f-8a86-e11ba5cc7ed0\",\"moduleSequenceNumber\":1137}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",221],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.01000000000103,\"pid\":64,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":221,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f0130c54-8937-4b7f-8a86-e11ba5cc7ed0\",\"moduleSequenceNumber\":1137}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",252],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.01000000000103,\"pid\":65,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":252,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f0130c54-8937-4b7f-8a86-e11ba5cc7ed0\",\"moduleSequenceNumber\":1137}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",929],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":78.81000000000058,\"pid\":255,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":929,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///20c0651d-f4ac-449e-a5e9-3e0ce007ec0a\",\"moduleSequenceNumber\":1135}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",964],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":76.81000000000056,\"pid\":269,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":964,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///20c0651d-f4ac-449e-a5e9-3e0ce007ec0a\",\"moduleSequenceNumber\":1135}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"computek\",326],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.81000000000041,\"pid\":334,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":326,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f0130c54-8937-4b7f-8a86-e11ba5cc7ed0\",\"moduleSequenceNumber\":1137}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",244],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":65.21000000000039,\"pid\":349,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":244,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f0130c54-8937-4b7f-8a86-e11ba5cc7ed0\",\"moduleSequenceNumber\":1137}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",288],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.21000000000009,\"pid\":485,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":288,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f0130c54-8937-4b7f-8a86-e11ba5cc7ed0\",\"moduleSequenceNumber\":1137}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",113],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"pid\":655,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":113,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f0130c54-8937-4b7f-8a86-e11ba5cc7ed0\",\"moduleSequenceNumber\":1137}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",750],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"pid\":656,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":750,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///20c0651d-f4ac-449e-a5e9-3e0ce007ec0a\",\"moduleSequenceNumber\":1135}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",54],\"dataMap\":{},\"filename\":\"/payload/hack-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.20999999999997,\"pid\":675,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":54,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///d61171af-9952-4640-823d-8d979fca22ad\",\"moduleSequenceNumber\":1134}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\",1566],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999998,\"pid\":733,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1566,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///20c0651d-f4ac-449e-a5e9-3e0ce007ec0a\",\"moduleSequenceNumber\":1135}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",102],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.21,\"pid\":744,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":102,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f0130c54-8937-4b7f-8a86-e11ba5cc7ed0\",\"moduleSequenceNumber\":1137}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",156],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.810000000000005,\"pid\":752,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":156,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f0130c54-8937-4b7f-8a86-e11ba5cc7ed0\",\"moduleSequenceNumber\":1137}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",115],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.010000000000004,\"pid\":760,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":115,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f0130c54-8937-4b7f-8a86-e11ba5cc7ed0\",\"moduleSequenceNumber\":1137}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",2165],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"pid\":762,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":2165,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///20c0651d-f4ac-449e-a5e9-3e0ce007ec0a\",\"moduleSequenceNumber\":1135}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",769],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"pid\":779,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":769,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///20c0651d-f4ac-449e-a5e9-3e0ce007ec0a\",\"moduleSequenceNumber\":1135}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",82],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.010000000000002,\"pid\":782,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":82,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f0130c54-8937-4b7f-8a86-e11ba5cc7ed0\",\"moduleSequenceNumber\":1137}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\",3472],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.610000000000001,\"pid\":783,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":3472,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///20c0651d-f4ac-449e-a5e9-3e0ce007ec0a\",\"moduleSequenceNumber\":1135}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",571],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.410000000000001,\"pid\":787,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":571,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///20c0651d-f4ac-449e-a5e9-3e0ce007ec0a\",\"moduleSequenceNumber\":1135}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",115],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"pid\":793,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":115,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f0130c54-8937-4b7f-8a86-e11ba5cc7ed0\",\"moduleSequenceNumber\":1137}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",37],\"dataMap\":{},\"filename\":\"/payload/hack-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"pid\":795,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":37,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///d61171af-9952-4640-823d-8d979fca22ad\",\"moduleSequenceNumber\":1134}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",1610],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.21,\"pid\":796,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1610,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///20c0651d-f4ac-449e-a5e9-3e0ce007ec0a\",\"moduleSequenceNumber\":1135}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\",47],\"dataMap\":{},\"filename\":\"/payload/hack-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.21,\"pid\":798,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":47,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///d61171af-9952-4640-823d-8d979fca22ad\",\"moduleSequenceNumber\":1134}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",1474],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":803,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1474,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///20c0651d-f4ac-449e-a5e9-3e0ce007ec0a\",\"moduleSequenceNumber\":1135}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",833],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":806,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":833,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///20c0651d-f4ac-449e-a5e9-3e0ce007ec0a\",\"moduleSequenceNumber\":1135}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",1206],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"pid\":807,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1206,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///20c0651d-f4ac-449e-a5e9-3e0ce007ec0a\",\"moduleSequenceNumber\":1135}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",1597],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":808,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1597,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///20c0651d-f4ac-449e-a5e9-3e0ce007ec0a\",\"moduleSequenceNumber\":1135}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",1072],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":810,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1072,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///20c0651d-f4ac-449e-a5e9-3e0ce007ec0a\",\"moduleSequenceNumber\":1135}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",183],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":811,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":183,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f0130c54-8937-4b7f-8a86-e11ba5cc7ed0\",\"moduleSequenceNumber\":1137}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",101],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":813,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":101,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f0130c54-8937-4b7f-8a86-e11ba5cc7ed0\",\"moduleSequenceNumber\":1137}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",8],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":814,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":8,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///20c0651d-f4ac-449e-a5e9-3e0ce007ec0a\",\"moduleSequenceNumber\":1135}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",31],\"dataMap\":{},\"filename\":\"/payload/hack-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":815,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":31,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///d61171af-9952-4640-823d-8d979fca22ad\",\"moduleSequenceNumber\":1134}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",4388],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":816,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":4388,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///20c0651d-f4ac-449e-a5e9-3e0ce007ec0a\",\"moduleSequenceNumber\":1135}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    filter_adminRights,\\r\\n    filter_canNuke,\\r\\n    filter_minRam,\\r\\n    filter_hostname,\\r\\n    filter_playerServer,\\r\\n    getAllServers,\\r\\n    applyFilter,\\r\\n    deployPayload,\\r\\n    portOpener,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var noAdminFilter = filter_adminRights(false)\\r\\n    var hasAdminFilter = filter_adminRights(true)\\r\\n    var canNukeFilter = filter_canNuke(ns)\\r\\n    var ramFilter = filter_minRam(4)\\r\\n    var nameFilter = filter_hostname(ns, \\\"darkweb|home\\\")\\r\\n    var playerServerFilter = filter_playerServer()\\r\\n\\r\\n    var targets = getAllServers(ns)\\r\\n    targets = applyFilter(targets, [noAdminFilter, canNukeFilter], false, false)\\r\\n    targets = applyFilter(targets, [nameFilter, playerServerFilter])\\r\\n    for (const t in targets) {\\r\\n        ns.printf(\\\"Nuking Target: %s\\\", targets[t].hostname)\\r\\n        attack(ns, targets[t])\\r\\n    }\\r\\n\\r\\n    targets = getAllServers(ns)\\r\\n    targets = applyFilter(targets, [hasAdminFilter, ramFilter], false, false)\\r\\n    for (const t in targets) {\\r\\n        ns.printf(\\\"Deploying payload on Target: %s\\\", targets[t].hostname)\\r\\n        await deployPayload(ns, t)\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function attack(ns, target) {\\r\\n    var po = portOpener(ns)\\r\\n    if (target.openPortCount < target.numOpenPortsRequired) {\\r\\n        for (let attack of po) {\\r\\n            if (attack[\\\"check\\\"](target)) {\\r\\n                attack[\\\"func\\\"](target.hostname)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    ns.nuke(target.hostname)\\r\\n\\r\\n    // if (!target.backdoorInstalled) {\\r\\n    //     await ns.singularity.installBackdoor(target.hostname)\\r\\n    // }\\r\\n}\",\"filename\":\"/scripts/backdoor-worm.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///1e9e3340-e461-411c-963a-b0818eef11b9\",\"moduleSequenceNumber\":82183},{\"filename\":\"/scripts/backdoor-worm.js\",\"url\":\"blob:file:///d39559a0-0a44-4baf-965d-7d3e1a292a60\",\"moduleSequenceNumber\":86118}],\"dependents\":[],\"ramUsage\":4.8,\"server\":\"home\",\"moduleSequenceNumber\":362,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n\\tgetHackThreads,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar name = \\\"sigma-cosmetics\\\"\\r\\n\\tvar server = ns.getServer(name)\\r\\n\\tvar money = server.moneyAvailable - (server.moneyAvailable * 0.01)\\r\\n\\tvar t1 = getHackThreads(ns, server)\\r\\n\\tvar t2 = Math.floor(money / (ns.hackAnalyze(name) * server.moneyAvailable))\\r\\n\\t//var threads = ns.hackAnalyzeThreads(name, predicted)\\r\\n\\t//var hacked = await ns.hack(name, { threads: 1 })\\r\\n\\tns.tprintf(\\\"t1: %f, t2: %f\\\", t1, t2)\\r\\n}\\r\\n\",\"filename\":\"/scratch/test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///b05aa204-cc59-4a1c-b1d6-1d473873b650\",\"moduleSequenceNumber\":364},{\"filename\":\"/scratch/test.js\",\"url\":\"blob:file:///3a2c0e57-eda2-4b51-87b1-5c61c02514f8\",\"moduleSequenceNumber\":11351}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":363,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = server.moneyAvailable - (server.moneyAvailable * 0.01)\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"home\",\"moduleSequenceNumber\":1086,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAdditionalServerInfo } from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var server = ns.getServer(name)\\r\\n    var advancedServer = getAdditionalServerInfo(ns, server)\\r\\n\\r\\n    ns.tprint(name)\\r\\n    ns.tprintf(\\\"  Weaken time: %s\\\", ns.tFormat(ns.getWeakenTime(name)))\\r\\n    ns.tprintf(\\\"  Hack time: %s\\\", ns.tFormat(ns.getHackTime(name)))\\r\\n    ns.tprintf(\\\"  Grow time: %s\\\", ns.tFormat(ns.getGrowTime(name)))\\r\\n    ns.tprintf(\\\"  Max money: %s (%f)\\\", ns.nFormat(server.moneyMax, \\\"($0.00a)\\\"), server.moneyMax)\\r\\n    ns.tprintf(\\\"  Money: %s (%f)\\\", ns.nFormat(server.moneyAvailable, \\\"($0.00a)\\\"), server.moneyAvailable)\\r\\n    ns.tprintf(\\\"  Money threshold: %s (%f)\\\", ns.nFormat(advancedServer.moneyThreshold, \\\"($0.00a)\\\"), advancedServer.moneyThreshold)\\r\\n    ns.tprintf(\\\"  Growth rate: %d\\\", server.serverGrowth)\\r\\n    ns.tprintf(\\\"  Security min: %d\\\", server.minDifficulty)\\r\\n    ns.tprintf(\\\"  Security: %d\\\", server.hackDifficulty)\\r\\n    ns.tprintf(\\\"  Security threshold: %d\\\", advancedServer.securityThreshold)\\r\\n    ns.tprintf(\\\"  Weaken threads: %f\\\", advancedServer.weakenThreads)\\r\\n    ns.tprintf(\\\"  Grow threads: %f\\\", advancedServer.growThreads)\\r\\n    ns.tprintf(\\\"  Hack threads: %f\\\", advancedServer.hackThreads)\\r\\n}\\r\\n\\r\\n\",\"filename\":\"/scripts/analyze-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///f68ee8b1-05a5-4850-a00e-7dd9be6c7d92\",\"moduleSequenceNumber\":364},{\"filename\":\"/scripts/analyze-server.js\",\"url\":\"blob:file:///f9f556e7-1777-4153-97a2-2f8dd14ddf94\",\"moduleSequenceNumber\":2651}],\"dependents\":[],\"ramUsage\":6.75,\"server\":\"home\",\"moduleSequenceNumber\":365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { threadsAvailable } from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var threadSize = 0.15 + 1.6\\r\\n    let systemThreads = threadsAvailable(ns, threadSize, false)\\r\\n    let idleThreads = threadsAvailable(ns, threadSize, true)\\r\\n    ns.tprintf(\\\"==> Attack threads: %d (idle); %d (available)\\\", idleThreads, systemThreads)\\r\\n}\",\"filename\":\"/scripts/threads-available.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///7926943b-ab6d-44a3-a32e-f40ab4132812\",\"moduleSequenceNumber\":114289},{\"filename\":\"/scripts/threads-available.js\",\"url\":\"blob:file:///e72c6ba0-9b70-4980-8126-0fe4f12b53f5\",\"moduleSequenceNumber\":114290}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home\",\"moduleSequenceNumber\":366,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///20c0651d-f4ac-449e-a5e9-3e0ce007ec0a\",\"moduleSequenceNumber\":1135}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":1135,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///d61171af-9952-4640-823d-8d979fca22ad\",\"moduleSequenceNumber\":1134}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":1134,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f0130c54-8937-4b7f-8a86-e11ba5cc7ed0\",\"moduleSequenceNumber\":1137}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":1137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    applyFilter,\\r\\n    filter_adminRights,\\r\\n    filter_minRamAvailable,\\r\\n    getAdditionalServerInfo,\\r\\n    getAllServers,\\r\\n    performAttack,\\r\\n    getGrowAttack,\\r\\n    getWeakenAttack,\\r\\n    getHackAttack,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const targetName = ns.args[0]\\r\\n    const growAttack = getGrowAttack(ns)\\r\\n    const weakenAttack = getWeakenAttack(ns)\\r\\n    const hackAttack = getHackAttack(ns)\\r\\n    await ns.sleep(10000)\\r\\n\\r\\n    while (true) {\\r\\n        let target = ns.getServer(targetName)\\r\\n        let addonInfo = getAdditionalServerInfo(ns, target)\\r\\n        let attackers = getAttackers(ns)\\r\\n\\r\\n        if (Object.keys(attackers).length <= 0) {\\r\\n            ns.print(\\\"No attackers available, sleeping 10 seconds before retrying\\\")\\r\\n            await ns.sleep(10000)\\r\\n            continue\\r\\n        }\\r\\n\\r\\n        if (target.hackDifficulty > addonInfo.securityThreshold) {\\r\\n            await ns.sleep(performAttack(ns, weakenAttack, target, attackers))\\r\\n        } else if (target.moneyAvailable < addonInfo.moneyThreshold) {\\r\\n            await ns.sleep(performAttack(ns, growAttack, target, attackers))\\r\\n        } else {\\r\\n            await ns.sleep(performAttack(ns, hackAttack, target, attackers))\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function getAttackers(ns) {\\r\\n    var hasAdminFilter = filter_adminRights(true)\\r\\n    // 1.6G base script size + 0.15G (weaken/grow)\\r\\n    // hack() requires 0.1G so it works everywhere where weaken/grow works\\r\\n    var ramFilter = filter_minRamAvailable(ns.getScriptRam(\\\"/payload/weaken-only.js\\\"))\\r\\n    return applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n}\\r\\n\\r\\n\",\"filename\":\"/scripts/single-target-scheduler.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///e34114a3-4a42-4b8a-9301-6dd5dd6934c8\",\"moduleSequenceNumber\":27714},{\"filename\":\"/scripts/single-target-scheduler.js\",\"url\":\"blob:file:///48284b6f-e9df-4c95-ba95-d2ec4a215546\",\"moduleSequenceNumber\":27715}],\"dependents\":[],\"ramUsage\":8.35,\"server\":\"home\",\"moduleSequenceNumber\":370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    buyServers,\\r\\n    upgradeServers,\\r\\n    buyHacknetNodes,\\r\\n    upgradeHacknetNodes,\\r\\n    getHacknetRamUpgrade,\\r\\n    getHacknetCoreUpgrade,\\r\\n    getHacknetLevelUpgrade,\\r\\n    schedule,\\r\\n    getServersByRam,\\r\\n    maxServerUpgrade,\\r\\n    bulkServerUpgrade,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var expected = 6\\r\\n    var completed = []\\r\\n    // with the ability to set a money limit with\\r\\n    // the money-limit.js script, there is no need\\r\\n    // to limit the size of our compute nodes here\\r\\n    var serverRamLimit = ns.getPurchasedServerMaxRam()\\r\\n    var hacknetNodeLimit = 8\\r\\n    var hacknetRamUpgrade = getHacknetRamUpgrade(ns, hacknetNodeLimit)\\r\\n    var hacknetCoreUpgrade = getHacknetCoreUpgrade(ns, hacknetNodeLimit)\\r\\n    var hacknetLevelUpgrade = getHacknetLevelUpgrade(ns, hacknetNodeLimit)\\r\\n\\r\\n    ns.disableLog(\\\"disableLog\\\")\\r\\n    var markCompleted = (name) => {\\r\\n        if (!completed.includes(name)) {\\r\\n            completed.push(name)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    while (completed.length < expected) {\\r\\n        let maxUpgrade = maxServerUpgrade(ns) > serverRamLimit ? serverRamLimit : maxServerUpgrade(ns)\\r\\n        let serversByRam = getServersByRam(ns)\\r\\n        let serverCount = ns.getPurchasedServers()\\r\\n        let largestServer = serverCount > 0 ? Object.keys(serversByRam).sort()[0] : 0\\r\\n\\r\\n        if ((maxUpgrade > 4) && (maxUpgrade > largestServer)) {\\r\\n            if (await bulkServerUpgrade(ns, maxUpgrade) && maxUpgrade >= serverRamLimit) {\\r\\n                markCompleted(\\\"buyServers\\\")\\r\\n                markCompleted(\\\"upgradeServers\\\")\\r\\n            }\\r\\n\\r\\n        } else {\\r\\n            if (await buyServers(ns)) {\\r\\n                markCompleted(\\\"buyServers\\\")\\r\\n            }\\r\\n            if (await upgradeServers(ns, serverRamLimit)) {\\r\\n                markCompleted(\\\"upgradeServers\\\")\\r\\n            }\\r\\n        }\\r\\n        if (buyHacknetNodes(ns, hacknetNodeLimit)) {\\r\\n            markCompleted(\\\"buyHacknetNodes\\\")\\r\\n        }\\r\\n        if (await upgradeHacknetNodes(ns, hacknetRamUpgrade)) {\\r\\n            markCompleted(\\\"buyHacknetRam\\\")\\r\\n        }\\r\\n        if (await upgradeHacknetNodes(ns, hacknetCoreUpgrade)) {\\r\\n            markCompleted(\\\"buyHacknetCores\\\")\\r\\n        }\\r\\n        if (await upgradeHacknetNodes(ns, hacknetLevelUpgrade)) {\\r\\n            markCompleted(\\\"buyHacknetLevel\\\")\\r\\n        }\\r\\n        if (!await schedule(ns, \\\"/scripts/backdoor-worm.js\\\")) {\\r\\n            ns.print(\\\"Failed to execute backdoor-worm\\\")\\r\\n        }\\r\\n        await ns.sleep(10000)\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/setup-upgrade-infra.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///367acb19-3daf-459f-ada6-0fca4af6c504\",\"moduleSequenceNumber\":82183},{\"filename\":\"/scripts/setup-upgrade-infra.js\",\"url\":\"blob:file:///a54bcb1a-ae6a-4be8-bf77-7db1f5ea9004\",\"moduleSequenceNumber\":85752}],\"dependents\":[],\"ramUsage\":17.55,\"server\":\"home\",\"moduleSequenceNumber\":371,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    filter_adminRights,\\r\\n    filter_minRamAvailable,\\r\\n    getAllServers,\\r\\n    applyFilter,\\r\\n    ramAvail,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var script = \\\"/payload/share.js\\\"\\r\\n    var scriptRam = ns.getScriptRam(script)\\r\\n    var hasAdminFilter = filter_adminRights(true)\\r\\n    var ramFilter = filter_minRamAvailable(scriptRam)\\r\\n    var targets = getAllServers(ns)\\r\\n    targets = applyFilter(targets, [hasAdminFilter, ramFilter], false, false)\\r\\n    for (const t in targets) {\\r\\n        if (targets[t].hostname == \\\"home\\\") {\\r\\n            continue\\r\\n        }\\r\\n        let serverThreads = Math.floor(ramAvail(targets[t]) / scriptRam)\\r\\n        if (ns.exec(script, t, serverThreads) == 0) {\\r\\n            ns.tprintf(\\\"Failed to share() on '%s' with %d threads\\\", t, serverThreads)\\r\\n        }\\r\\n    }\\r\\n    await ns.sleep(2000)\\r\\n    ns.tprintf(\\\"Share power: %f\\\", ns.getSharePower())\\r\\n}\",\"filename\":\"/scripts/boost-faction-reputation.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///b866ce9f-73a0-4f81-83b3-1c9d1a6e9cb0\",\"moduleSequenceNumber\":364},{\"filename\":\"/scripts/boost-faction-reputation.js\",\"url\":\"blob:file:///66d23291-850d-4f97-be3b-94d3b154e6a3\",\"moduleSequenceNumber\":2582}],\"dependents\":[],\"ramUsage\":5.4,\"server\":\"home\",\"moduleSequenceNumber\":372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getSharePower\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { schedule } from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    if (!await schedule(ns, ...ns.args)) {\\r\\n        ns.print(\\\"Failed to execute '%s'\\\", ns.args[0])\\r\\n    }\\r\\n}\",\"filename\":\"run.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"home\",\"moduleSequenceNumber\":373,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///a20ca803-efea-4f7b-a4a4-973c7fafd698\",\"moduleSequenceNumber\":6260}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":374,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    filter_hostname,\\r\\n    filter_playerServer,\\r\\n    getAllServers,\\r\\n    applyFilter,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var known = []\\r\\n    var nameFilter = filter_hostname(ns, \\\"darkweb|home\\\")\\r\\n    var playerServerFilter = filter_playerServer(true)\\r\\n    var targets = getAllServers(ns)\\r\\n    targets = applyFilter(targets, [nameFilter, playerServerFilter])\\r\\n\\r\\n\\r\\n    for (const t in targets) {\\r\\n        let result = []\\r\\n        for (const f of ns.ls(t)) {\\r\\n            if (f.startsWith(\\\"/payload/\\\") || f.startsWith(\\\"/lib/\\\") || f.startsWith(\\\"/scripts/\\\") || f.startsWith(\\\"/scratch/\\\")) {\\r\\n                continue\\r\\n            }\\r\\n            if (!known.includes(f)) {\\r\\n                result.push(f)\\r\\n                known.push(f)\\r\\n            }\\r\\n        }\\r\\n        if (result.length > 0) {\\r\\n            ns.tprintf(\\\"%s:\\\", t)\\r\\n            for (const f of result) {\\r\\n                ns.tprintf(\\\"  %s\\\", f)\\r\\n                if (f.endsWith(\\\".lit\\\")) {\\r\\n                    await ns.scp(f, \\\"home\\\", t)\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/find-files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///23ed7f7b-fe6e-4028-a498-4a62b33ed755\",\"moduleSequenceNumber\":4277},{\"filename\":\"/scripts/find-files.js\",\"url\":\"blob:file:///1fc76cb2-73df-48aa-8781-703f518df1b5\",\"moduleSequenceNumber\":14001}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    applyFilter,\\r\\n    filter_adminRights,\\r\\n    filter_minRamAvailable,\\r\\n    getAdditionalServerInfo,\\r\\n    getAllServers,\\r\\n    performAttack,\\r\\n    getGrowAttack,\\r\\n    getWeakenAttack,\\r\\n    getHackAttack,\\r\\n    getTargetAddPort,\\r\\n    getTargetRemovePort,\\r\\n    threadsAvailable,\\r\\n    sortObjectBy,\\r\\n    sortByKey,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var targets = [...ns.args]\\r\\n    const growAttack = getGrowAttack(ns)\\r\\n    const weakenAttack = getWeakenAttack(ns)\\r\\n    const hackAttack = getHackAttack(ns)\\r\\n    ns.disableLog(\\\"disableLog\\\")\\r\\n    ns.disableLog(\\\"sleep\\\")\\r\\n\\r\\n    // If there is an already running instance of the scheduler\\r\\n    // just add the parameters as targets and exit. Bitburner\\r\\n    // itself prevents multiple instances of the same script running\\r\\n    // with the same parameters\\r\\n    if (isRunning(ns)) {\\r\\n        let addPort = getTargetAddPort(ns)\\r\\n        for (const t of targets) {\\r\\n            while (!addPort.tryWrite(t)) {\\r\\n                await ns.sleep(1000)\\r\\n            }\\r\\n        }\\r\\n        return\\r\\n    }\\r\\n\\r\\n    let procs = {}\\r\\n    while (true) {\\r\\n        let schedulables = getSchedulables(targets, procs)\\r\\n        // check if there is anything to schedule and if not,\\r\\n        // wait a fixed amount before checking again\\r\\n        if (schedulables.length <= 0) {\\r\\n            await ns.sleep(5000)\\r\\n        }\\r\\n        for (const targetName of schedulables) {\\r\\n            let target = ns.getServer(targetName)\\r\\n            let addonInfo = getAdditionalServerInfo(ns, target)\\r\\n            let attackers = getAttackers(ns)\\r\\n\\r\\n            // no attackers available, skip this scheduling cycle\\r\\n            if (Object.keys(attackers).length <= 0) {\\r\\n                continue\\r\\n            }\\r\\n\\r\\n            let state = {}\\r\\n            if (target.hackDifficulty > addonInfo.securityThreshold) {\\r\\n                state = performAttack(ns, weakenAttack, target, attackers)\\r\\n            } else if (target.moneyAvailable < addonInfo.moneyThreshold) {\\r\\n                state = performAttack(ns, growAttack, target, attackers)\\r\\n            } else {\\r\\n                state = performAttack(ns, hackAttack, target, attackers)\\r\\n            }\\r\\n            procs[targetName] = state\\r\\n        }\\r\\n        printState(ns, procs, targets)\\r\\n        procs = await wait(ns, procs, 5000)\\r\\n        targets = updateTargets(ns, targets)\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getAttackers(ns) {\\r\\n    var hasAdminFilter = filter_adminRights(true)\\r\\n    // 1.6G base script size + 0.15G (weaken/grow)\\r\\n    // hack() requires 0.1G so it works everywhere where weaken/grow works\\r\\n    var ramFilter = filter_minRamAvailable(ns.getScriptRam(\\\"/payload/weaken-only.js\\\"))\\r\\n    return applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n}\\r\\n\\r\\nfunction getSchedulables(targets, procs) {\\r\\n    var schedulables = []\\r\\n    var running = Object.keys(procs)\\r\\n    for (const t of targets) {\\r\\n        if (!running.includes(t)) {\\r\\n            schedulables.push(t)\\r\\n        }\\r\\n    }\\r\\n    return schedulables\\r\\n}\\r\\n\\r\\nasync function wait(ns, procs, maxWait) {\\r\\n    var newProcs = {}\\r\\n    var waitOn = \\\"\\\"\\r\\n    var waitTime = Infinity\\r\\n    for (const proc in procs) {\\r\\n        let procWait = procs[proc][\\\"waitTime\\\"]\\r\\n        if (procWait < waitTime) {\\r\\n            waitOn = proc\\r\\n            waitTime = procWait\\r\\n        }\\r\\n    }\\r\\n    if (waitTime > maxWait) {\\r\\n        waitOn = \\\"\\\"\\r\\n        waitTime = maxWait\\r\\n    }\\r\\n\\r\\n    ns.printf(\\\"Sleeping for %s\\\", ns.tFormat(waitTime))\\r\\n    await ns.sleep(waitTime)\\r\\n    for (const proc in procs) {\\r\\n        if (proc == waitOn) {\\r\\n            continue\\r\\n        }\\r\\n        let newWaitTime = procs[proc][\\\"waitTime\\\"] - waitTime\\r\\n        if ((newWaitTime <= 0) || !attackStillRunning(ns, procs[proc][\\\"pids\\\"])) {\\r\\n            continue\\r\\n        }\\r\\n        newProcs[proc] = procs[proc]\\r\\n        newProcs[proc][\\\"waitTime\\\"] = newWaitTime\\r\\n    }\\r\\n    return newProcs\\r\\n}\\r\\n\\r\\nfunction updateTargets(ns, current) {\\r\\n    var newTargets = [...current]\\r\\n    var addPort = getTargetAddPort(ns)\\r\\n    var removePort = getTargetRemovePort(ns)\\r\\n\\r\\n    while (!addPort.empty()) {\\r\\n        let data = addPort.read()\\r\\n        // Just a safety precaution as I have no idea\\r\\n        // how race-condition safe the port interface is.\\r\\n        // As in \\\"if empty() returns false, is it guaranteed to\\r\\n        // stay non empty in the current function?\\\"\\r\\n        // Also do not add targets that are already present\\r\\n        if ((data != \\\"NULL PORT DATA\\\") && (!newTargets.includes(data))) {\\r\\n            newTargets.push(data)\\r\\n        }\\r\\n    }\\r\\n    while (!removePort.empty()) {\\r\\n        let data = removePort.read()\\r\\n        // See comment above\\r\\n        if (data != \\\"NULL PORT DATA\\\") {\\r\\n            newTargets = newTargets.filter((v) => v != data)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return newTargets\\r\\n}\\r\\n\\r\\nfunction printState(ns, procs, targets) {\\r\\n    var procNames = [...Object.keys(procs)].sort()\\r\\n    var sortedProcs = sortObjectBy(procs, sortByKey(\\\"waitTime\\\"))\\r\\n    if (sortedProcs.length > 0) {\\r\\n        ns.print(\\\"Running attacks:\\\")\\r\\n        for (const proc of sortedProcs) {\\r\\n            ns.printf(\\\"  %20s: %6s (s: %3d; t: %6d; rt: %6d; wt: %8s)\\\",\\r\\n                proc[\\\"target\\\"],\\r\\n                proc[\\\"operation\\\"],\\r\\n                proc[\\\"serverCount\\\"],\\r\\n                proc[\\\"attackThreads\\\"],\\r\\n                proc[\\\"requiredThreads\\\"],\\r\\n                ns.nFormat(proc[\\\"waitTime\\\"] / 1000, \\\"00:00:00\\\"),\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n    var idleTargets = []\\r\\n    for (const t of targets) {\\r\\n        if (!procNames.includes(t)) {\\r\\n            idleTargets.push(t)\\r\\n        }\\r\\n    }\\r\\n    if (idleTargets.length > 0) {\\r\\n        ns.print(\\\"Idle targets:\\\")\\r\\n        for (const t of idleTargets) {\\r\\n            ns.printf(\\\"  %s\\\", t)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let maxAttackScriptSize = ns.getScriptRam(\\\"/payload/weaken-only.js\\\")\\r\\n    let systemThreads = threadsAvailable(ns, maxAttackScriptSize, false)\\r\\n    let idleThreads = threadsAvailable(ns, maxAttackScriptSize, true)\\r\\n    ns.printf(\\\"System threads: %d (idle); %d (available)\\\", idleThreads, systemThreads)\\r\\n}\\r\\n\\r\\nfunction isRunning(ns) {\\r\\n    var myself = ns.getScriptName()\\r\\n    var count = 0\\r\\n    for (const proc of ns.ps()) {\\r\\n        if (proc.filename == myself) {\\r\\n            count++\\r\\n        }\\r\\n        if (count > 1) {\\r\\n            return true\\r\\n        }\\r\\n    }\\r\\n    return false\\r\\n}\\r\\n\\r\\nfunction attackStillRunning(ns, pids) {\\r\\n    for (const pid of pids) {\\r\\n        if (ns.isRunning(pid)) {\\r\\n            return true\\r\\n        }\\r\\n    }\\r\\n    return false\\r\\n}\",\"filename\":\"/scripts/multi-target-scheduler.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///25eb831a-ccb6-4fb7-ab2f-cedf2e42460c\",\"moduleSequenceNumber\":364},{\"filename\":\"/scripts/multi-target-scheduler.js\",\"url\":\"blob:file:///b3c262bb-fee9-4777-a410-d6d66e175efe\",\"moduleSequenceNumber\":1084}],\"dependents\":[],\"ramUsage\":8.65,\"server\":\"home\",\"moduleSequenceNumber\":1084,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    getTargetAddPort,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var targets = ns.args\\r\\n    var addPort = getTargetAddPort(ns)\\r\\n    for (const t of targets) {\\r\\n        while (!addPort.tryWrite(t)) {\\r\\n            await ns.sleep(1000)\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/add-targets.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///52d64e18-fee4-432d-9163-c5a04705b014\",\"moduleSequenceNumber\":1086},{\"filename\":\"/scripts/add-targets.js\",\"url\":\"blob:file:///ff76334e-49e2-49ba-af2d-adc11a17b24e\",\"moduleSequenceNumber\":1087}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":1087,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    getTargetRemovePort,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var targets = ns.args\\r\\n    var removePort = getTargetRemovePort(ns)\\r\\n    for (const t of targets) {\\r\\n        while (!removePort.tryWrite(t)) {\\r\\n            await ns.sleep(1000)\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/remove-targets.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///54a89a7c-b64b-4502-b541-d6dd85e8c8d8\",\"moduleSequenceNumber\":364},{\"filename\":\"/scripts/remove-targets.js\",\"url\":\"blob:file:///94cb1004-3417-4a82-b425-e456a3e128e1\",\"moduleSequenceNumber\":3735}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    setMoneyLimit,\\r\\n    getMoneyLimit,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args.length < 1) {\\r\\n        ns.tprintf(\\\"Current money limit: %d\\\", getMoneyLimit(ns))\\r\\n        return\\r\\n    }\\r\\n    setMoneyLimit(ns, ns.args[0])\\r\\n    ns.tprintf(\\\"New money limit: %d\\\", getMoneyLimit(ns))\\r\\n}\\r\\n\",\"filename\":\"/scripts/money-limit.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///38f37ecb-2dcb-43cc-aa01-659b0c27cd7b\",\"moduleSequenceNumber\":4401},{\"filename\":\"/scripts/money-limit.js\",\"url\":\"blob:file:///74a582ff-9db2-4fd5-94ea-61f71843b326\",\"moduleSequenceNumber\":4565}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    getAllServers,\\r\\n    applyFilter,\\r\\n    filter_hackingSkill,\\r\\n    filter_minMaxMoney,\\r\\n    filter_adminRights,\\r\\n    sortObjectBy,\\r\\n    sortByFunctionValue,\\r\\n    sortByKey,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var sortTypes = {\\r\\n        \\\"weakenTime\\\": sortByFunctionValue(ns.getWeakenTime),\\r\\n        \\\"growTime\\\": sortByFunctionValue(ns.getGrowTime),\\r\\n        \\\"hackTime\\\": sortByFunctionValue(ns.getHackTime),\\r\\n        \\\"score\\\": sortByScore(),\\r\\n    }\\r\\n\\r\\n    var sortType = \\\"moneyMax\\\"\\r\\n    if (ns.args.length > 0) {\\r\\n        sortType = ns.args[0]\\r\\n    }\\r\\n    var output = \\\"\\\"\\r\\n    if (ns.args.length > 1) {\\r\\n        output = ns.args[1]\\r\\n    }\\r\\n    var sortFunc = sortByKey(sortType)\\r\\n    if (Object.keys(sortTypes).includes(sortType)) {\\r\\n        sortFunc = sortTypes[sortType]\\r\\n    }\\r\\n\\r\\n    var skillFilter = filter_hackingSkill(ns.getHackingLevel())\\r\\n    var maxMoneyFilter = filter_minMaxMoney(1)\\r\\n    var hasAdminFilter = filter_adminRights(false)\\r\\n    var servers = applyFilter(getAllServers(ns), [skillFilter, hasAdminFilter])\\r\\n    servers = applyFilter(servers, [maxMoneyFilter], false)\\r\\n\\r\\n    for (const server of sortObjectBy(servers, sortFunc)) {\\r\\n        let name = server.hostname\\r\\n        if (output != \\\"\\\") {\\r\\n            ns.tprintf(\\\"%s\\\", server[output])\\r\\n            continue\\r\\n        }\\r\\n        ns.tprintf(\\r\\n            \\\"%20s: score: %8s; m: %8s; gr: %4d; sm: %3d; wt: %10d; gt: %10d; ht: %10d\\\",\\r\\n            server.hostname,\\r\\n            ns.nFormat(serverScore(server), '0.00e+0'),\\r\\n            ns.nFormat(server.moneyMax, \\\"($0.00a)\\\"),\\r\\n            server.serverGrowth,\\r\\n            server.minDifficulty,\\r\\n            ns.getWeakenTime(name),\\r\\n            ns.getGrowTime(name),\\r\\n            ns.getHackTime(name),\\r\\n        )\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function serverScore(server) {\\r\\n    return server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n}\\r\\n\\r\\nexport function sortByScore() {\\r\\n    return (function (x, y) {\\r\\n        if (serverScore(x) < serverScore(y)) {\\r\\n            return -1\\r\\n        }\\r\\n        if (serverScore(x) > serverScore(y)) {\\r\\n            return 1\\r\\n        }\\r\\n        return 0\\r\\n    })\\r\\n}\",\"filename\":\"/scripts/compare-servers.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///2e497393-1186-4d3d-8fbd-5e2033117fdb\",\"moduleSequenceNumber\":79584},{\"filename\":\"/scripts/compare-servers.js\",\"url\":\"blob:file:///09b51657-06c9-4796-8e15-67deb2a681a5\",\"moduleSequenceNumber\":79821}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":380,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var base = 8\\r\\n    var ram = base\\r\\n    while (ram <= ns.getPurchasedServerMaxRam()) {\\r\\n        ns.tprintf(\\r\\n            \\\"%9s: %8s (%8s)\\\",\\r\\n            ns.nFormat(ram * 1024 * 1024 * 1024, \\\"0.00ib\\\"),\\r\\n            ns.nFormat(ns.getPurchasedServerCost(ram), \\\"($0.00a)\\\"),\\r\\n            ns.nFormat(ns.getPurchasedServerCost(ram) * ns.getPurchasedServerLimit(), \\\"($0.00a)\\\")\\r\\n        )\\r\\n        ram = ram * 2\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/server-upgrade-costs.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/server-upgrade-costs.js\",\"url\":\"blob:file:///54f6d48a-5203-4004-bece-204ffe3822c3\",\"moduleSequenceNumber\":51043}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":381,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-1048576\",\"pserv-1048576-0\",\"pserv-1048576-1\",\"pserv-1048576-2\",\"pserv-1048576-3\",\"pserv-1048576-4\",\"pserv-1048576-5\",\"pserv-1048576-6\",\"pserv-1048576-7\",\"pserv-1048576-8\",\"pserv-1048576-9\",\"pserv-1048576-10\",\"pserv-1048576-11\",\"pserv-1048576-12\",\"pserv-1048576-13\",\"pserv-1048576-14\",\"pserv-1048576-15\",\"pserv-1048576-16\",\"pserv-1048576-17\",\"pserv-1048576-18\",\"pserv-1048576-19\",\"pserv-1048576-20\",\"pserv-1048576-21\",\"pserv-1048576-22\",\"pserv-1048576-23\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"V2_0_0_API_BREAK.txt\",\"text\":\"This file contains the list of potential API break. A pattern was used to look through all your files and note the spots where you might have a problem. Not everything here is broken./ns\\\\.scp/g\\nscp arguments were switch, it is now scp(files, destination, optionally_source). If you were using 2 argument (not 3) this doesn't affect you.\\n\\n\\t/lib/utils.js\\n\\t\\tLine 230 await ns.scp(files, \\\"home\\\", name)\\n\\t\\tLine 481 await ns.scp(\\\"/lib/utils.js\\\", \\\"home\\\", target)\\n\\t\\tLine 482 await ns.scp(script, \\\"home\\\", target)\\n\\t/scripts/find-files.js\\n\\t\\tLine 33 await ns.scp(f, t, \\\"home\\\")\\n\\n\\n/ns.installBackdoor/g\\nns.installBackdoor was moved to ns.singularity.installBackdoor\\n\\n\\t/scripts/backdoor-worm.js\\n\\t\\tLine 50 //     await ns.installBackdoor(target.hostname)\\n\\n\\n/hacking/g\\nThe work system is completely reworked and ns.getPlayer().hacking no longer exists. This data is likely available inside ns.getPlayer().currentWork, skills, exp, or hp\\n\\n\\t/lib/utils.js\\n\\t\\tLine 69 export function filter_hackingSkill(level) {\\n\\t/scripts/compare-servers.js\\n\\t\\tLine 1 import { getAllServers, applyFilter, filter_hackingSkill, filter_minMaxMoney, filter_adminRights, sortObjectsBy } from \\\"lib/utils.js\\\";\\n\\t\\tLine 9 var skillFilter = filter_hackingSkill(ns.getHackingLevel())\\n\\n\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"16.3.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":38.440000000000005,\"minDifficulty\":33,\"moneyAvailable\":1621024583500,\"moneyMax\":1621024583500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1057,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"90.7.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":38.048,\"minDifficulty\":33,\"moneyAvailable\":9491810906,\"moneyMax\":1089969038750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1346,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"31.2.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":29.124,\"minDifficulty\":25,\"moneyAvailable\":30411.236598712232,\"moneyMax\":599056625175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1083,\"serverGrowth\":60}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"49.3.0.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"blade\",\"moduleSequenceNumber\":382,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":383,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///45f8d6eb-f535-43ba-8ccd-c957b5444135\",\"moduleSequenceNumber\":83844}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///e83ba503-be05-41ca-9470-992b9df8d8ea\",\"moduleSequenceNumber\":2650}],\"dependents\":[],\"ramUsage\":4,\"server\":\"blade\",\"moduleSequenceNumber\":386,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":37.142,\"minDifficulty\":30,\"moneyAvailable\":421356264200,\"moneyMax\":421356264200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1182,\"serverGrowth\":68}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"41.4.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":37.294000000000004,\"minDifficulty\":33,\"moneyAvailable\":20628.300855219673,\"moneyMax\":788307283925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1297,\"serverGrowth\":68}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"72.5.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":42.608000000000004,\"minDifficulty\":18,\"moneyAvailable\":586835090850,\"moneyMax\":586835090850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1207,\"serverGrowth\":49}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"0.2.0.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"omnitek\",\"moduleSequenceNumber\":387,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///96b41111-e5d1-4c8f-b86f-7b1ddab345e0\",\"moduleSequenceNumber\":83831}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///5142223c-aa97-4672-b3af-122ba749f43f\",\"moduleSequenceNumber\":2648}],\"dependents\":[],\"ramUsage\":4,\"server\":\"omnitek\",\"moduleSequenceNumber\":391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"helios\",\"blade\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":32.132,\"minDifficulty\":32,\"moneyAvailable\":0,\"moneyMax\":512727785875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1019,\"serverGrowth\":95}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"40.7.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":34.852000000000004,\"minDifficulty\":19,\"moneyAvailable\":482020310200,\"moneyMax\":482020310200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1103,\"serverGrowth\":78}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"47.3.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":38.914,\"minDifficulty\":33,\"moneyAvailable\":542951450550,\"moneyMax\":542951450550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":957,\"serverGrowth\":93}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"29.4.7.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":392,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///896ea4b0-01a1-448b-9a7b-b40923e57810\",\"moduleSequenceNumber\":83829}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":394,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///882371b1-959a-4c3b-89f9-9305f8272abf\",\"moduleSequenceNumber\":2644}],\"dependents\":[],\"ramUsage\":4,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":396,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":30.14,\"minDifficulty\":30,\"moneyAvailable\":0,\"moneyMax\":35276103975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1209,\"serverGrowth\":80}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-714203.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[14,66,112,50,29,5,101,184,181,46,88,80,15,137,41,143,73,156,93,30,160,188,158,13,130,32,64,14,98,45,102,46,126,89,145,79,123,96,134]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"27.3.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":99,\"hackDifficulty\":100,\"minDifficulty\":33,\"moneyAvailable\":3073080.4093376873,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1344,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"56.0.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":32.995999999999995,\"minDifficulty\":29,\"moneyAvailable\":12327498421.756258,\"moneyMax\":27051813300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":994,\"serverGrowth\":82}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"96.9.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":36.558,\"minDifficulty\":28,\"moneyAvailable\":23087882925,\"moneyMax\":23087882925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":894,\"serverGrowth\":60}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"62.6.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":29.122,\"minDifficulty\":29,\"moneyAvailable\":0,\"moneyMax\":16534860725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":934,\"serverGrowth\":39}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-663196.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":183336182622,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"67.5.9.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"helios\",\"moduleSequenceNumber\":397,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///ea612b31-1a48-4e30-bf46-c859f34534cc\",\"moduleSequenceNumber\":83830}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":399,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///1c3be3a8-8c90-4130-b2cd-e8bf833357a5\",\"moduleSequenceNumber\":2645}],\"dependents\":[],\"ramUsage\":4,\"server\":\"helios\",\"moduleSequenceNumber\":401,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":29.116,\"minDifficulty\":29,\"moneyAvailable\":0,\"moneyMax\":17688752700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":806,\"serverGrowth\":78}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"11.5.2.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"vitalife\",\"moduleSequenceNumber\":402,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":403,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d6ac4965-f6a3-4f4b-a447-cdccb54da835\",\"moduleSequenceNumber\":83868}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":404,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":405,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///d43b7596-8fa6-4bf9-9e1b-2acf87f7b775\",\"moduleSequenceNumber\":2646}],\"dependents\":[],\"ramUsage\":4,\"server\":\"vitalife\",\"moduleSequenceNumber\":406,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":34.872,\"minDifficulty\":29,\"moneyAvailable\":17922762875,\"moneyMax\":17922762875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":837,\"serverGrowth\":67}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"24.2.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":33.748,\"minDifficulty\":29,\"moneyAvailable\":197505358.31401387,\"moneyMax\":24094441425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":917,\"serverGrowth\":92}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"80.7.0.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"univ-energy\",\"moduleSequenceNumber\":407,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":408,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///82056aa0-f837-40ba-89a9-09416da90bb2\",\"moduleSequenceNumber\":83853}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":409,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":410,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///6c0f4037-bdac-430b-9af2-24b6506b56b2\",\"moduleSequenceNumber\":2640}],\"dependents\":[],\"ramUsage\":4,\"server\":\"univ-energy\",\"moduleSequenceNumber\":411,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":27.112,\"minDifficulty\":27,\"moneyAvailable\":24522880,\"moneyMax\":28486876800,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":803,\"serverGrowth\":87}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"87.0.1.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"titan-labs\",\"moduleSequenceNumber\":412,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":413,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///62eadeb9-8290-4572-bca6-7f3319668b1f\",\"moduleSequenceNumber\":83835}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":414,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":415,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///cf836c3c-2194-44d3-8ade-0c1d3b086506\",\"moduleSequenceNumber\":2641}],\"dependents\":[],\"ramUsage\":4,\"server\":\"titan-labs\",\"moduleSequenceNumber\":416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":31.772,\"minDifficulty\":25,\"moneyAvailable\":19825491625,\"moneyMax\":19825491625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":868,\"serverGrowth\":74}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"76.8.2.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"microdyne\",\"moduleSequenceNumber\":417,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":418,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///f139a27d-3625-4a86-8df4-5c826805b02c\",\"moduleSequenceNumber\":83867}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":419,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":420,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///5ecc81ca-3f2a-4cf0-8f1f-7bff3379371c\",\"moduleSequenceNumber\":2642}],\"dependents\":[],\"ramUsage\":4,\"server\":\"microdyne\",\"moduleSequenceNumber\":421,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":29.11,\"minDifficulty\":25,\"moneyAvailable\":63879.79951183383,\"moneyMax\":16303239500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":817,\"serverGrowth\":73}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"26.5.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":46.245999999999995,\"minDifficulty\":27,\"moneyAvailable\":20515555550,\"moneyMax\":20515555550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":909,\"serverGrowth\":74}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"89.1.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":22.792,\"minDifficulty\":19,\"moneyAvailable\":315992538,\"moneyMax\":19789729750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":847,\"serverGrowth\":71}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"47.6.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":37.326,\"minDifficulty\":27,\"moneyAvailable\":18284726754.70172,\"moneyMax\":25056519975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":923,\"serverGrowth\":58}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"34.0.6.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"omnia\",\"moduleSequenceNumber\":422,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":423,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///a7198cc7-414a-4bc7-a056-6d14f5ed16c4\",\"moduleSequenceNumber\":83842}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":424,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":425,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///14d42367-1040-4fa8-972e-806d29761b57\",\"moduleSequenceNumber\":2638}],\"dependents\":[],\"ramUsage\":4,\"server\":\"omnia\",\"moduleSequenceNumber\":426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":53.052,\"minDifficulty\":32,\"moneyAvailable\":972024086.5697973,\"moneyMax\":22779313025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":943,\"serverGrowth\":64}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"1.4.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":33.498000000000005,\"minDifficulty\":19,\"moneyAvailable\":23717723050,\"moneyMax\":23717723050,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":817,\"serverGrowth\":72}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"57.1.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":35.362,\"minDifficulty\":20,\"moneyAvailable\":17653409075,\"moneyMax\":17653409075,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":788,\"serverGrowth\":70}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"90.4.9.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"solaris\",\"moduleSequenceNumber\":427,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":428,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///71380ab7-54e0-4eec-8a9c-b292975da876\",\"moduleSequenceNumber\":83866}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":429,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///ae10140c-8bce-4d4f-ad7b-e0822decf665\",\"moduleSequenceNumber\":2639}],\"dependents\":[],\"ramUsage\":4,\"server\":\"solaris\",\"moduleSequenceNumber\":431,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":28.656,\"minDifficulty\":23,\"moneyAvailable\":20066559700,\"moneyMax\":20066559700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":845,\"serverGrowth\":75}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"90.9.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":51.028,\"minDifficulty\":25,\"moneyAvailable\":40518559975,\"moneyMax\":40518559975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":859,\"serverGrowth\":53}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"1.5.1.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"global-pharm\",\"moduleSequenceNumber\":432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///e885214a-654d-461e-bd09-54018554974d\",\"moduleSequenceNumber\":83852}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":435,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///f1397e1c-b76a-4b5b-a1e2-7848f9ef32cc\",\"moduleSequenceNumber\":2636}],\"dependents\":[],\"ramUsage\":4,\"server\":\"global-pharm\",\"moduleSequenceNumber\":436,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"alpha-ent\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":26.108,\"minDifficulty\":26,\"moneyAvailable\":618872684,\"moneyMax\":42261340100,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":782,\"serverGrowth\":80}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"55.7.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":25.304,\"minDifficulty\":21,\"moneyAvailable\":30003078375,\"moneyMax\":30003078375,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":837,\"serverGrowth\":65}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"76.0.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":36.956,\"minDifficulty\":25,\"moneyAvailable\":36380899050,\"moneyMax\":36380899050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":840,\"serverGrowth\":79}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"97.0.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"unitalife\",\"moduleSequenceNumber\":437,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":438,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///b3b49016-4a66-44b5-94bd-a9d04b6c5c29\",\"moduleSequenceNumber\":83865}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":439,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":440,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///2b44ae95-ab5b-436f-92bd-3c49e38e2aa1\",\"moduleSequenceNumber\":2637}],\"dependents\":[],\"ramUsage\":4,\"server\":\"unitalife\",\"moduleSequenceNumber\":441,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"global-pharm\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":42.06,\"minDifficulty\":24,\"moneyAvailable\":26511191050,\"moneyMax\":26511191050,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":800,\"serverGrowth\":72}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"5.5.8.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":443,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///b209fbcd-ff6a-4fc2-879e-cbf6b71fd0b5\",\"moduleSequenceNumber\":83834}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":444,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":445,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///07404681-fe03-4611-8416-175a5ed571d1\",\"moduleSequenceNumber\":2635}],\"dependents\":[],\"ramUsage\":4,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"I.I.I.I\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":33.356,\"minDifficulty\":26,\"moneyAvailable\":18177839650,\"moneyMax\":18177839650,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":658,\"serverGrowth\":55}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"33.2.3.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"rho-construction\",\"moduleSequenceNumber\":447,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":448,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///3ce73413-6dfc-4208-bb71-b8a3b31c0098\",\"moduleSequenceNumber\":83840}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":449,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":450,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///7ce7a4dc-b6fc-4f8b-8486-ecdfb2dc88d0\",\"moduleSequenceNumber\":2631}],\"dependents\":[],\"ramUsage\":4,\"server\":\"rho-construction\",\"moduleSequenceNumber\":451,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":33.976,\"minDifficulty\":18,\"moneyAvailable\":16788719200,\"moneyMax\":16788719200,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":475,\"serverGrowth\":42}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"39.8.6.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":452,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":453,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///69ef97b0-f93c-47cf-92e4-e48649fd3911\",\"moduleSequenceNumber\":83833}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":454,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":455,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///a946b9a7-b52c-4c13-8507-baac169094e1\",\"moduleSequenceNumber\":2632}],\"dependents\":[],\"ramUsage\":4,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":456,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zb-institute\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":35.852,\"minDifficulty\":17,\"moneyAvailable\":18645109575,\"moneyMax\":18645109575,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":599,\"serverGrowth\":50}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"72.6.9.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"aevum-police\",\"moduleSequenceNumber\":457,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///22c7f9f1-17e6-4d6d-a8a7-65d09b0924de\",\"moduleSequenceNumber\":83841}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///13b1874a-cd22-4fbc-8752-05144fb3e683\",\"moduleSequenceNumber\":2634}],\"dependents\":[],\"ramUsage\":4,\"server\":\"aevum-police\",\"moduleSequenceNumber\":461,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":52.628,\"minDifficulty\":25,\"moneyAvailable\":6070271750,\"moneyMax\":6070271750,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":450,\"serverGrowth\":44}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"66.0.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":462,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":463,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///cc6ade55-9e3c-4ec8-a097-8c9c1a5efcaf\",\"moduleSequenceNumber\":83862}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":464,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":465,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///28612db9-bf60-4479-badc-88c7cbd3091f\",\"moduleSequenceNumber\":2626}],\"dependents\":[],\"ramUsage\":4,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":16.082,\"minDifficulty\":16,\"moneyAvailable\":95515162,\"moneyMax\":5033857250,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":396,\"serverGrowth\":37}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"81.3.5.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"zb-institute\",\"moduleSequenceNumber\":467,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///bc52b427-09ff-4e34-80ee-4a9b8a5e487a\",\"moduleSequenceNumber\":83832}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///b1ead2d9-f72d-4086-9d82-064f15520de1\",\"moduleSequenceNumber\":2627}],\"dependents\":[],\"ramUsage\":4,\"server\":\"zb-institute\",\"moduleSequenceNumber\":471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":40.494,\"minDifficulty\":24,\"moneyAvailable\":22906457600,\"moneyMax\":22906457600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":761,\"serverGrowth\":78}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"64.4.0.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"summit-uni\",\"moduleSequenceNumber\":472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":473,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///14d7e4de-ec0b-41f4-a52b-a195b27383bd\",\"moduleSequenceNumber\":83864}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///ab97740b-02aa-4849-9392-6c1829d587ea\",\"moduleSequenceNumber\":2630}],\"dependents\":[],\"ramUsage\":4,\"server\":\"summit-uni\",\"moduleSequenceNumber\":476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":15.082,\"minDifficulty\":15,\"moneyAvailable\":177899028,\"moneyMax\":5774478650,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":464,\"serverGrowth\":49}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"16.7.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":22,\"minDifficulty\":22,\"moneyAvailable\":12671891750,\"moneyMax\":12671891750,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":577,\"serverGrowth\":63}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-655221-TheDarkArmy.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"10011110\",\"reward\":{\"name\":\"The Dark Army\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"77.0.7.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"catalyst\",\"moduleSequenceNumber\":477,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///5f0814ec-94bc-4072-8a11-66fbe19e6249\",\"moduleSequenceNumber\":83863}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":479,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///52c190c9-0207-456a-8826-d9afb8c57b22\",\"moduleSequenceNumber\":2628}],\"dependents\":[],\"ramUsage\":4,\"server\":\"catalyst\",\"moduleSequenceNumber\":481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":22.09,\"minDifficulty\":22,\"moneyAvailable\":144823825,\"moneyMax\":8418489400,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":445,\"serverGrowth\":29}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"83.9.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"the-hub\",\"moduleSequenceNumber\":482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///0dbe7f23-2969-4539-ad55-802558a0fcc9\",\"moduleSequenceNumber\":83860}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///0501e8ee-2071-4677-b0a7-bbcf25888e68\",\"moduleSequenceNumber\":2624}],\"dependents\":[],\"ramUsage\":4,\"server\":\"the-hub\",\"moduleSequenceNumber\":486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"neo-net\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":19.574,\"minDifficulty\":13,\"moneyAvailable\":4889837975,\"moneyMax\":4889837975,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":279,\"serverGrowth\":47}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"46.7.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":40.382,\"minDifficulty\":19,\"moneyAvailable\":5713351475,\"moneyMax\":5713351475,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":356,\"serverGrowth\":45}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"89.8.6.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"netlink\",\"moduleSequenceNumber\":487,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d34e4057-2dcf-4ff8-a46a-cf7879d00912\",\"moduleSequenceNumber\":83838}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///c9639a1c-34e2-4235-ba0b-719184ec5507\",\"moduleSequenceNumber\":2623}],\"dependents\":[],\"ramUsage\":4,\"server\":\"netlink\",\"moduleSequenceNumber\":491,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omega-net\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":48.552,\"minDifficulty\":23,\"moneyAvailable\":6875000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":384,\"serverGrowth\":48}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"30.3.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\",\"zb-institute\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":38,\"hackDifficulty\":19.666,\"minDifficulty\":13,\"moneyAvailable\":1785683675,\"moneyMax\":1785683675,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":264,\"serverGrowth\":49}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"62.2.5.2\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"n00dles\",\"moduleSequenceNumber\":492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":493,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///2914e3a3-93ff-4047-9c40-101b75c016ac\",\"moduleSequenceNumber\":83871}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///e70e79ae-8627-4ad1-8980-f37c46520573\",\"moduleSequenceNumber\":2583}],\"dependents\":[],\"ramUsage\":4,\"server\":\"n00dles\",\"moduleSequenceNumber\":496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":2.9799999999999995,\"minDifficulty\":1,\"moneyAvailable\":43822,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"62.1.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///2931a701-4446-4ec6-94c0-3796c1cda18c\",\"moduleSequenceNumber\":83854}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///74a58e42-57c7-4f9f-9245-defcc42c6c9e\",\"moduleSequenceNumber\":2584}],\"dependents\":[],\"ramUsage\":4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":501,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.062,\"minDifficulty\":3,\"moneyAvailable\":1292707,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"91.6.9.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///2ffa2a35-9637-404c-a3fb-f95d0606fd3c\",\"moduleSequenceNumber\":83855}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":505,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///bc68d6cb-544b-471a-92b6-3b06c5c570aa\",\"moduleSequenceNumber\":2585}],\"dependents\":[],\"ramUsage\":4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":506,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":57500000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"9.9.0.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"joesguns\",\"moduleSequenceNumber\":507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///9fbaeb80-6d09-4f3c-9cbb-44b785b0e3d8\",\"moduleSequenceNumber\":83856}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///f1464d17-270e-44fd-b715-c3cab00e2a51\",\"moduleSequenceNumber\":2586}],\"dependents\":[],\"ramUsage\":4,\"server\":\"joesguns\",\"moduleSequenceNumber\":511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":9.964,\"minDifficulty\":5,\"moneyAvailable\":641794,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"38.2.8.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"zer0\",\"moduleSequenceNumber\":512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///de064e98-8102-4af4-bd9b-cd6fc296440c\",\"moduleSequenceNumber\":1139}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":1139,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d8a3bf81-c3e0-4061-a1b3-21a446a23acf\",\"moduleSequenceNumber\":83846}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///997afde7-4292-4cdc-a89d-0a9c05a938b7\",\"moduleSequenceNumber\":2617}],\"dependents\":[],\"ramUsage\":4,\"server\":\"zer0\",\"moduleSequenceNumber\":516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"iron-gym\",\"silver-helix\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":12.604000000000001,\"minDifficulty\":8,\"moneyAvailable\":5754240,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"57.4.5.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"nectar-net\",\"moduleSequenceNumber\":517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///b23b0c09-7a24-4295-a0ad-23d765f31a8a\",\"moduleSequenceNumber\":83859}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///0a1f3e60-d70f-4ee0-add6-1dc02737dab6\",\"moduleSequenceNumber\":2615}],\"dependents\":[],\"ramUsage\":4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7.066,\"minDifficulty\":7,\"moneyAvailable\":793529,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"63.2.6.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"neo-net\",\"moduleSequenceNumber\":522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///6291b920-383d-4f33-a47f-2792b0b58c1d\",\"moduleSequenceNumber\":83850}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///acd47b28-e269-4cf3-bf5a-9d9a7284d0d6\",\"moduleSequenceNumber\":2622}],\"dependents\":[],\"ramUsage\":4,\"server\":\"neo-net\",\"moduleSequenceNumber\":526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8.066,\"minDifficulty\":8,\"moneyAvailable\":3898547,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-602851.cct\",\"type\":\"Array Jumping Game\",\"data\":[6,9,5,9,3,4],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"55.1.0.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"silver-helix\",\"moduleSequenceNumber\":527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///eb283587-9c9d-4a24-8873-1df2cfab9d2c\",\"moduleSequenceNumber\":83837}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///bd307425-295b-42ba-9653-f60010b65365\",\"moduleSequenceNumber\":2619}],\"dependents\":[],\"ramUsage\":4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zer0\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":13.502,\"minDifficulty\":10,\"moneyAvailable\":1125000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"92.9.0.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///4d3a495b-846b-4ec0-bea3-50f4307aabed\",\"moduleSequenceNumber\":83857}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///b0037da9-90d2-47d5-8569-bb92540cbe3d\",\"moduleSequenceNumber\":2587}],\"dependents\":[],\"ramUsage\":4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":9.616,\"minDifficulty\":5,\"moneyAvailable\":940214,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"78.3.6.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":537,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///b7f93445-9431-477a-888a-7a0925ccbdd8\",\"moduleSequenceNumber\":83858}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///4d7ca7ce-015f-48ce-81b0-3916e889645f\",\"moduleSequenceNumber\":2588}],\"dependents\":[],\"ramUsage\":4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":12.502,\"minDifficulty\":5,\"moneyAvailable\":100000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"28.6.3.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"phantasy\",\"moduleSequenceNumber\":542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///661369e8-d0f5-42b8-ad5e-df2780dc31e2\",\"moduleSequenceNumber\":83848}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///7cc00146-dcbe-45a8-9dff-56d4ba36e9a3\",\"moduleSequenceNumber\":2620}],\"dependents\":[],\"ramUsage\":4,\"server\":\"phantasy\",\"moduleSequenceNumber\":546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zer0\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7.066,\"minDifficulty\":7,\"moneyAvailable\":21510528,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"91.6.7.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"max-hardware\",\"moduleSequenceNumber\":547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///70a3032a-7700-46dd-a1e9-d43797a856ae\",\"moduleSequenceNumber\":83847}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///ce48098c-adf1-4c23-828c-b7c8d205252c\",\"moduleSequenceNumber\":2618}],\"dependents\":[],\"ramUsage\":4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"iron-gym\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":10.378,\"minDifficulty\":5,\"moneyAvailable\":250000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"80.3.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"omega-net\",\"moduleSequenceNumber\":552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///4c28c5b7-e0e2-481b-89c2-38663a5a665e\",\"moduleSequenceNumber\":83849}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///f6fe2b2a-3dd9-4ae5-97af-4994f7fefa14\",\"moduleSequenceNumber\":2621}],\"dependents\":[],\"ramUsage\":4,\"server\":\"omega-net\",\"moduleSequenceNumber\":556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zer0\",\"computek\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":31,\"hackDifficulty\":17.541999999999998,\"minDifficulty\":10,\"moneyAvailable\":1596701450,\"moneyMax\":1596701450,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":215,\"serverGrowth\":33}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"49.7.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":36,\"hackDifficulty\":22.211999999999996,\"minDifficulty\":12,\"moneyAvailable\":1220447025,\"moneyMax\":1220447025,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":246,\"serverGrowth\":30}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"53.7.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"iron-gym\",\"moduleSequenceNumber\":557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///261cf531-67de-44dc-9880-69b63ee1e88f\",\"moduleSequenceNumber\":1138}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1138,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///c4fbd66c-c05b-403c-9874-6debd716a24d\",\"moduleSequenceNumber\":83845}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///612cb9de-a6a8-4a17-bfbf-db572d4d5437\",\"moduleSequenceNumber\":2589}],\"dependents\":[],\"ramUsage\":4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.07,\"minDifficulty\":10,\"moneyAvailable\":5202060,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"18.2.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///ecc34404-7f07-4ae9-8c49-19c957008939\",\"moduleSequenceNumber\":83851}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///fbfe51df-a862-400b-a099-e0c8b94396e8\",\"moduleSequenceNumber\":2633}],\"dependents\":[],\"ramUsage\":4,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"catalyst\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":15.084,\"minDifficulty\":15,\"moneyAvailable\":153087598,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":513,\"serverGrowth\":25}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"86.7.4.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///7b6de9aa-578a-47c5-9d0d-ffd1ae685981\",\"moduleSequenceNumber\":83843}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///9b62f030-1547-4fed-975e-a9d7d2720274\",\"moduleSequenceNumber\":2649}],\"dependents\":[],\"ramUsage\":4,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\".\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":39.626000000000005,\"minDifficulty\":19,\"moneyAvailable\":22500000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":998,\"serverGrowth\":51}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"82.3.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":32.467999999999996,\"minDifficulty\":14,\"moneyAvailable\":11250000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":706,\"serverGrowth\":42}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"88.9.5.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///a5ff429d-f3ea-499e-90ac-876260e3855f\",\"moduleSequenceNumber\":83836}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///00355997-d60b-4703-9e73-ee7da337148e\",\"moduleSequenceNumber\":2643}],\"dependents\":[],\"ramUsage\":4,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":517,\"serverGrowth\":1}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"25.1.5.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///3b2d4fdf-7882-44db-b170-c5ec09c7327c\",\"moduleSequenceNumber\":83839}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///2f610c7a-e86d-4553-9ba0-2dffa60d4824\",\"moduleSequenceNumber\":2629}],\"dependents\":[],\"ramUsage\":4,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":340,\"serverGrowth\":1}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"17.9.9.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///70f71ea3-9663-494c-a327-aa21a9b104ec\",\"moduleSequenceNumber\":83861}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///d60eff92-0f1f-4516-b476-c3d2ce1fe139\",\"moduleSequenceNumber\":2625}],\"dependents\":[],\"ramUsage\":4,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"neo-net\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":211,\"serverGrowth\":1}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"21.4.7.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\".\",\"moduleSequenceNumber\":587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///801afbfb-8c15-4596-b2ed-11cbc80fe1ae\",\"moduleSequenceNumber\":83869}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///cb907b5c-f966-46d5-b4a1-a64f8b572541\",\"moduleSequenceNumber\":2647}],\"dependents\":[],\"ramUsage\":4,\"server\":\".\",\"moduleSequenceNumber\":591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":529,\"serverGrowth\":1}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"38.9.2.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"CSEC\",\"moduleSequenceNumber\":592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///8bb5b620-8860-4424-b065-a6970d9ee7ce\",\"moduleSequenceNumber\":83870}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///6d463029-e721-47ba-8be5-c0bd735ddf1c\",\"moduleSequenceNumber\":2616}],\"dependents\":[],\"ramUsage\":4,\"server\":\"CSEC\",\"moduleSequenceNumber\":596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":55,\"serverGrowth\":1}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"22.7.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":1}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"11.6.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"68.7.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1048576\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1048576\",\"httpPortOpen\":false,\"ip\":\"79.2.7.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"pserv-1048576\",\"moduleSequenceNumber\":597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1048576\",\"moduleSequenceNumber\":598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///b85abf7f-609e-45e4-a0e4-240f5c09d640\",\"moduleSequenceNumber\":2582}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576\",\"moduleSequenceNumber\":599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576\",\"moduleSequenceNumber\":600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///34248d36-cc0d-410f-a377-12423208b974\",\"moduleSequenceNumber\":2590}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-1048576\",\"moduleSequenceNumber\":601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    filter_adminRights,\\r\\n    filter_canNuke,\\r\\n    filter_minRam,\\r\\n    filter_hostname,\\r\\n    filter_playerServer,\\r\\n    getAllServers,\\r\\n    applyFilter,\\r\\n    deployPayload,\\r\\n    portOpener,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var noAdminFilter = filter_adminRights(false)\\r\\n    var hasAdminFilter = filter_adminRights(true)\\r\\n    var canNukeFilter = filter_canNuke(ns)\\r\\n    var ramFilter = filter_minRam(4)\\r\\n    var nameFilter = filter_hostname(ns, \\\"darkweb|home\\\")\\r\\n    var playerServerFilter = filter_playerServer()\\r\\n\\r\\n    var targets = getAllServers(ns)\\r\\n    targets = applyFilter(targets, [noAdminFilter, canNukeFilter], false, false)\\r\\n    targets = applyFilter(targets, [nameFilter, playerServerFilter])\\r\\n    for (const t in targets) {\\r\\n        ns.printf(\\\"Nuking Target: %s\\\", targets[t].hostname)\\r\\n        attack(ns, targets[t])\\r\\n    }\\r\\n\\r\\n    targets = getAllServers(ns)\\r\\n    targets = applyFilter(targets, [hasAdminFilter, ramFilter], false, false)\\r\\n    for (const t in targets) {\\r\\n        ns.printf(\\\"Deploying payload on Target: %s\\\", targets[t].hostname)\\r\\n        await deployPayload(ns, t)\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function attack(ns, target) {\\r\\n    var po = portOpener(ns)\\r\\n    if (target.openPortCount < target.numOpenPortsRequired) {\\r\\n        for (let attack of po) {\\r\\n            if (attack[\\\"check\\\"](target)) {\\r\\n                attack[\\\"func\\\"](target.hostname)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    ns.nuke(target.hostname)\\r\\n\\r\\n    // if (!target.backdoorInstalled) {\\r\\n    //     await ns.singularity.installBackdoor(target.hostname)\\r\\n    // }\\r\\n}\",\"filename\":\"/scripts/backdoor-worm.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///302bf6d2-55ce-4b63-91a7-e6c878b00148\",\"moduleSequenceNumber\":85758},{\"filename\":\"/scripts/backdoor-worm.js\",\"url\":\"blob:file:///28bf0bce-d20a-4419-9281-e9ebaabe1d5d\",\"moduleSequenceNumber\":86005}],\"dependents\":[],\"ramUsage\":4.8,\"server\":\"pserv-1048576\",\"moduleSequenceNumber\":602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1048576-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1048576-0\",\"httpPortOpen\":false,\"ip\":\"51.2.6.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"pserv-1048576-0\",\"moduleSequenceNumber\":603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1048576-0\",\"moduleSequenceNumber\":604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-0\",\"moduleSequenceNumber\":605,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-0\",\"moduleSequenceNumber\":606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///85a6065f-b31d-402a-b5c2-f9b7eeba2d1c\",\"moduleSequenceNumber\":2591}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-1048576-0\",\"moduleSequenceNumber\":607,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1048576-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1048576-1\",\"httpPortOpen\":false,\"ip\":\"72.2.3.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"pserv-1048576-1\",\"moduleSequenceNumber\":608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1048576-1\",\"moduleSequenceNumber\":609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-1\",\"moduleSequenceNumber\":610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-1\",\"moduleSequenceNumber\":611,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///20b3b61e-12f3-4557-98bc-9c0506fe9c2d\",\"moduleSequenceNumber\":2592}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-1048576-1\",\"moduleSequenceNumber\":612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1048576-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1048576-2\",\"httpPortOpen\":false,\"ip\":\"11.0.4.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"pserv-1048576-2\",\"moduleSequenceNumber\":613,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1048576-2\",\"moduleSequenceNumber\":614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-2\",\"moduleSequenceNumber\":615,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-2\",\"moduleSequenceNumber\":616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///126c57a7-86a0-49a3-84ae-b1c612322e2d\",\"moduleSequenceNumber\":2593}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-1048576-2\",\"moduleSequenceNumber\":617,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1048576-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1048576-3\",\"httpPortOpen\":false,\"ip\":\"31.4.3.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"pserv-1048576-3\",\"moduleSequenceNumber\":618,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1048576-3\",\"moduleSequenceNumber\":619,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-3\",\"moduleSequenceNumber\":620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-3\",\"moduleSequenceNumber\":621,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///2a62cb66-a319-4dad-86f2-12b23438bfec\",\"moduleSequenceNumber\":2594}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-1048576-3\",\"moduleSequenceNumber\":622,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1048576-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1048576-4\",\"httpPortOpen\":false,\"ip\":\"24.8.3.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"pserv-1048576-4\",\"moduleSequenceNumber\":623,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1048576-4\",\"moduleSequenceNumber\":624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-4\",\"moduleSequenceNumber\":625,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-4\",\"moduleSequenceNumber\":626,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///91b98b6a-72dd-4a4c-a7ff-879784220b29\",\"moduleSequenceNumber\":2595}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-1048576-4\",\"moduleSequenceNumber\":627,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1048576-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1048576-5\",\"httpPortOpen\":false,\"ip\":\"45.3.0.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"pserv-1048576-5\",\"moduleSequenceNumber\":628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1048576-5\",\"moduleSequenceNumber\":629,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-5\",\"moduleSequenceNumber\":630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-5\",\"moduleSequenceNumber\":631,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///350fef6a-a3b2-4a0e-8dd1-b65eec75142c\",\"moduleSequenceNumber\":2596}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-1048576-5\",\"moduleSequenceNumber\":632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1048576-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1048576-6\",\"httpPortOpen\":false,\"ip\":\"24.3.1.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"pserv-1048576-6\",\"moduleSequenceNumber\":633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1048576-6\",\"moduleSequenceNumber\":634,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-6\",\"moduleSequenceNumber\":635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-6\",\"moduleSequenceNumber\":636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///c2889650-d6bf-4b60-b87b-b363bb7461e1\",\"moduleSequenceNumber\":2597}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-1048576-6\",\"moduleSequenceNumber\":637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1048576-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1048576-7\",\"httpPortOpen\":false,\"ip\":\"8.9.1.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"pserv-1048576-7\",\"moduleSequenceNumber\":638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1048576-7\",\"moduleSequenceNumber\":639,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-7\",\"moduleSequenceNumber\":640,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-7\",\"moduleSequenceNumber\":641,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///9f55ad83-ea40-4bec-b3ab-9fc976a7aab2\",\"moduleSequenceNumber\":2598}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-1048576-7\",\"moduleSequenceNumber\":642,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1048576-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1048576-8\",\"httpPortOpen\":false,\"ip\":\"15.5.9.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"pserv-1048576-8\",\"moduleSequenceNumber\":643,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1048576-8\",\"moduleSequenceNumber\":644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-8\",\"moduleSequenceNumber\":645,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-8\",\"moduleSequenceNumber\":646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///c2d13fc5-4c47-46ca-ab80-d62a4e85f1f4\",\"moduleSequenceNumber\":2599}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-1048576-8\",\"moduleSequenceNumber\":647,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1048576-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1048576-9\",\"httpPortOpen\":false,\"ip\":\"33.2.9.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"pserv-1048576-9\",\"moduleSequenceNumber\":648,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1048576-9\",\"moduleSequenceNumber\":649,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-9\",\"moduleSequenceNumber\":650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-9\",\"moduleSequenceNumber\":651,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///ed19e00f-03db-4051-bd46-84d101d3e32d\",\"moduleSequenceNumber\":2600}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-1048576-9\",\"moduleSequenceNumber\":652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1048576-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1048576-10\",\"httpPortOpen\":false,\"ip\":\"68.1.5.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"pserv-1048576-10\",\"moduleSequenceNumber\":653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1048576-10\",\"moduleSequenceNumber\":654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-10\",\"moduleSequenceNumber\":655,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-10\",\"moduleSequenceNumber\":656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///5d130d59-fd57-4318-85c9-3d3101f34c30\",\"moduleSequenceNumber\":2601}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-1048576-10\",\"moduleSequenceNumber\":657,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1048576-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1048576-11\",\"httpPortOpen\":false,\"ip\":\"73.6.7.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"pserv-1048576-11\",\"moduleSequenceNumber\":658,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1048576-11\",\"moduleSequenceNumber\":659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-11\",\"moduleSequenceNumber\":660,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-11\",\"moduleSequenceNumber\":661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///be1ca36d-f749-4dd2-ab79-d00763ececab\",\"moduleSequenceNumber\":2602}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-1048576-11\",\"moduleSequenceNumber\":662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1048576-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1048576-12\",\"httpPortOpen\":false,\"ip\":\"36.5.4.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"pserv-1048576-12\",\"moduleSequenceNumber\":663,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1048576-12\",\"moduleSequenceNumber\":664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-12\",\"moduleSequenceNumber\":665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-12\",\"moduleSequenceNumber\":666,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///ef952be7-c091-4e3c-8517-4a3c406537dc\",\"moduleSequenceNumber\":2603}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-1048576-12\",\"moduleSequenceNumber\":667,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1048576-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1048576-13\",\"httpPortOpen\":false,\"ip\":\"51.9.9.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"pserv-1048576-13\",\"moduleSequenceNumber\":668,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1048576-13\",\"moduleSequenceNumber\":669,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-13\",\"moduleSequenceNumber\":670,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-13\",\"moduleSequenceNumber\":671,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///9ae24883-9eca-4b81-89b1-cc8a7974dbfd\",\"moduleSequenceNumber\":2604}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-1048576-13\",\"moduleSequenceNumber\":672,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1048576-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1048576-14\",\"httpPortOpen\":false,\"ip\":\"22.4.2.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"pserv-1048576-14\",\"moduleSequenceNumber\":673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1048576-14\",\"moduleSequenceNumber\":674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-14\",\"moduleSequenceNumber\":675,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-14\",\"moduleSequenceNumber\":676,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///b82401fa-0ff4-4667-aa4a-ed18382ff837\",\"moduleSequenceNumber\":2605}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-1048576-14\",\"moduleSequenceNumber\":677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1048576-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1048576-15\",\"httpPortOpen\":false,\"ip\":\"98.9.3.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"pserv-1048576-15\",\"moduleSequenceNumber\":678,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1048576-15\",\"moduleSequenceNumber\":679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-15\",\"moduleSequenceNumber\":680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-15\",\"moduleSequenceNumber\":681,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///38cce14d-7ee8-4f81-8861-50bda43d3f8f\",\"moduleSequenceNumber\":2606}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-1048576-15\",\"moduleSequenceNumber\":682,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1048576-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1048576-16\",\"httpPortOpen\":false,\"ip\":\"78.5.7.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"pserv-1048576-16\",\"moduleSequenceNumber\":683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1048576-16\",\"moduleSequenceNumber\":684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-16\",\"moduleSequenceNumber\":685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-16\",\"moduleSequenceNumber\":686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///d2e38c83-13c2-4f42-9a66-7e3e2ea29d8f\",\"moduleSequenceNumber\":2607}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-1048576-16\",\"moduleSequenceNumber\":687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1048576-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1048576-17\",\"httpPortOpen\":false,\"ip\":\"81.9.3.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"pserv-1048576-17\",\"moduleSequenceNumber\":688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1048576-17\",\"moduleSequenceNumber\":689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-17\",\"moduleSequenceNumber\":690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-17\",\"moduleSequenceNumber\":691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///c7740a94-5e40-48ac-8e65-397ac5ebe140\",\"moduleSequenceNumber\":2608}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-1048576-17\",\"moduleSequenceNumber\":692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1048576-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1048576-18\",\"httpPortOpen\":false,\"ip\":\"38.8.3.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"pserv-1048576-18\",\"moduleSequenceNumber\":693,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1048576-18\",\"moduleSequenceNumber\":694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-18\",\"moduleSequenceNumber\":695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-18\",\"moduleSequenceNumber\":696,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///4b1597cd-7501-4874-b0c7-ff1dab6aff1d\",\"moduleSequenceNumber\":2609}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-1048576-18\",\"moduleSequenceNumber\":697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1048576-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1048576-19\",\"httpPortOpen\":false,\"ip\":\"12.3.6.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"pserv-1048576-19\",\"moduleSequenceNumber\":698,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1048576-19\",\"moduleSequenceNumber\":699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-19\",\"moduleSequenceNumber\":700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-19\",\"moduleSequenceNumber\":701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///b0c79609-d6ce-42d7-b20e-de7d7a7101b9\",\"moduleSequenceNumber\":2610}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-1048576-19\",\"moduleSequenceNumber\":702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1048576-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1048576-20\",\"httpPortOpen\":false,\"ip\":\"4.4.5.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"pserv-1048576-20\",\"moduleSequenceNumber\":703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1048576-20\",\"moduleSequenceNumber\":704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-20\",\"moduleSequenceNumber\":705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-20\",\"moduleSequenceNumber\":706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///d23ff87c-558f-470a-ba70-993cc3e4d3c0\",\"moduleSequenceNumber\":2611}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-1048576-20\",\"moduleSequenceNumber\":707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1048576-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1048576-21\",\"httpPortOpen\":false,\"ip\":\"78.5.9.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"pserv-1048576-21\",\"moduleSequenceNumber\":708,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1048576-21\",\"moduleSequenceNumber\":709,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-21\",\"moduleSequenceNumber\":710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-21\",\"moduleSequenceNumber\":711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///51683e46-05be-424d-95ae-81a693d79fbc\",\"moduleSequenceNumber\":2612}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-1048576-21\",\"moduleSequenceNumber\":712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1048576-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1048576-22\",\"httpPortOpen\":false,\"ip\":\"54.8.2.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"pserv-1048576-22\",\"moduleSequenceNumber\":713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1048576-22\",\"moduleSequenceNumber\":714,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-22\",\"moduleSequenceNumber\":715,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-22\",\"moduleSequenceNumber\":716,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///52ad71ba-73ef-4440-a405-6ead34413838\",\"moduleSequenceNumber\":2613}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-1048576-22\",\"moduleSequenceNumber\":717,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1048576-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1048576-23\",\"httpPortOpen\":false,\"ip\":\"54.3.5.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host)\\r\\n\\t\\t\\tknownHosts[host] = server\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// The server is \\\"empty\\\", which means the Bitburner code assumes $1 per thread as basis.\\r\\n\\t// See https://steamcommunity.com/app/1812820/discussions/0/5545618081297574632/#c3200369112086161192.\\r\\n\\t// Nevertheless, this is only true for the first attacker in a distributed attack,\\r\\n\\t// as the game does all its calculations for grow(), weaken() and hack() AFTER the wait time\\r\\n\\t// for the call which means in a distributed attack, each attack ending influences the attacks\\r\\n\\t// ending after that one even if they were all started under the same conditions\\r\\n\\tif (money <= 0) {\\r\\n\\t\\tmoney = Math.max(threadsAvail, 1)\\r\\n\\t\\t// Edge case, if there are more attack threads available than the maximum\\r\\n\\t\\t// amount of money on the server. No idea how the game handles that, but lets\\r\\n\\t\\t// just assume $1 per thread holds true and return one thread for each dollar\\r\\n\\t\\t// we want\\r\\n\\t\\tif (threadsAvail > server.moneyMax) {\\r\\n\\t\\t\\treturn server.moneyMax\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getHackThreads(ns, server) {\\r\\n\\tvar money = server.moneyAvailable - 10000\\r\\n\\tvar hackThreads = Math.ceil(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar result = {\\r\\n\\t\\tmoneyThreshold: moneyThreshold,\\r\\n\\t\\tsecurityThreshold: securityThreshold,\\r\\n\\t\\tweakenThreads: getWeakenThreads(ns, server, attacker),\\r\\n\\t\\tgrowThreads: getGrowThreads(ns, server, attacker),\\r\\n\\t\\thackThreads: getHackThreads(ns, server)\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 8\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar addonInfo = getAdditionalServerInfo(ns, target)\\r\\n\\tvar requiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\taddonInfo = getAdditionalServerInfo(ns, target, servers[0])\\r\\n\\trequiredThreads = addonInfo[attack[\\\"threads\\\"]]\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > requiredThreads) {\\r\\n\\t\\t\\tserverThreads = requiredThreads\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\trequiredThreads = requiredThreads - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (requiredThreads <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": addonInfo[attack[\\\"threads\\\"]],\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.25,\"server\":\"pserv-1048576-23\",\"moduleSequenceNumber\":718,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-1048576-23\",\"moduleSequenceNumber\":719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-23\",\"moduleSequenceNumber\":720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-1048576-23\",\"moduleSequenceNumber\":721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///dd613b4a-a3ff-43a8-b0ae-76cfdc46c8b3\",\"moduleSequenceNumber\":2614}],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-1048576-23\",\"moduleSequenceNumber\":722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.022,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.022,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.022,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.022,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.022,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":4.0564,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.022,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.022,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.022,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":50.8116,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.022,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.022,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.022,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.022,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.022,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.022,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.022,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.022,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.022,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":1.4315,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.022,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.022,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":1.6195,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0256,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.022,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.022,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.022,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.022,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":26.2547,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.022,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.022,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.022,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.022,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.022,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.022,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0499,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.022,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0221,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":63.0954,\"isBanned\":false,\"isMember\":true,\"name\":\"Daedalus\",\"playerReputation\":413690.6907166618}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":219.8187,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":320404.27679891547}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":198.4884,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":304607.90080054384}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":205.6711,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":311022.3187880533}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":112.5806,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":152.3537,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":71.8255,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":70.5128,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":128.2931,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":30.0299,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":163.1857,\"isBanned\":false,\"isMember\":true,\"name\":\"Speakers for the Dead\",\"playerReputation\":1040340.2467060199}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":30.2125,\"isBanned\":false,\"isMember\":true,\"name\":\"The Dark Army\",\"playerReputation\":125200.38718933331}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":125.4661,\"isBanned\":false,\"isMember\":true,\"name\":\"The Syndicate\",\"playerReputation\":211006.84139294137}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":87.126,\"isBanned\":false,\"isMember\":true,\"name\":\"Tetrads\",\"playerReputation\":178623.65717306198}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":111.5528,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":211254.3014420016}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":169.6307,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":192101.8976010043}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":208.3801,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":307363.8539588233}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":202.2899,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":308515.99070020067}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":27042.147828050332,\"lastPrice\":27016.362522530682,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.49,\"b\":true,\"otlkMag\":18.657250598270796,\"otlkMagForecast\":69.55678594893756,\"cap\":237881857,\"spreadPerc\":0.1,\"shareTxForMovement\":70737,\"shareTxUntilMovement\":70737,\"totalShares\":90700000,\"maxShares\":18100000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":38368.09387141333,\"lastPrice\":38338.223453288716,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.4,\"b\":true,\"otlkMag\":18.686441978966975,\"otlkMagForecast\":67.58157185960587,\"cap\":663940881,\"spreadPerc\":0.1,\"shareTxForMovement\":56400,\"shareTxUntilMovement\":56400,\"totalShares\":82300000,\"maxShares\":16500000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":21650.238471616765,\"lastPrice\":21682.2882922148,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":false,\"otlkMag\":12.432698217747406,\"otlkMagForecast\":37.426817208695546,\"cap\":354327126,\"spreadPerc\":0.2,\"shareTxForMovement\":74273,\"shareTxUntilMovement\":74273,\"totalShares\":66900000,\"maxShares\":13400000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":14347.872078344803,\"lastPrice\":14328.335742361282,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":11.980828042883623,\"otlkMagForecast\":61.24744081975462,\"cap\":17562555,\"spreadPerc\":0.4,\"shareTxForMovement\":35559,\"shareTxUntilMovement\":35559,\"totalShares\":134500000,\"maxShares\":26900000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":32646.3003918157,\"lastPrice\":32603.75116244397,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":10.476828957253318,\"otlkMagForecast\":61.871638476798765,\"cap\":703524412,\"spreadPerc\":0.4,\"shareTxForMovement\":55837,\"shareTxUntilMovement\":55837,\"totalShares\":45600000,\"maxShares\":9100000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":52902.25113541721,\"lastPrice\":52798.38085491868,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.01,\"b\":false,\"otlkMag\":17.89904410359289,\"otlkMagForecast\":34.732033223260125,\"cap\":877027046,\"spreadPerc\":0.5,\"shareTxForMovement\":33343,\"shareTxUntilMovement\":33343,\"totalShares\":35900000,\"maxShares\":7200000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":23341.160335384546,\"lastPrice\":23304.845377983456,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":9.117500108745256,\"otlkMagForecast\":60.59735293278796,\"cap\":599561765,\"spreadPerc\":0.3,\"shareTxForMovement\":84809,\"shareTxUntilMovement\":84809,\"totalShares\":78600000,\"maxShares\":15700000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":42668.28816570795,\"lastPrice\":42568.78844490398,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.2,\"b\":true,\"otlkMag\":16.22650440588702,\"otlkMagForecast\":65.4717516186908,\"cap\":455053648,\"spreadPerc\":0.6,\"shareTxForMovement\":71974,\"shareTxUntilMovement\":71974,\"totalShares\":57200000,\"maxShares\":11400000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":11774.552116848896,\"lastPrice\":11753.946977168565,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.9,\"b\":true,\"otlkMag\":6.030993045919369,\"otlkMagForecast\":57.00772977503678,\"cap\":601834357,\"spreadPerc\":0.5,\"shareTxForMovement\":42832,\"shareTxUntilMovement\":42832,\"totalShares\":49100000,\"maxShares\":9800000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":7408.974545748027,\"lastPrice\":7418.9321880080915,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":10.86977282295808,\"otlkMagForecast\":59.913881292925645,\"cap\":50219765,\"spreadPerc\":0.9,\"shareTxForMovement\":78185,\"shareTxUntilMovement\":78185,\"totalShares\":126000000,\"maxShares\":25200000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":11607.31356692508,\"lastPrice\":11592.86183290015,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":false,\"otlkMag\":7.841841332415369,\"otlkMagForecast\":40.544524339742544,\"cap\":145648345,\"spreadPerc\":0.2,\"shareTxForMovement\":77845,\"shareTxUntilMovement\":77845,\"totalShares\":74500000,\"maxShares\":14900000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":13907.785379535115,\"lastPrice\":13928.644597949005,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":7.286221587589885,\"otlkMagForecast\":42.672028278339816,\"cap\":87372392,\"spreadPerc\":0.4,\"shareTxForMovement\":69771,\"shareTxUntilMovement\":69771,\"totalShares\":101800000,\"maxShares\":20400000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":15514.859453508909,\"lastPrice\":15535.711383718588,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":false,\"otlkMag\":5.758660075565897,\"otlkMagForecast\":42.37908176407024,\"cap\":218990391,\"spreadPerc\":0.4,\"shareTxForMovement\":78872,\"shareTxUntilMovement\":78872,\"totalShares\":38900000,\"maxShares\":7800000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":20597.602905131334,\"lastPrice\":20577.16177164938,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.51,\"b\":true,\"otlkMag\":9.755350896059113,\"otlkMagForecast\":59.55329983125124,\"cap\":140568652,\"spreadPerc\":0.9,\"shareTxForMovement\":73752,\"shareTxUntilMovement\":73752,\"totalShares\":44100000,\"maxShares\":8800000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":9945.168469726395,\"lastPrice\":9956.016465258097,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":false,\"otlkMag\":5.430248818886867,\"otlkMagForecast\":44.0935217060148,\"cap\":35507568,\"spreadPerc\":1,\"shareTxForMovement\":82199,\"shareTxUntilMovement\":82199,\"totalShares\":73100000,\"maxShares\":14600000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":20242.161117986016,\"lastPrice\":20216.171961454787,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":true,\"otlkMag\":5.727389470700346,\"otlkMagForecast\":53.903179551007604,\"cap\":350792071,\"spreadPerc\":0.7,\"shareTxForMovement\":100536,\"shareTxUntilMovement\":100536,\"totalShares\":42200000,\"maxShares\":8400000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":26807.701831664002,\"lastPrice\":26844.25347864845,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":10.247331529720833,\"otlkMagForecast\":59.296114444914366,\"cap\":127179952,\"spreadPerc\":0.9,\"shareTxForMovement\":79236,\"shareTxUntilMovement\":79236,\"totalShares\":39900000,\"maxShares\":8000000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":18134.829213101526,\"lastPrice\":18156.023267588967,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":11.02043201862793,\"otlkMagForecast\":40.793992833605344,\"cap\":99667030,\"spreadPerc\":0.7,\"shareTxForMovement\":50943,\"shareTxUntilMovement\":50943,\"totalShares\":35700000,\"maxShares\":7100000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":22288.40429120029,\"lastPrice\":22319.66226332244,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":false,\"otlkMag\":1.6725188021511848,\"otlkMagForecast\":51.17861295203691,\"cap\":208741774,\"spreadPerc\":1,\"shareTxForMovement\":75647,\"shareTxUntilMovement\":75647,\"totalShares\":28200000,\"maxShares\":5600000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":3797.089614521664,\"lastPrice\":3815.8755960000885,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.54,\"b\":false,\"otlkMag\":7.791559348645858,\"otlkMagForecast\":43.82823584367813,\"cap\":170951379,\"spreadPerc\":0.8,\"shareTxForMovement\":22023,\"shareTxUntilMovement\":22023,\"totalShares\":64200000,\"maxShares\":12800000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":7465.853142238735,\"lastPrice\":7447.719599647472,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.25,\"b\":true,\"otlkMag\":6.564622076266019,\"otlkMagForecast\":57.11370061388215,\"cap\":179385342,\"spreadPerc\":1.1,\"shareTxForMovement\":66191,\"shareTxUntilMovement\":66191,\"totalShares\":39300000,\"maxShares\":7900000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":2593.8882758299674,\"lastPrice\":2597.0713088349426,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":false,\"otlkMag\":3.23001144725907,\"otlkMagForecast\":48.9258301136318,\"cap\":35162884,\"spreadPerc\":1,\"shareTxForMovement\":116331,\"shareTxUntilMovement\":116331,\"totalShares\":66200000,\"maxShares\":13200000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":5553.0703443864795,\"lastPrice\":5572.431689764358,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.79,\"b\":false,\"otlkMag\":8.03568810412916,\"otlkMagForecast\":41.91775605734971,\"cap\":69193392,\"spreadPerc\":0.9,\"shareTxForMovement\":80886,\"shareTxUntilMovement\":80886,\"totalShares\":36500000,\"maxShares\":7300000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":5492.397549360472,\"lastPrice\":5509.193745724673,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.57,\"b\":true,\"otlkMag\":5.916369212656936,\"otlkMagForecast\":55.197928651654536,\"cap\":79121163,\"spreadPerc\":0.9,\"shareTxForMovement\":46948,\"shareTxUntilMovement\":46948,\"totalShares\":30200000,\"maxShares\":6000000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":5392.797049961997,\"lastPrice\":5403.196218034457,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.99,\"b\":true,\"otlkMag\":5.10296198834265,\"otlkMagForecast\":52.45304824492289,\"cap\":96195141,\"spreadPerc\":0.5,\"shareTxForMovement\":75349,\"shareTxUntilMovement\":75349,\"totalShares\":32200000,\"maxShares\":6400000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":7310.6259572435765,\"lastPrice\":7261.967084358171,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.44,\"b\":true,\"otlkMag\":5.509955057584443,\"otlkMagForecast\":52.52998119955988,\"cap\":24176613,\"spreadPerc\":0.8,\"shareTxForMovement\":50266,\"shareTxUntilMovement\":50266,\"totalShares\":13300000,\"maxShares\":2700000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":1863.3044985438096,\"lastPrice\":1859.392990109451,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.08,\"b\":true,\"otlkMag\":3.07299874212226,\"otlkMagForecast\":51.33555673539098,\"cap\":19102533,\"spreadPerc\":1.3,\"shareTxForMovement\":38774,\"shareTxUntilMovement\":38774,\"totalShares\":34400000,\"maxShares\":6900000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":3812.0198609968056,\"lastPrice\":3817.737216615165,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":1.6403776546771491,\"otlkMagForecast\":47.20205665591385,\"cap\":31836228,\"spreadPerc\":0.6,\"shareTxForMovement\":84012,\"shareTxUntilMovement\":84012,\"totalShares\":11900000,\"maxShares\":2400000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":1271.9815568364477,\"lastPrice\":1276.6642094952263,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.89,\"b\":true,\"otlkMag\":5.379895629675341,\"otlkMagForecast\":51.18866026381479,\"cap\":15135782,\"spreadPerc\":0.9,\"shareTxForMovement\":35528,\"shareTxUntilMovement\":35528,\"totalShares\":15800000,\"maxShares\":3200000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":170.03617916519482,\"lastPrice\":168.95673871642305,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.28,\"b\":true,\"otlkMag\":2.47295180917344,\"otlkMagForecast\":48.29925643522709,\"cap\":5251775,\"spreadPerc\":0.6,\"shareTxForMovement\":51226,\"shareTxUntilMovement\":51226,\"totalShares\":78800000,\"maxShares\":15800000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":93.28198439527858,\"lastPrice\":92.99578436526167,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.58,\"b\":false,\"otlkMag\":15.565618079603283,\"otlkMagForecast\":35.903541954485206,\"cap\":2783978,\"spreadPerc\":1.3,\"shareTxForMovement\":55958,\"shareTxUntilMovement\":55958,\"totalShares\":295900000,\"maxShares\":59200000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":34323.59180133451,\"lastPrice\":34270.19000998362,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":false,\"otlkMag\":7.286268161530977,\"otlkMagForecast\":41.978413379270876,\"cap\":62336751,\"spreadPerc\":0.4,\"shareTxForMovement\":127292,\"shareTxUntilMovement\":127292,\"totalShares\":15400000,\"maxShares\":3100000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":14767.463853656309,\"lastPrice\":14782.70898296295,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.53,\"b\":false,\"otlkMag\":12.116303589670641,\"otlkMagForecast\":37.31529713950677,\"cap\":273706318,\"spreadPerc\":1,\"shareTxForMovement\":115334,\"shareTxUntilMovement\":115334,\"totalShares\":22400000,\"maxShares\":4500000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":16,\"lastUpdate\":1660861430453,\"ticksUntilCycle\":51}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":240,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":2,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"one-dark\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#98C379\",\"primary\":\"#98C379\",\"primarydark\":\"#98C379\",\"successlight\":\"#98C379\",\"success\":\"#98C379\",\"successdark\":\"#98C379\",\"errorlight\":\"#E06C75\",\"error\":\"#BE5046\",\"errordark\":\"#BE5046\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E5C07B\",\"warning\":\"#E5C07B\",\"warningdark\":\"#D19A66\",\"infolight\":\"#61AFEF\",\"info\":\"#61AFEF\",\"infodark\":\"#61AFEF\",\"welllight\":\"#4B5263\",\"well\":\"#282C34\",\"white\":\"#ABB2BF\",\"black\":\"#282C34\",\"hp\":\"#E06C75\",\"money\":\"#E5C07B\",\"hack\":\"#98C379\",\"combat\":\"#ABB2BF\",\"cha\":\"#C678DD\",\"int\":\"#61AFEF\",\"rep\":\"#ABB2BF\",\"disabled\":\"#56B6C2\",\"backgroundprimary\":\"#282C34\",\"backgroundsecondary\":\"#21252B\",\"button\":\"#4B5263\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-47,\"y\":14,\"opened\":false},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}}}","VersionSave":"23","AllGangsSave":"","LastExportBonus":"1660861433807","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}