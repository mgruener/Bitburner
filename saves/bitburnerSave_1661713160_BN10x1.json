{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":241,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":34},\"exp\":{\"hacking\":162040161.21193397,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":990.0636989013514},\"mults\":{\"hacking_chance\":1.622706301344384,\"hacking_speed\":1.6713874903847155,\"hacking_money\":1.622706301344384,\"hacking_grow\":1.622706301344384,\"hacking\":1.703841616411603,\"strength\":1.8030070014937598,\"defense\":1.8030070014937598,\"dexterity\":2.0824730867252925,\"agility\":1.5776311263070397,\"charisma\":1.983307701643136,\"hacking_exp\":2.4989677040703513,\"strength_exp\":1.6527564180359466,\"defense_exp\":1.6527564180359466,\"dexterity_exp\":1.6527564180359466,\"agility_exp\":1.6527564180359466,\"charisma_exp\":1.6527564180359466,\"company_rep\":2.5088842425785667,\"faction_rep\":1.9006698807413385,\"crime_money\":1.5025058345781332,\"crime_success\":1.5025058345781332,\"hacknet_node_money\":1.5025058345781332,\"hacknet_node_purchase_cost\":0.6485166164253777,\"hacknet_node_ram_cost\":0.6485166164253777,\"hacknet_node_core_cost\":0.6485166164253777,\"hacknet_node_level_cost\":0.6485166164253777,\"work_money\":1.6527564180359466,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"money\":25092178440.58072,\"city\":\"Aevum\",\"location\":\"NetLink Technologies\",\"jobs\":{},\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-4096\",\"pserv-4096-0\",\"pserv-4096-1\",\"pserv-4096-2\",\"pserv-4096-3\",\"pserv-4096-4\",\"pserv-4096-5\",\"pserv-4096-6\",\"pserv-4096-7\",\"pserv-4096-8\",\"pserv-4096-9\",\"pserv-4096-10\",\"pserv-4096-11\",\"pserv-4096-12\",\"pserv-4096-13\"],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"NiteSec\",\"Chongqing\",\"Ishima\",\"New Tokyo\",\"Tian Di Hui\",\"CyberSec\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":27,\"name\":\"NeuroFlux Governor\"},{\"level\":28,\"name\":\"NeuroFlux Governor\"},{\"level\":29,\"name\":\"NeuroFlux Governor\"},{\"level\":30,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"level\":26,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Nanofiber Weave\"}],\"sourceFiles\":[{\"lvl\":1,\"n\":1},{\"lvl\":1,\"n\":5}],\"numPeopleKilled\":0,\"karma\":0,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":23,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":1},\"exp\":{\"hacking\":2126.8603125000022,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.1025,\"hacking_speed\":1.050804,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1.2740490000000002,\"hacking_exp\":2.3244374999999997,\"strength\":1.2,\"strength_exp\":1.265,\"defense\":1.2,\"defense_exp\":1.265,\"dexterity\":1.3860000000000001,\"dexterity_exp\":1.265,\"agility\":1.05,\"agility_exp\":1.265,\"charisma\":1.32,\"charisma_exp\":1.265,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1.6698,\"faction_rep\":1.265,\"work_money\":1.1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen I\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"Neuregen Gene Modification\",\"level\":1}],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveFactionWork\",\"data\":{\"type\":\"FACTION\",\"factionWorkType\":\"HACKING\",\"factionName\":\"Chongqing\"}},\"memory\":1,\"shock\":100,\"storedCycles\":2,\"sync\":100}}],\"sleevesFromCovenant\":0,\"bitNodeN\":10,\"entropy\":0,\"lastUpdate\":1661713159999,\"lastSave\":1661713113801,\"totalPlaytime\":1888836600,\"playtimeSinceLastAug\":32550800,\"playtimeSinceLastBitnode\":635134400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":257057588614,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":-1195000000,\"stock\":0,\"total\":25091178440.58072,\"work\":0,\"servers\":-92366653056.00003,\"other\":-287500000,\"augmentations\":-138117257117.41925}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":382981643519.7854,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":-1524000000,\"stock\":0,\"total\":36626504138.68573,\"work\":0,\"servers\":-176525077268.31656,\"other\":-2052200000,\"augmentations\":-166253862112.78296}},\"scriptProdSinceLastAug\":257057588614,\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1659824867829},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1659825047835},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1659979761452},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1660064291656},{\"ID\":\"FROZE\",\"unlockedOn\":1660070224596},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1660073344593},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1660074763681},{\"ID\":\"TOR\",\"unlockedOn\":1660156303324},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1660156543333},{\"ID\":\"NITESEC\",\"unlockedOn\":1660254508514},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1660254628533},{\"ID\":\"TRAVEL\",\"unlockedOn\":1660255468524},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1660485627110},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1660485627120},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1660485627122},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1660512825233},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1660566971219},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1660650992951},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1660678330325},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1660724917416},{\"ID\":\"4S\",\"unlockedOn\":1660751408262},{\"ID\":\"DONATION\",\"unlockedOn\":1660820248649},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1660847929353},{\"ID\":\"SF1.1\",\"unlockedOn\":1660863818847},{\"ID\":\"WORKOUT\",\"unlockedOn\":1660864298842},{\"ID\":\"SF5.1\",\"unlockedOn\":1661503823880}],\"terminalCommandHistory\":[\"backdoor\",\"home\",\"./scripts/compare-servers.js\",\"./scripts/server-upgrade-costs.js\",\"./scripts/setup-upgrade-infra.js 1\",\"scan\",\"./scripts/compare-servers.js\",\"./scripts/add-targets.js silver-helix\",\"./scripts/compare-servers.js\",\"ls\",\"cat j2.msg\",\"./fl1ght.exe\",\"ls\",\"cat nitesec-test.msg\",\"./scripts/find-server.js\",\"connect iron-gym\",\"connect zer0\",\"connect neo-net\",\"connect avmnite-02h\",\"analyze\",\"backdoor\",\"home\",\"connect darkweb\",\"backdoor\",\"analyze\",\"hack\",\"home\",\"./scratch/exp-farm.js\",\"connect darkweb\",\"analyze\",\"home\",\"./scripts/startup.js\",\"./scripts/server-upgrade-costs.js\",\"free\",\"./scripts/setup-upgrade-infra.js 1\",\"./scripts/startup.js\",\"./scripts/compare-servers.js\",\"./scripts/backdoor-worm.js\",\"./scripts/compare-servers.js\",\"./scripts/find-server.js computek\",\"connect iron-gym\",\"connect zer0\",\"connect neo-net\",\"connect computek\",\"analyze\",\"homr\",\"home\",\"./scripts/compare-servers.js\",\"./scripts/remove-targets.js catalyst summit-uni netlink computek\",\"./scripts/compare-servers.js\"],\"focus\":false,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":21680,\"factionWorkType\":\"HACKING\",\"factionName\":\"Chongqing\"}},\"identifier\":\"15ded30ed8298a\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":3,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"19.7.1.8\",\"isConnectedTo\":true,\"maxRam\":8192,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"Formulas.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"ramUsed\":8159.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/scripts/multi-target-scheduler.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":126169904.23251243,\"onlineMoneyMade\":205976658212,\"onlineRunningTime\":20705.01000004026,\"pid\":10111,\"ramUsage\":9.35,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///325f704d-4287-415a-ad6c-5d70970bcc12\",\"moduleSequenceNumber\":1580},{\"filename\":\"/scripts/multi-target-scheduler.js\",\"url\":\"blob:file:///970ef3dc-6ea6-4c25-abc0-f24fcf046832\",\"moduleSequenceNumber\":1604}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",331],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":64.81000000000039,\"pid\":17290,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":331,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///71aa1fee-1663-4fc7-9764-d4031684dadb\",\"moduleSequenceNumber\":1810}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",167],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.21000000000029,\"pid\":17293,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":167,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///71aa1fee-1663-4fc7-9764-d4031684dadb\",\"moduleSequenceNumber\":1810}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",152],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.41000000000008,\"pid\":17296,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":152,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///71aa1fee-1663-4fc7-9764-d4031684dadb\",\"moduleSequenceNumber\":1810}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",2932],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.00999999999993,\"pid\":17298,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":2932,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///2adf34e7-7605-4401-aa3d-b0757f6dfd33\",\"moduleSequenceNumber\":1979}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",721],\"dataMap\":{},\"filename\":\"/payload/hack-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.609999999999992,\"pid\":17307,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":721,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///c02c19bf-3144-40b5-ae43-94a3ca4c8dc1\",\"moduleSequenceNumber\":2244}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",375],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":17311,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":375,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///71aa1fee-1663-4fc7-9764-d4031684dadb\",\"moduleSequenceNumber\":1810}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    filter_adminRights,\\r\\n    filter_canNuke,\\r\\n    filter_minRam,\\r\\n    filter_hostname,\\r\\n    filter_playerServer,\\r\\n    getAllServers,\\r\\n    applyFilter,\\r\\n    deployPayload,\\r\\n    portOpener,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var noAdminFilter = filter_adminRights(false)\\r\\n    var hasAdminFilter = filter_adminRights(true)\\r\\n    var canNukeFilter = filter_canNuke(ns)\\r\\n    var ramFilter = filter_minRam(4)\\r\\n    var nameFilter = filter_hostname(ns, \\\"darkweb|home\\\")\\r\\n    var playerServerFilter = filter_playerServer()\\r\\n\\r\\n    var targets = getAllServers(ns)\\r\\n    targets = applyFilter(targets, [noAdminFilter, canNukeFilter], false, false)\\r\\n    targets = applyFilter(targets, [nameFilter, playerServerFilter])\\r\\n    for (const t in targets) {\\r\\n        ns.printf(\\\"Nuking Target: %s\\\", targets[t].hostname)\\r\\n        attack(ns, targets[t])\\r\\n    }\\r\\n\\r\\n    targets = getAllServers(ns)\\r\\n    targets = applyFilter(targets, [hasAdminFilter, ramFilter], false, false)\\r\\n    for (const t in targets) {\\r\\n        ns.printf(\\\"Deploying payload on Target: %s\\\", targets[t].hostname)\\r\\n        await deployPayload(ns, t)\\r\\n    }\\r\\n    for (const name of ns.getPurchasedServers()) {\\r\\n        ns.printf(\\\"Deploying payload on Target: %s\\\", name)\\r\\n        await deployPayload(ns, name)\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function attack(ns, target) {\\r\\n    var po = portOpener(ns)\\r\\n    if (target.openPortCount < target.numOpenPortsRequired) {\\r\\n        for (let attack of po) {\\r\\n            if (attack[\\\"check\\\"](target)) {\\r\\n                attack[\\\"func\\\"](target.hostname)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    ns.nuke(target.hostname)\\r\\n\\r\\n    // if (!target.backdoorInstalled) {\\r\\n    //     await ns.singularity.installBackdoor(target.hostname)\\r\\n    // }\\r\\n}\",\"filename\":\"/scripts/backdoor-worm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///3be6702e-5e2b-4db5-8708-f29c0cad7398\",\"moduleSequenceNumber\":53028},{\"filename\":\"/scripts/backdoor-worm.js\",\"url\":\"blob:file:///fbc4a2b4-a6f4-4074-833a-dcdcdf889497\",\"moduleSequenceNumber\":58104}],\"dependents\":[],\"ramUsage\":10.7,\"server\":\"home\",\"moduleSequenceNumber\":58104,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar host = ns.args[0]\\r\\n\\tvar threads = parseInt(ns.args[1])\\r\\n\\tvar cores = parseInt(ns.args[2])\\r\\n\\tvar resultHack = ns.hackAnalyzeSecurity(threads, host)\\r\\n\\tvar resultGrow = ns.growthAnalyzeSecurity(threads, host, cores)\\r\\n\\tvar resultWeaken = ns.weakenAnalyze(threads, cores)\\r\\n\\tns.tprintf(\\\"h: %s; g: %s; w: -%s\\\", resultHack, resultGrow, resultWeaken)\\r\\n}\\r\\n\",\"filename\":\"/scratch/test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scratch/test.js\",\"url\":\"blob:file:///ad2b7bcf-b248-43d2-a6e1-5ccbe009023a\",\"moduleSequenceNumber\":5524}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":1579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"home\",\"moduleSequenceNumber\":53028,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAdditionalServerInfo, hasFormulas } from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var server = ns.getServer(name)\\r\\n    var advancedServer = getAdditionalServerInfo(ns, server)\\r\\n\\r\\n    ns.tprint(name)\\r\\n    ns.tprintf(\\\"  Weaken time: %s\\\", ns.nFormat(advancedServer.weakenTime / 1000, \\\"00:00:00\\\"))\\r\\n    ns.tprintf(\\\"  Hack time: %s\\\", ns.nFormat(advancedServer.hackTime / 1000, \\\"00:00:00\\\"))\\r\\n    ns.tprintf(\\\"  Grow time: %s\\\", ns.nFormat(advancedServer.growTime / 1000, \\\"00:00:00\\\"))\\r\\n    ns.tprintf(\\\"  Max money: %s (%f)\\\", ns.nFormat(server.moneyMax, \\\"($0.00a)\\\"), server.moneyMax)\\r\\n    ns.tprintf(\\\"  Money: %s (%f)\\\", ns.nFormat(server.moneyAvailable, \\\"($0.00a)\\\"), server.moneyAvailable)\\r\\n    ns.tprintf(\\\"  Money threshold: %s (%f)\\\", ns.nFormat(advancedServer.moneyThreshold, \\\"($0.00a)\\\"), advancedServer.moneyThreshold)\\r\\n    ns.tprintf(\\\"  Max Regrow amount: %s (%f)\\\", ns.nFormat(advancedServer.maxRegrowAmount, \\\"($0.00a)\\\"), advancedServer.maxRegrowAmount)\\r\\n    ns.tprintf(\\\"  Growth rate: %d\\\", server.serverGrowth)\\r\\n    ns.tprintf(\\\"  Security min: %d\\\", server.minDifficulty)\\r\\n    ns.tprintf(\\\"  Security: %d\\\", server.hackDifficulty)\\r\\n    ns.tprintf(\\\"  Security threshold: %d\\\", advancedServer.securityThreshold)\\r\\n    ns.tprintf(\\\"  Weaken threads: %f\\\", advancedServer.weakenThreads)\\r\\n    ns.tprintf(\\\"  Grow threads: %f\\\", advancedServer.growThreads)\\r\\n    ns.tprintf(\\\"  Hack threads: %f\\\", advancedServer.hackThreads)\\r\\n    ns.tprintf(\\\"  Score: %s\\\", ns.nFormat(advancedServer.score, '0.00e+0'))\\r\\n    ns.tprintf(\\\"  TimeScore: %s/s\\\", ns.nFormat(advancedServer.timeScore, \\\"($0.00a)\\\"))\\r\\n}\\r\\n\\r\\n\",\"filename\":\"/scripts/analyze-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///9a8b37f0-dd00-4f89-8858-40a4c40312b7\",\"moduleSequenceNumber\":10589},{\"filename\":\"/scripts/analyze-server.js\",\"url\":\"blob:file:///d654e717-e11d-42d7-bed5-84a86b0350cc\",\"moduleSequenceNumber\":10590}],\"dependents\":[],\"ramUsage\":7.55,\"server\":\"home\",\"moduleSequenceNumber\":1581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { threadsAvailable } from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var threadSize = 0.15 + 1.6\\r\\n    let systemThreads = threadsAvailable(ns, threadSize, false)\\r\\n    let idleThreads = threadsAvailable(ns, threadSize, true)\\r\\n    ns.tprintf(\\\"==> Attack threads: %d (idle); %d (available)\\\", idleThreads, systemThreads)\\r\\n}\",\"filename\":\"/scripts/threads-available.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///7926943b-ab6d-44a3-a32e-f40ab4132812\",\"moduleSequenceNumber\":114289},{\"filename\":\"/scripts/threads-available.js\",\"url\":\"blob:file:///e72c6ba0-9b70-4980-8126-0fe4f12b53f5\",\"moduleSequenceNumber\":114290}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home\",\"moduleSequenceNumber\":1582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///2adf34e7-7605-4401-aa3d-b0757f6dfd33\",\"moduleSequenceNumber\":1979}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":1979,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///c02c19bf-3144-40b5-ae43-94a3ca4c8dc1\",\"moduleSequenceNumber\":2244}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":2244,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///71aa1fee-1663-4fc7-9764-d4031684dadb\",\"moduleSequenceNumber\":1810}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":1810,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    applyFilter,\\r\\n    filter_adminRights,\\r\\n    filter_minRamAvailable,\\r\\n    getAllServers,\\r\\n    performAttack,\\r\\n    getGrowAttack,\\r\\n    getWeakenAttack,\\r\\n    getHackAttack,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const targetName = ns.args[0]\\r\\n    const growAttack = getGrowAttack(ns)\\r\\n    const weakenAttack = getWeakenAttack(ns)\\r\\n    const hackAttack = getHackAttack(ns)\\r\\n    await ns.sleep(10000)\\r\\n\\r\\n    while (true) {\\r\\n        let target = ns.getServer(targetName)\\r\\n        let attackers = getAttackers(ns)\\r\\n\\r\\n        if (Object.keys(attackers).length <= 0) {\\r\\n            ns.print(\\\"No attackers available, sleeping 10 seconds before retrying\\\")\\r\\n            await ns.sleep(10000)\\r\\n            continue\\r\\n        }\\r\\n\\r\\n        if (target.hackDifficulty > target.securityThreshold) {\\r\\n            await ns.sleep(performAttack(ns, weakenAttack, target, attackers))\\r\\n        } else if (target.moneyAvailable < target.moneyThreshold) {\\r\\n            await ns.sleep(performAttack(ns, growAttack, target, attackers))\\r\\n        } else {\\r\\n            await ns.sleep(performAttack(ns, hackAttack, target, attackers))\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function getAttackers(ns) {\\r\\n    var hasAdminFilter = filter_adminRights(true)\\r\\n    // 1.6G base script size + 0.15G (weaken/grow)\\r\\n    // hack() requires 0.1G so it works everywhere where weaken/grow works\\r\\n    var ramFilter = filter_minRamAvailable(ns.getScriptRam(\\\"/payload/weaken-only.js\\\"))\\r\\n    return applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n}\\r\\n\\r\\n\",\"filename\":\"/scripts/single-target-scheduler.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///e34114a3-4a42-4b8a-9301-6dd5dd6934c8\",\"moduleSequenceNumber\":27714},{\"filename\":\"/scripts/single-target-scheduler.js\",\"url\":\"blob:file:///48284b6f-e9df-4c95-ba95-d2ec4a215546\",\"moduleSequenceNumber\":27715}],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"home\",\"moduleSequenceNumber\":1586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    buyServers,\\r\\n    upgradeServers,\\r\\n    buyHacknetNodes,\\r\\n    upgradeHacknetNodes,\\r\\n    getHacknetRamUpgrade,\\r\\n    getHacknetCoreUpgrade,\\r\\n    getHacknetLevelUpgrade,\\r\\n    schedule,\\r\\n    getServersByRam,\\r\\n    maxServerUpgrade,\\r\\n    bulkServerUpgrade,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var count = Infinity\\r\\n    if (ns.args.length > 0) {\\r\\n        count = parseInt(ns.args[0])\\r\\n    }\\r\\n\\r\\n    var completed = []\\r\\n    // with the ability to set a money limit with\\r\\n    // the money-limit.js script, there is no need\\r\\n    // to limit the size of our compute nodes here\\r\\n    var serverRamLimit = ns.getPurchasedServerMaxRam()\\r\\n    var hacknetNodeLimit = 8\\r\\n    var hacknetRamUpgrade = getHacknetRamUpgrade(ns, hacknetNodeLimit)\\r\\n    var doHacknet = false\\r\\n    var expected = doHacknet ? 6 : 2\\r\\n    var hacknetCoreUpgrade = getHacknetCoreUpgrade(ns, hacknetNodeLimit)\\r\\n    var hacknetLevelUpgrade = getHacknetLevelUpgrade(ns, hacknetNodeLimit)\\r\\n\\r\\n    ns.disableLog(\\\"disableLog\\\")\\r\\n    var markCompleted = (name) => {\\r\\n        if (!completed.includes(name)) {\\r\\n            completed.push(name)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    while ((completed.length < expected) && (count > 0)) {\\r\\n        let maxUpgrade = maxServerUpgrade(ns) > serverRamLimit ? serverRamLimit : maxServerUpgrade(ns)\\r\\n        let serversByRam = getServersByRam(ns)\\r\\n        let serverCount = ns.getPurchasedServers().length\\r\\n        let largestServer = serverCount > 0 ? Object.keys(serversByRam).sort()[0] : 0\\r\\n\\r\\n        ns.printf(\\\"MaxUpgrade: %d; largest Server: %d\\\", maxUpgrade, largestServer)\\r\\n        if ((maxUpgrade > 4) && (maxUpgrade > largestServer)) {\\r\\n            if (await bulkServerUpgrade(ns, maxUpgrade) && maxUpgrade >= serverRamLimit) {\\r\\n                markCompleted(\\\"buyServers\\\")\\r\\n                markCompleted(\\\"upgradeServers\\\")\\r\\n            }\\r\\n\\r\\n        } else {\\r\\n            if (await buyServers(ns)) {\\r\\n                markCompleted(\\\"buyServers\\\")\\r\\n            }\\r\\n            if (await upgradeServers(ns, serverRamLimit)) {\\r\\n                markCompleted(\\\"upgradeServers\\\")\\r\\n            }\\r\\n        }\\r\\n        // only start upgrading hacknet when we at least have\\r\\n        // a basic set of purchased servers\\r\\n        if (completed.includes(\\\"buyServers\\\") && doHacknet) {\\r\\n            if (buyHacknetNodes(ns, hacknetNodeLimit)) {\\r\\n                markCompleted(\\\"buyHacknetNodes\\\")\\r\\n            }\\r\\n            if (await upgradeHacknetNodes(ns, hacknetRamUpgrade)) {\\r\\n                markCompleted(\\\"buyHacknetRam\\\")\\r\\n            }\\r\\n            if (await upgradeHacknetNodes(ns, hacknetCoreUpgrade)) {\\r\\n                markCompleted(\\\"buyHacknetCores\\\")\\r\\n            }\\r\\n            if (await upgradeHacknetNodes(ns, hacknetLevelUpgrade)) {\\r\\n                markCompleted(\\\"buyHacknetLevel\\\")\\r\\n            }\\r\\n        }\\r\\n        if (!await schedule(ns, \\\"/scripts/backdoor-worm.js\\\")) {\\r\\n            ns.print(\\\"Failed to execute backdoor-worm\\\")\\r\\n        }\\r\\n        count--\\r\\n        if (count > 0) {\\r\\n            await ns.sleep(10000)\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/setup-upgrade-infra.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///55065c7b-3b6d-4ba8-9c18-711b5478f8ec\",\"moduleSequenceNumber\":53028},{\"filename\":\"/scripts/setup-upgrade-infra.js\",\"url\":\"blob:file:///f8d3d066-eb94-40af-b7bb-e65ca944f272\",\"moduleSequenceNumber\":58737}],\"dependents\":[],\"ramUsage\":21.3,\"server\":\"home\",\"moduleSequenceNumber\":58737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    filter_adminRights,\\r\\n    filter_minRamAvailable,\\r\\n    getAllServers,\\r\\n    applyFilter,\\r\\n    ramAvail,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var script = \\\"/payload/share.js\\\"\\r\\n    var scriptRam = ns.getScriptRam(script)\\r\\n    var hasAdminFilter = filter_adminRights(true)\\r\\n    var ramFilter = filter_minRamAvailable(scriptRam)\\r\\n    var targets = getAllServers(ns)\\r\\n    targets = applyFilter(targets, [hasAdminFilter, ramFilter], false, false)\\r\\n    for (const t in targets) {\\r\\n        // we don't ever want to use home to boost faction gain as the compute\\r\\n        // power there is way to valuable for that. Given a large enough size\\r\\n        // later in the game, most attacks are executed from home, so we can use\\r\\n        // all other compute power for sharing.\\r\\n        if (targets[t].hostname == \\\"home\\\") {\\r\\n            continue\\r\\n        }\\r\\n        let serverThreads = Math.floor(ramAvail(targets[t]) / scriptRam)\\r\\n        if (ns.exec(script, t, serverThreads) == 0) {\\r\\n            ns.tprintf(\\\"Failed to share() on '%s' with %d threads\\\", t, serverThreads)\\r\\n        }\\r\\n    }\\r\\n    await ns.sleep(2000)\\r\\n    ns.tprintf(\\\"Share power: %f\\\", ns.getSharePower())\\r\\n}\",\"filename\":\"/scripts/boost-faction-reputation.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///c9fa377f-8efe-4acc-ab92-889cf3703648\",\"moduleSequenceNumber\":51742},{\"filename\":\"/scripts/boost-faction-reputation.js\",\"url\":\"blob:file:///f63c3263-3ae7-453e-a520-ac2682b9ae62\",\"moduleSequenceNumber\":55701}],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"home\",\"moduleSequenceNumber\":1588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getSharePower\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { schedule } from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    if (!await schedule(ns, ...ns.args)) {\\r\\n        ns.print(\\\"Failed to execute '%s'\\\", ns.args[0])\\r\\n    }\\r\\n}\",\"filename\":\"run.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.55,\"server\":\"home\",\"moduleSequenceNumber\":1589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///a20ca803-efea-4f7b-a4a4-973c7fafd698\",\"moduleSequenceNumber\":6260}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":1590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    filter_hostname,\\r\\n    filter_playerServer,\\r\\n    getAllServers,\\r\\n    applyFilter,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var known = []\\r\\n    var nameFilter = filter_hostname(ns, \\\"darkweb|home\\\")\\r\\n    var playerServerFilter = filter_playerServer(true)\\r\\n    var targets = getAllServers(ns)\\r\\n    targets = applyFilter(targets, [nameFilter, playerServerFilter])\\r\\n\\r\\n\\r\\n    for (const t in targets) {\\r\\n        let result = []\\r\\n        for (const f of ns.ls(t)) {\\r\\n            if (f.startsWith(\\\"/payload/\\\") || f.startsWith(\\\"/lib/\\\") || f.startsWith(\\\"/scripts/\\\") || f.startsWith(\\\"/scratch/\\\")) {\\r\\n                continue\\r\\n            }\\r\\n            if (!known.includes(f)) {\\r\\n                result.push(f)\\r\\n                known.push(f)\\r\\n            }\\r\\n        }\\r\\n        if (result.length > 0) {\\r\\n            ns.tprintf(\\\"%s:\\\", t)\\r\\n            for (const f of result) {\\r\\n                ns.tprintf(\\\"  %s\\\", f)\\r\\n                if (f.endsWith(\\\".lit\\\")) {\\r\\n                    await ns.scp(f, \\\"home\\\", t)\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/find-files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///eb0a39a2-2c7b-45b9-b992-8caaa11f548a\",\"moduleSequenceNumber\":136926},{\"filename\":\"/scripts/find-files.js\",\"url\":\"blob:file:///c750a4a9-9a84-448e-a5f8-716975578a18\",\"moduleSequenceNumber\":147666}],\"dependents\":[],\"ramUsage\":8.35,\"server\":\"home\",\"moduleSequenceNumber\":1591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    applyFilter,\\r\\n    filter_adminRights,\\r\\n    filter_minRamAvailable,\\r\\n    getAllServers,\\r\\n    performAttack,\\r\\n    getGrowAttack,\\r\\n    getWeakenAttack,\\r\\n    getHackAttack,\\r\\n    getTargetAddPort,\\r\\n    getTargetRemovePort,\\r\\n    threadsAvailable,\\r\\n    sortObjectBy,\\r\\n    sortByKey,\\r\\n    getAdditionalServerInfo,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var targets = [...ns.args]\\r\\n    const growAttack = getGrowAttack(ns)\\r\\n    const weakenAttack = getWeakenAttack(ns)\\r\\n    const hackAttack = getHackAttack(ns)\\r\\n    ns.disableLog(\\\"disableLog\\\")\\r\\n    ns.disableLog(\\\"sleep\\\")\\r\\n\\r\\n    // If there is an already running instance of the scheduler\\r\\n    // just add the parameters as targets and exit. Bitburner\\r\\n    // itself prevents multiple instances of the same script running\\r\\n    // with the same parameters\\r\\n    if (isRunning(ns)) {\\r\\n        let addPort = getTargetAddPort(ns)\\r\\n        for (const t of targets) {\\r\\n            while (!addPort.tryWrite(t)) {\\r\\n                await ns.sleep(1000)\\r\\n            }\\r\\n        }\\r\\n        return\\r\\n    }\\r\\n\\r\\n    var procs = {}\\r\\n    var startDate = new Date()\\r\\n    while (true) {\\r\\n        let schedulables = getSchedulables(targets, procs)\\r\\n        for (const targetName of schedulables) {\\r\\n            let target = getAdditionalServerInfo(ns, ns.getServer(targetName))\\r\\n            let attackers = getAttackers(ns)\\r\\n\\r\\n            // no attackers available, skip this scheduling cycle\\r\\n            if (Object.keys(attackers).length <= 0) {\\r\\n                continue\\r\\n            }\\r\\n\\r\\n            var nextAttack = hackAttack\\r\\n            if (target.hackDifficulty > target.securityThreshold) {\\r\\n                nextAttack = weakenAttack\\r\\n            } else if (target.moneyAvailable < target.moneyThreshold) {\\r\\n                nextAttack = growAttack\\r\\n            }\\r\\n            var state = performAttack(ns, nextAttack, target, attackers)\\r\\n            procs[targetName] = state\\r\\n        }\\r\\n        printState(ns, procs, targets)\\r\\n        let waitResult = await wait(ns, procs, startDate)\\r\\n        procs = waitResult[\\\"procs\\\"]\\r\\n        startDate = waitResult[\\\"startDate\\\"]\\r\\n        targets = updateTargets(ns, targets)\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getAttackers(ns) {\\r\\n    var hasAdminFilter = filter_adminRights(true)\\r\\n    // 1.6G base script size + 0.15G (weaken/grow)\\r\\n    // hack() requires 0.1G so it works everywhere where weaken/grow works\\r\\n    var ramFilter = filter_minRamAvailable(ns.getScriptRam(\\\"/payload/weaken-only.js\\\"))\\r\\n    return applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n}\\r\\n\\r\\nfunction getSchedulables(targets, procs) {\\r\\n    var schedulables = []\\r\\n    var running = Object.keys(procs)\\r\\n    for (const t of targets) {\\r\\n        if (!running.includes(t)) {\\r\\n            schedulables.push(t)\\r\\n        }\\r\\n    }\\r\\n    return schedulables\\r\\n}\\r\\n\\r\\nasync function wait(ns, procs, startDate = new Date()) {\\r\\n    var newProcs = {}\\r\\n    await ns.sleep(200)\\r\\n    var newStartDate = new Date()\\r\\n    var endDate = new Date()\\r\\n    var iterationTime = endDate.getTime() - startDate.getTime()\\r\\n    ns.printf(\\\"Schedule iteration took %s ms\\\", iterationTime)\\r\\n    for (const proc in procs) {\\r\\n        let newWaitTime = procs[proc][\\\"waitTime\\\"] - iterationTime\\r\\n        let pids = procs[proc][\\\"pids\\\"]\\r\\n        let newPids = [...pids].filter((p) => ns.isRunning(p))\\r\\n        if (newPids.length < 1) {\\r\\n            continue\\r\\n        }\\r\\n        newProcs[proc] = procs[proc]\\r\\n        newProcs[proc][\\\"pids\\\"] = newPids\\r\\n        newProcs[proc][\\\"waitTime\\\"] = newWaitTime\\r\\n    }\\r\\n    return {\\r\\n        \\\"procs\\\": newProcs,\\r\\n        \\\"startDate\\\": newStartDate,\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction updateTargets(ns, current) {\\r\\n    var newTargets = [...current]\\r\\n    var addPort = getTargetAddPort(ns)\\r\\n    var removePort = getTargetRemovePort(ns)\\r\\n\\r\\n    while (!addPort.empty()) {\\r\\n        let data = addPort.read()\\r\\n        // Just a safety precaution as I have no idea\\r\\n        // how race-condition safe the port interface is.\\r\\n        // As in \\\"if empty() returns false, is it guaranteed to\\r\\n        // stay non empty in the current function?\\\"\\r\\n        // Also do not add targets that are already present\\r\\n        if ((data != \\\"NULL PORT DATA\\\") && (!newTargets.includes(data))) {\\r\\n            if (!ns.serverExists(data)) {\\r\\n                ns.printf(\\\"Failed to add new target, server does not exist: %s\\\", data)\\r\\n            }\\r\\n            newTargets.push(data)\\r\\n        }\\r\\n    }\\r\\n    while (!removePort.empty()) {\\r\\n        let data = removePort.read()\\r\\n        // See comment above\\r\\n        if (data != \\\"NULL PORT DATA\\\") {\\r\\n            newTargets = newTargets.filter((v) => v != data)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return newTargets\\r\\n}\\r\\n\\r\\nfunction printState(ns, procs, targets) {\\r\\n    var procNames = [...Object.keys(procs)].sort()\\r\\n    var sortedProcs = sortObjectBy(procs, sortByKey(\\\"waitTime\\\"))\\r\\n    if (sortedProcs.length > 0) {\\r\\n        ns.print(\\\"Running attacks:\\\")\\r\\n        for (const proc of sortedProcs) {\\r\\n            ns.printf(\\\"  %20s: %6s (s: %3d / %3d; t: %6d; rt: %6d; wt: %8s)\\\",\\r\\n                proc[\\\"target\\\"],\\r\\n                proc[\\\"operation\\\"],\\r\\n                proc[\\\"pids\\\"].length,\\r\\n                proc[\\\"serverCount\\\"],\\r\\n                proc[\\\"attackThreads\\\"],\\r\\n                proc[\\\"requiredThreads\\\"],\\r\\n                ns.nFormat(proc[\\\"waitTime\\\"] / 1000, \\\"00:00:00\\\"),\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n    var idleTargets = []\\r\\n    for (const t of targets) {\\r\\n        if (!procNames.includes(t)) {\\r\\n            idleTargets.push(t)\\r\\n        }\\r\\n    }\\r\\n    if (idleTargets.length > 0) {\\r\\n        ns.print(\\\"Idle targets:\\\")\\r\\n        for (const t of idleTargets) {\\r\\n            ns.printf(\\\"  %s\\\", t)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let maxAttackScriptSize = ns.getScriptRam(\\\"/payload/weaken-only.js\\\")\\r\\n    let systemThreads = threadsAvailable(ns, maxAttackScriptSize, false)\\r\\n    let idleThreads = threadsAvailable(ns, maxAttackScriptSize, true)\\r\\n    ns.printf(\\\"System threads: %d (idle); %d (available)\\\", idleThreads, systemThreads)\\r\\n}\\r\\n\\r\\nfunction isRunning(ns) {\\r\\n    var myself = ns.getScriptName()\\r\\n    var count = 0\\r\\n    for (const proc of ns.ps()) {\\r\\n        if (proc.filename == myself) {\\r\\n            count++\\r\\n        }\\r\\n        if (count > 1) {\\r\\n            return true\\r\\n        }\\r\\n    }\\r\\n    return false\\r\\n}\",\"filename\":\"/scripts/multi-target-scheduler.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///95a6c5c0-a475-4bbf-ab5e-88c2fc54809f\",\"moduleSequenceNumber\":53028},{\"filename\":\"/scripts/multi-target-scheduler.js\",\"url\":\"blob:file:///4f3f4b63-cf61-4968-a2e6-46d288a86fc5\",\"moduleSequenceNumber\":58105}],\"dependents\":[],\"ramUsage\":9.35,\"server\":\"home\",\"moduleSequenceNumber\":58105,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    getTargetAddPort,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var targets = ns.args\\r\\n    var addPort = getTargetAddPort(ns)\\r\\n    for (const t of targets) {\\r\\n        if (!ns.serverExists(t)) {\\r\\n            ns.tprintf(\\\"Server does not exist: %s\\\", t)\\r\\n        }\\r\\n        while (!addPort.tryWrite(t)) {\\r\\n            await ns.sleep(1000)\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/add-targets.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///de0a8cc2-9f3e-4a47-ad22-bb9639f95d71\",\"moduleSequenceNumber\":53028},{\"filename\":\"/scripts/add-targets.js\",\"url\":\"blob:file:///69edf1bf-cfa7-440c-a7fb-3eab07ad2228\",\"moduleSequenceNumber\":58106}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":58106,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    getTargetRemovePort,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var targets = ns.args\\r\\n    var removePort = getTargetRemovePort(ns)\\r\\n    for (const t of targets) {\\r\\n        while (!removePort.tryWrite(t)) {\\r\\n            await ns.sleep(1000)\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/remove-targets.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///8eae9111-e02b-4225-a63c-87ebca6f07ef\",\"moduleSequenceNumber\":53028},{\"filename\":\"/scripts/remove-targets.js\",\"url\":\"blob:file:///4f05c661-e772-40c3-9141-a547ad4774c4\",\"moduleSequenceNumber\":59854}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":59854,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    setMoneyLimit,\\r\\n    getMoneyLimit,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args.length < 1) {\\r\\n        ns.tprintf(\\\"Current money limit: %d\\\", getMoneyLimit(ns))\\r\\n        return\\r\\n    }\\r\\n    setMoneyLimit(ns, ns.args[0])\\r\\n    ns.tprintf(\\\"New money limit: %d\\\", getMoneyLimit(ns))\\r\\n}\\r\\n\",\"filename\":\"/scripts/money-limit.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///38f37ecb-2dcb-43cc-aa01-659b0c27cd7b\",\"moduleSequenceNumber\":4401},{\"filename\":\"/scripts/money-limit.js\",\"url\":\"blob:file:///74a582ff-9db2-4fd5-94ea-61f71843b326\",\"moduleSequenceNumber\":4565}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":1595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    getAllServers,\\r\\n    applyFilter,\\r\\n    filter_hackingSkill,\\r\\n    filter_minMaxMoney,\\r\\n    filter_adminRights,\\r\\n    sortObjectBy,\\r\\n    //sortByFunctionValue,\\r\\n    sortByKey,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    // can be used to add specialized sort functions \\r\\n    // if necessary, but most information should be\\r\\n    // already injected in the server object by getAdditionalServerInfo()\\r\\n    // during the getAllServers() call\\r\\n    var sortTypes = {\\r\\n        // \\\"weakenTime\\\": sortByFunctionValue(ns.getWeakenTime),\\r\\n        // \\\"growTime\\\": sortByFunctionValue(ns.getGrowTime),\\r\\n        // \\\"hackTime\\\": sortByFunctionValue(ns.getHackTime),\\r\\n    }\\r\\n\\r\\n    var sortType = \\\"moneyMax\\\"\\r\\n    if (ns.args.length > 0) {\\r\\n        sortType = ns.args[0]\\r\\n    }\\r\\n    var output = \\\"\\\"\\r\\n    if (ns.args.length > 1) {\\r\\n        output = ns.args[1]\\r\\n    }\\r\\n    var sortFunc = sortByKey(sortType)\\r\\n    if (Object.keys(sortTypes).includes(sortType)) {\\r\\n        sortFunc = sortTypes[sortType]\\r\\n    }\\r\\n\\r\\n    var skillFilter = filter_hackingSkill(ns.getHackingLevel())\\r\\n    var maxMoneyFilter = filter_minMaxMoney(1)\\r\\n    var hasAdminFilter = filter_adminRights(false)\\r\\n    var servers = applyFilter(getAllServers(ns), [skillFilter, hasAdminFilter])\\r\\n    servers = applyFilter(servers, [maxMoneyFilter], false)\\r\\n\\r\\n    for (const server of sortObjectBy(servers, sortFunc)) {\\r\\n        if (output != \\\"\\\") {\\r\\n            ns.tprintf(\\\"%s\\\", server[output])\\r\\n            continue\\r\\n        }\\r\\n        ns.tprintf(\\r\\n            \\\"%20s: sc: %8s; tsc: %8s; m: %8s; gr: %4d; sm: %3d; wt: %8s; gt: %8s; ht: %8s\\\",\\r\\n            server.hostname,\\r\\n            ns.nFormat(server.score, '0.00e+0'),\\r\\n            ns.nFormat(server.timeScore, \\\"($0.00a)\\\"),\\r\\n            ns.nFormat(server.moneyMax, \\\"($0.00a)\\\"),\\r\\n            server.serverGrowth,\\r\\n            server.minDifficulty,\\r\\n            ns.nFormat(server.weakenTime / 1000, \\\"00:00:00\\\"),\\r\\n            ns.nFormat(server.growTime / 1000, \\\"00:00:00\\\"),\\r\\n            ns.nFormat(server.hackTime / 1000, \\\"00:00:00\\\"),\\r\\n        )\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/compare-servers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///e3eb0a21-045b-40f8-8655-91ab6f8bc890\",\"moduleSequenceNumber\":53028},{\"filename\":\"/scripts/compare-servers.js\",\"url\":\"blob:file:///06cdea49-6c62-4e75-b110-fc8556e12a43\",\"moduleSequenceNumber\":59219}],\"dependents\":[],\"ramUsage\":7.6,\"server\":\"home\",\"moduleSequenceNumber\":59219,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var base = 8\\r\\n    var ram = base\\r\\n    while (ram <= ns.getPurchasedServerMaxRam()) {\\r\\n        ns.tprintf(\\r\\n            \\\"%9s: %8s (%8s)\\\",\\r\\n            ns.nFormat(ram * 1024 * 1024 * 1024, \\\"0.00ib\\\"),\\r\\n            ns.nFormat(ns.getPurchasedServerCost(ram), \\\"($0.00a)\\\"),\\r\\n            ns.nFormat(ns.getPurchasedServerCost(ram) * ns.getPurchasedServerLimit(), \\\"($0.00a)\\\")\\r\\n        )\\r\\n        ram = ram * 2\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/server-upgrade-costs.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/server-upgrade-costs.js\",\"url\":\"blob:file:///e126cd10-b53e-4f76-a04d-303c26f7ff14\",\"moduleSequenceNumber\":15451}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":15451,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    getAllServers,\\r\\n    applyFilter,\\r\\n    filter_hackingSkill,\\r\\n    filter_minMaxMoney,\\r\\n    filter_adminRights,\\r\\n    getTargetAddPort,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var skillFilter = filter_hackingSkill(ns.getHackingLevel())\\r\\n    var maxMoneyFilter = filter_minMaxMoney(1)\\r\\n    var hasAdminFilter = filter_adminRights(false)\\r\\n    var servers = applyFilter(getAllServers(ns), [skillFilter, hasAdminFilter])\\r\\n    servers = applyFilter(servers, [maxMoneyFilter], false)\\r\\n\\r\\n    var addPort = getTargetAddPort(ns)\\r\\n    for (const t of Object.keys(servers)) {\\r\\n        ns.tprintf(\\\"Adding %s as target\\\", t)\\r\\n        while (!addPort.tryWrite(t)) {\\r\\n            await ns.sleep(1000)\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/add-all-targets.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///a66c4c17-5cc8-4a5e-9305-3d87b3b3df48\",\"moduleSequenceNumber\":10589},{\"filename\":\"/scripts/add-all-targets.js\",\"url\":\"blob:file:///c00698d3-c5b2-401c-9fb0-04c14583db4a\",\"moduleSequenceNumber\":10955}],\"dependents\":[],\"ramUsage\":7.6,\"server\":\"home\",\"moduleSequenceNumber\":1598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    portOpener,\\r\\n    threadsAvailable,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hackScheduler = \\\"/scripts/multi-target-scheduler.js\\\"\\r\\n    ns.exec(\\\"/scripts/backdoor-worm.js\\\", \\\"home\\\")\\r\\n    if (!ns.scriptRunning(hackScheduler, \\\"home\\\")) {\\r\\n        ns.tail(ns.exec(hackScheduler, \\\"home\\\"))\\r\\n    }\\r\\n\\r\\n    var portOpenerSeen = portOpener(ns).length\\r\\n    while (true) {\\r\\n        var currentPortOpener = portOpener(ns).length\\r\\n        if (currentPortOpener > portOpenerSeen) {\\r\\n            ns.exec(\\\"/scripts/backdoor-worm.js\\\", \\\"home\\\")\\r\\n            portOpenerSeen = currentPortOpener\\r\\n        }\\r\\n\\r\\n        var player = ns.getPlayer()\\r\\n        var sleeveCount = ns.sleeve.getNumSleeves()\\r\\n        var threadsAvail = threadsAvailable(ns, 1.75, false)\\r\\n        if (sleeveCount >= 1) {\\r\\n            for (var id = 0; id < sleeveCount; id++) {\\r\\n                var sleeve = ns.sleeve.getSleeveStats(id)\\r\\n                var task = ns.sleeve.getTask(id)\\r\\n                if ((sleeve.shock > 0) && (task.type != \\\"RECOVERY\\\")) {\\r\\n                    ns.sleeve.setToShockRecovery(id)\\r\\n                    continue\\r\\n                }\\r\\n                if ((sleeve.sync < 100) && (task.type != \\\"SYNCHRO\\\")) {\\r\\n                    ns.sleeve.setToSynchronize(id)\\r\\n                }\\r\\n            }\\r\\n            if ((player.skills.hacking < 10) && (ns.sleeve.getSleeveStats(0).sync >= 100)) {\\r\\n                if (!ns.sleeve.setToUniversityCourse(0, \\\"Rothman University\\\", \\\"Study Computer Science\\\")) {\\r\\n                    ns.print(\\\"Failed to send sleeve 0 to study computer science at Rothman University\\\")\\r\\n                }\\r\\n            }\\r\\n            if ((player.skills.hacking >= 10) && (player.factions.includes(\\\"Tian Di Hui\\\")) && (ns.sleeve.getSleeveStats(0).sync >= 100)) {\\r\\n                if (!ns.sleeve.setToFactionWork(0, \\\"Tian Di Hui\\\", \\\"Hacking Contracts\\\")) {\\r\\n                    ns.print(\\\"Failed to send sleeve 0 to do hacking contracts for Tian Di Hui\\\")\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        var stages = {\\r\\n            0: [\\\"joesguns\\\"],\\r\\n            1500: [\\\"sigma-cosmetics\\\"],\\r\\n            3000: [\\\"harakiri-sushi\\\", \\\"max-hardware\\\", \\\"zer0\\\"],\\r\\n            6000: [\\\"phantasy\\\", \\\"iron-gym\\\"],\\r\\n            15000: [\\\"omega-net\\\", \\\"silver-helix\\\"],\\r\\n            25000: [\\\"nectar-net\\\", \\\"hong-fang-tea\\\", \\\"neo-net\\\"],\\r\\n            40000: [\\\"computek\\\", \\\"netlink\\\", \\\"catalyst\\\", \\\"summit-uni\\\"],\\r\\n            70000: [\\\"rho-construction\\\", \\\"the-hub\\\", \\\"alpha-ent\\\", \\\"snap-fitness\\\", \\\"lexo-corp\\\"]\\r\\n        }\\r\\n        for (const stage of Object.keys(stages)) {\\r\\n            if (threadsAvail >= stage) {\\r\\n                for (const name of stages[stage]) {\\r\\n                    var server = ns.getServer(name)\\r\\n                    if (server.hasAdminRights && (server.hackDifficulty <= player.skills.hacking)) {\\r\\n                        addTarget(ns, name)\\r\\n                        await ns.sleep(100)\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (threadsAvail >= 100000 && (player.skills.hacking > 2200)) {\\r\\n            ns.exec(\\\"/scripts/add-all-targets.js\\\", \\\"home\\\")\\r\\n            return\\r\\n        }\\r\\n        await ns.sleep(2000)\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction addTarget(ns, ...names) {\\r\\n    ns.exec(\\\"/scripts/add-targets.js\\\", \\\"home\\\", 1, ...names)\\r\\n}\",\"filename\":\"/scripts/startup.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///1ed3f087-3134-40ec-8b0d-fbefaf57c7d5\",\"moduleSequenceNumber\":53028},{\"filename\":\"/scripts/startup.js\",\"url\":\"blob:file:///c4ea29e5-5b6f-48be-ad12-468732fa4fb8\",\"moduleSequenceNumber\":58103}],\"dependents\":[],\"ramUsage\":34.95,\"server\":\"home\",\"moduleSequenceNumber\":58103,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getSleeveStats\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getTask\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToShockRecovery\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToSynchronize\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToUniversityCourse\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToFactionWork\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    findServer\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\nexport async function main(ns) {\\r\\n    var names = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"fulcrumassets\\\", \\\"w0r1d_d43m0n\\\"]\\r\\n    if (ns.args.length > 0) {\\r\\n        names = ns.args\\r\\n    }\\r\\n    for (const name of names) {\\r\\n        ns.tprintf(\\\"%s\\\", findServer(ns, name))\\r\\n    }\\r\\n}\\r\\n\\r\\n\",\"filename\":\"/scripts/find-server.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///3df40bca-f750-41eb-9b8b-14a23072cfc9\",\"moduleSequenceNumber\":53028},{\"filename\":\"/scripts/find-server.js\",\"url\":\"blob:file:///5cd1b33a-aa65-4e91-90c3-0505af7bbe42\",\"moduleSequenceNumber\":59536}],\"dependents\":[],\"ramUsage\":7.55,\"server\":\"home\",\"moduleSequenceNumber\":59536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar multipliers = ns.getBitNodeMultipliers()\\r\\n\\tfor (const key in multipliers) {\\r\\n\\t\\tif (multipliers[key] != 1) {\\r\\n\\t\\t\\tns.tprintf(\\\"%27s: %s\\\", key, multipliers[key])\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"filename\":\"/scripts/bitnode-details.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/bitnode-details.js\",\"url\":\"blob:file:///af4b5d30-bd00-4505-880e-d59a14180e24\",\"moduleSequenceNumber\":3593}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":1601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    applyFilter,\\r\\n    filter_adminRights,\\r\\n    filter_minRamAvailable,\\r\\n    getAllServers,\\r\\n    threadsAvailable,\\r\\n    getHackAttack,\\r\\n    sortObjectBy,\\r\\n    sortByKey,\\r\\n    getAdditionalServerInfo,\\r\\n    ramAvail,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var targets = [\\\"darkweb\\\"]\\r\\n    const hackAttack = getHackAttack(ns)\\r\\n    ns.disableLog(\\\"disableLog\\\")\\r\\n    ns.disableLog(\\\"sleep\\\")\\r\\n\\r\\n    // If there is an already running instance of the scheduler\\r\\n    // just add the parameters as targets and exit. Bitburner\\r\\n    // itself prevents multiple instances of the same script running\\r\\n    // with the same parameters\\r\\n    if (isRunning(ns)) {\\r\\n        return\\r\\n    }\\r\\n\\r\\n    var procs = {}\\r\\n    var startDate = new Date()\\r\\n    while (true) {\\r\\n        let schedulables = getSchedulables(targets, procs)\\r\\n        for (const targetName of schedulables) {\\r\\n            let target = getAdditionalServerInfo(ns, ns.getServer(targetName))\\r\\n            let attackers = getAttackers(ns)\\r\\n\\r\\n            // no attackers available, skip this scheduling cycle\\r\\n            if (Object.keys(attackers).length <= 0) {\\r\\n                continue\\r\\n            }\\r\\n\\r\\n            var nextAttack = hackAttack\\r\\n            var state = performUnboundAttack(ns, nextAttack, target, attackers)\\r\\n            procs[targetName] = state\\r\\n        }\\r\\n        printState(ns, procs, targets)\\r\\n        let waitResult = await wait(ns, procs, startDate)\\r\\n        procs = waitResult[\\\"procs\\\"]\\r\\n        startDate = waitResult[\\\"startDate\\\"]\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getAttackers(ns) {\\r\\n    var hasAdminFilter = filter_adminRights(true)\\r\\n    // 1.6G base script size + 0.15G (weaken/grow)\\r\\n    // hack() requires 0.1G so it works everywhere where weaken/grow works\\r\\n    var ramFilter = filter_minRamAvailable(ns.getScriptRam(\\\"/payload/hack-only.js\\\"))\\r\\n    return applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n}\\r\\n\\r\\nfunction getSchedulables(targets, procs) {\\r\\n    var schedulables = []\\r\\n    var running = Object.keys(procs)\\r\\n    for (const t of targets) {\\r\\n        if (!running.includes(t)) {\\r\\n            schedulables.push(t)\\r\\n        }\\r\\n    }\\r\\n    return schedulables\\r\\n}\\r\\n\\r\\nasync function wait(ns, procs, startDate = new Date()) {\\r\\n    var newProcs = {}\\r\\n    await ns.sleep(200)\\r\\n    var newStartDate = new Date()\\r\\n    var endDate = new Date()\\r\\n    var iterationTime = endDate.getTime() - startDate.getTime()\\r\\n    ns.printf(\\\"Schedule iteration took %s ms\\\", iterationTime)\\r\\n    for (const proc in procs) {\\r\\n        let newWaitTime = procs[proc][\\\"waitTime\\\"] - iterationTime\\r\\n        let pids = procs[proc][\\\"pids\\\"]\\r\\n        let newPids = [...pids].filter((p) => ns.isRunning(p))\\r\\n        if (newPids.length < 1) {\\r\\n            continue\\r\\n        }\\r\\n        newProcs[proc] = procs[proc]\\r\\n        newProcs[proc][\\\"pids\\\"] = newPids\\r\\n        newProcs[proc][\\\"waitTime\\\"] = newWaitTime\\r\\n    }\\r\\n    return {\\r\\n        \\\"procs\\\": newProcs,\\r\\n        \\\"startDate\\\": newStartDate,\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction printState(ns, procs, targets) {\\r\\n    var procNames = [...Object.keys(procs)].sort()\\r\\n    var sortedProcs = sortObjectBy(procs, sortByKey(\\\"waitTime\\\"))\\r\\n    if (sortedProcs.length > 0) {\\r\\n        ns.print(\\\"Running attacks:\\\")\\r\\n        for (const proc of sortedProcs) {\\r\\n            ns.printf(\\\"  %20s: %6s (s: %3d / %3d; t: %6d; rt: %6d; wt: %8s)\\\",\\r\\n                proc[\\\"target\\\"].hostname,\\r\\n                proc[\\\"type\\\"],\\r\\n                proc[\\\"pids\\\"].length,\\r\\n                proc[\\\"serverCount\\\"],\\r\\n                proc[\\\"attackThreads\\\"],\\r\\n                proc[\\\"requiredThreads\\\"],\\r\\n                ns.nFormat(proc[\\\"waitTime\\\"] / 1000, \\\"00:00:00\\\"),\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n    var idleTargets = []\\r\\n    for (const t of targets) {\\r\\n        if (!procNames.includes(t)) {\\r\\n            idleTargets.push(t)\\r\\n        }\\r\\n    }\\r\\n    if (idleTargets.length > 0) {\\r\\n        ns.print(\\\"Idle targets:\\\")\\r\\n        for (const t of idleTargets) {\\r\\n            ns.printf(\\\"  %s\\\", t)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let maxAttackScriptSize = ns.getScriptRam(\\\"/payload/hack-only.js\\\")\\r\\n    let systemThreads = threadsAvailable(ns, maxAttackScriptSize, false)\\r\\n    let idleThreads = threadsAvailable(ns, maxAttackScriptSize, true)\\r\\n    ns.printf(\\\"System threads: %d (idle); %d (available)\\\", idleThreads, systemThreads)\\r\\n}\\r\\n\\r\\nfunction isRunning(ns) {\\r\\n    var myself = ns.getScriptName()\\r\\n    var count = 0\\r\\n    for (const proc of ns.ps()) {\\r\\n        if (proc.filename == myself) {\\r\\n            count++\\r\\n        }\\r\\n        if (count > 1) {\\r\\n            return true\\r\\n        }\\r\\n    }\\r\\n    return false\\r\\n}\\r\\n\\r\\nfunction performUnboundAttack(ns, attack, target, attackers) {\\r\\n    var waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n    var attackThreads = 0\\r\\n    var serverCount = 0\\r\\n    var scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n    ns.disableLog(\\\"exec\\\")\\r\\n    var pids = []\\r\\n    // this sorts the servers according to the amount of threads required by\\r\\n    // a single core system (assuming that all attackable systems are single core)...\\r\\n    var servers = Object.values(attackers)\\r\\n    // ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n    // this with the most suitable attacker\\r\\n    var requiredThreads = threadsAvailable(ns, 1.7, true)\\r\\n    var threadCount = requiredThreads\\r\\n    if (threadCount <= 0) {\\r\\n        ns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n        return {\\r\\n            \\\"waitTime\\\": 0,\\r\\n            \\\"requiredThreads\\\": requiredThreads,\\r\\n            \\\"attackThreads\\\": 0,\\r\\n            \\\"operation\\\": attack[\\\"type\\\"],\\r\\n            \\\"serverCount\\\": 0,\\r\\n            \\\"pids\\\": [],\\r\\n            \\\"target\\\": target.hostname,\\r\\n        }\\r\\n    }\\r\\n    for (const server of servers) {\\r\\n        let serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n        if (serverThreads > threadCount) {\\r\\n            serverThreads = threadCount\\r\\n        }\\r\\n        let pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n        if (pid == 0) {\\r\\n            ns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n            continue\\r\\n        }\\r\\n        pids.push(pid)\\r\\n        threadCount = threadCount - serverThreads\\r\\n        attackThreads = attackThreads + serverThreads\\r\\n        serverCount++\\r\\n        if (threadCount <= 0) {\\r\\n            break\\r\\n        }\\r\\n    }\\r\\n    return {\\r\\n        \\\"waitTime\\\": waitTime,\\r\\n        \\\"requiredThreads\\\": requiredThreads,\\r\\n        \\\"attackThreads\\\": attackThreads,\\r\\n        \\\"operation\\\": attack[\\\"type\\\"],\\r\\n        \\\"serverCount\\\": serverCount,\\r\\n        \\\"pids\\\": pids,\\r\\n        \\\"target\\\": target.hostname,\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/scratch/exp-farm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///8c436446-d865-4b1e-8dcb-56f26abdeb28\",\"moduleSequenceNumber\":53028},{\"filename\":\"/scratch/exp-farm.js\",\"url\":\"blob:file:///42716f10-a1ea-40c3-b446-424dc768f130\",\"moduleSequenceNumber\":55877}],\"dependents\":[],\"ramUsage\":9.25,\"server\":\"home\",\"moduleSequenceNumber\":55877,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-4096\",\"pserv-4096-0\",\"pserv-4096-1\",\"pserv-4096-2\",\"pserv-4096-3\",\"pserv-4096-4\",\"pserv-4096-5\",\"pserv-4096-6\",\"pserv-4096-7\",\"pserv-4096-8\",\"pserv-4096-9\",\"pserv-4096-10\",\"pserv-4096-11\",\"pserv-4096-12\",\"pserv-4096-13\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"V2_0_0_API_BREAK.txt\",\"text\":\"This file contains the list of potential API break. A pattern was used to look through all your files and note the spots where you might have a problem. Not everything here is broken./ns\\\\.scp/g\\nscp arguments were switch, it is now scp(files, destination, optionally_source). If you were using 2 argument (not 3) this doesn't affect you.\\n\\n\\t/lib/utils.js\\n\\t\\tLine 230 await ns.scp(files, \\\"home\\\", name)\\n\\t\\tLine 481 await ns.scp(\\\"/lib/utils.js\\\", \\\"home\\\", target)\\n\\t\\tLine 482 await ns.scp(script, \\\"home\\\", target)\\n\\t/scripts/find-files.js\\n\\t\\tLine 33 await ns.scp(f, t, \\\"home\\\")\\n\\n\\n/ns.installBackdoor/g\\nns.installBackdoor was moved to ns.singularity.installBackdoor\\n\\n\\t/scripts/backdoor-worm.js\\n\\t\\tLine 50 //     await ns.installBackdoor(target.hostname)\\n\\n\\n/hacking/g\\nThe work system is completely reworked and ns.getPlayer().hacking no longer exists. This data is likely available inside ns.getPlayer().currentWork, skills, exp, or hp\\n\\n\\t/lib/utils.js\\n\\t\\tLine 69 export function filter_hackingSkill(level) {\\n\\t/scripts/compare-servers.js\\n\\t\\tLine 1 import { getAllServers, applyFilter, filter_hackingSkill, filter_minMaxMoney, filter_adminRights, sortObjectsBy } from \\\"lib/utils.js\\\";\\n\\t\\tLine 9 var skillFilter = filter_hackingSkill(ns.getHackingLevel())\\n\\n\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"94.6.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":53025634873,\"moneyMax\":1325640871825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1282,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"60.2.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":45203273369,\"moneyMax\":1130081834225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1135,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-670515.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"91456458\",82],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"59.0.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":22728494793,\"moneyMax\":568212369825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1149,\"serverGrowth\":76}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"35.2.2.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"blade\",\"moduleSequenceNumber\":4179,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///19141132-43ef-4909-b885-c81ab8f3f196\",\"moduleSequenceNumber\":26950}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":26950,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///0edc808d-c6cb-49b0-9291-ea83e0b2f431\",\"moduleSequenceNumber\":4439}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":4439,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":4182,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"blade\",\"moduleSequenceNumber\":4183,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnitek\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":38881091919,\"moneyMax\":972027297975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1103,\"serverGrowth\":69}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-15374.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"7613zeHh231N755heheH411z793mMW330457F6e6egr139S0gzvtqtI08hgyRLSf067\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"67.2.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":26394429251,\"moneyMax\":659860731275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1290,\"serverGrowth\":73}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"44.0.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":18999107325,\"moneyMax\":474977683125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1001,\"serverGrowth\":74}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"59.1.8.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":4169,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///f4c5a8f0-bd38-4daa-9043-c330e2b5f6f3\",\"moduleSequenceNumber\":4931}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":4931,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///de69b3cc-1f0a-4ab6-94a1-b45757309339\",\"moduleSequenceNumber\":4435}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":4435,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":4172,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"omnitek\",\"moduleSequenceNumber\":4173,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":16152298183,\"moneyMax\":403807454575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1043,\"serverGrowth\":95}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"66.7.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"nwo\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":16429991377,\"moneyMax\":410749784425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":919,\"serverGrowth\":82}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"49.8.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":27927253949,\"moneyMax\":698181348725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":959,\"serverGrowth\":91}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"92.3.5.4\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":2046.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",326],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":222.00999999999593,\"pid\":17231,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":326,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///4a895496-d2a5-4a85-aa42-a26239d5f01a\",\"moduleSequenceNumber\":62706}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",151],\"dataMap\":{},\"filename\":\"/payload/hack-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.609999999999992,\"pid\":17308,\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"threads\":151,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///7ed79052-d03f-4d20-a341-adf340fefee6\",\"moduleSequenceNumber\":4929}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",697],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":17309,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":697,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///ee3f6974-66fd-45ee-9032-37a43507c4bf\",\"moduleSequenceNumber\":4433}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":4139,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///7ed79052-d03f-4d20-a341-adf340fefee6\",\"moduleSequenceNumber\":4929}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":4929,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///ee3f6974-66fd-45ee-9032-37a43507c4bf\",\"moduleSequenceNumber\":4433}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":4433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///4a895496-d2a5-4a85-aa42-a26239d5f01a\",\"moduleSequenceNumber\":62706}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":62706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":4143,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\"4sigma\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":1727513211,\"moneyMax\":43187830275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1000,\"serverGrowth\":95}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"69.2.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1271,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"80.7.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1073912228,\"moneyMax\":26847805700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1063,\"serverGrowth\":88}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"3.8.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"taiyang-digital\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":868275834,\"moneyMax\":21706895850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":887,\"serverGrowth\":65}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"64.6.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":818625536,\"moneyMax\":20465638400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":947,\"serverGrowth\":70}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"12.3.3.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"helios\",\"moduleSequenceNumber\":4159,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///919cb7c7-9268-4dd5-87ac-0bf3279faadd\",\"moduleSequenceNumber\":4930}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":4930,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///805eee43-7f7b-4eef-a644-95a0fa446575\",\"moduleSequenceNumber\":4434}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":4434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///50cec500-4db5-4631-96f1-f6cef37c24bf\",\"moduleSequenceNumber\":19400}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":19400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"helios\",\"moduleSequenceNumber\":4163,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":718617036,\"moneyMax\":17965425900,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":811,\"serverGrowth\":78}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"84.7.8.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":4149,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///c13c8007-2312-4202-a6d6-bbe2f7cd33a6\",\"moduleSequenceNumber\":4443}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":4443,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///e2fccabe-542d-48d0-9c49-53a3fe2461e2\",\"moduleSequenceNumber\":4450}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":4450,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":4152,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"vitalife\",\"moduleSequenceNumber\":4153,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"applied-energetics\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":784574347,\"moneyMax\":19614358675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":875,\"serverGrowth\":67}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"12.1.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":967559032,\"moneyMax\":24188975800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":867,\"serverGrowth\":94}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"57.1.0.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":2569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///4a1e4a44-bd40-471f-96b9-6e33d0c1091d\",\"moduleSequenceNumber\":55895}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":55895,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///31ef87f4-299a-449e-a959-72d52c0957ca\",\"moduleSequenceNumber\":2780}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":2780,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":2572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"univ-energy\",\"moduleSequenceNumber\":2573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1151344751,\"moneyMax\":28783618775,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":899,\"serverGrowth\":89}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"2.7.6.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":4129,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///a4dd94ba-82f4-402a-9d21-5de9e5038181\",\"moduleSequenceNumber\":26949}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":26949,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///c112dabf-b993-4fc8-b2ae-f001a5bdd421\",\"moduleSequenceNumber\":4438}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":4438,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":4132,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"titan-labs\",\"moduleSequenceNumber\":4133,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":856438105,\"moneyMax\":21410952625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":837,\"serverGrowth\":72}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"34.7.9.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":4119,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///767eb6ec-3dba-4763-9c1d-4db973749a7b\",\"moduleSequenceNumber\":55896}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":55896,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///5a56779d-ac5e-48b2-9db3-e56e4ca78aaf\",\"moduleSequenceNumber\":4436}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":4436,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":4122,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"microdyne\",\"moduleSequenceNumber\":4123,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"infocomm\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":576839109,\"moneyMax\":14420977725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":800,\"serverGrowth\":74}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-606231.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"MOUSE LOGIN CACHE VIRUS DEBUG\",9],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"94.4.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":821965023,\"moneyMax\":20549125575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":860,\"serverGrowth\":76}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"72.3.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":848452966,\"moneyMax\":21211324150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":875,\"serverGrowth\":87}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"57.4.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1078964235,\"moneyMax\":26974105875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":856,\"serverGrowth\":57}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"88.6.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"omnia\",\"moduleSequenceNumber\":4099,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///dbed1e66-f819-48e8-9f0d-f5e3c843d4de\",\"moduleSequenceNumber\":4441}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":4441,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///9ec2759a-cb3c-4b92-9e0a-e78585e93b1c\",\"moduleSequenceNumber\":4448}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":4448,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":4102,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"omnia\",\"moduleSequenceNumber\":4103,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":912249539,\"moneyMax\":22806238475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":878,\"serverGrowth\":65}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-370972-CyberSec.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[36,41,23],[10,3,1],[24,49,47],[18,24,45],[15,46,16],[6,44,9],[11,31,16],[26,10,20],[14,18,42],[36,28,18],[22,2,44],[11,30,30],[33,2,18],[48,15,12]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"73.9.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":969238244,\"moneyMax\":24230956100,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":776,\"serverGrowth\":67}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-445659.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[172,[1,2,4,12,14,16,17,20,22,23]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"22.2.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":991364889,\"moneyMax\":24784122225,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":798,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"22.4.3.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"solaris\",\"moduleSequenceNumber\":4109,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///96cb5ac0-705b-4846-97c0-882d46ca2a12\",\"moduleSequenceNumber\":4442}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":4442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///09d04df1-5697-475d-979a-0c334b05b8a7\",\"moduleSequenceNumber\":4449}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":4449,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":4112,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"solaris\",\"moduleSequenceNumber\":4113,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":736172299,\"moneyMax\":18404307475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":842,\"serverGrowth\":77}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"32.1.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1471549814,\"moneyMax\":36788745350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":808,\"serverGrowth\":55}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"38.3.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":2549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///46135301-0960-4c7c-8cdf-8016e851a921\",\"moduleSequenceNumber\":4445}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":4445,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///de898251-db71-4aa8-9762-37039a4e4d90\",\"moduleSequenceNumber\":2791}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":2791,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":2552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"global-pharm\",\"moduleSequenceNumber\":2553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"aevum-police\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1690399063,\"moneyMax\":42259976575,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":811,\"serverGrowth\":89}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"25.3.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1201627238,\"moneyMax\":30040680950,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":826,\"serverGrowth\":72}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"98.7.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1309819160,\"moneyMax\":32745479000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":816,\"serverGrowth\":72}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"12.4.0.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":2559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///5f7f86e3-d4cd-4998-8494-495be6065a0e\",\"moduleSequenceNumber\":26948}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":26948,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///0f722871-fea3-43a4-8ef9-8a57f135ac39\",\"moduleSequenceNumber\":2784}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":2784,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":2562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"unitalife\",\"moduleSequenceNumber\":2563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"global-pharm\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1064719588,\"moneyMax\":26617989700,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":801,\"serverGrowth\":75}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"10.0.7.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":2539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///32141d06-57ce-4883-b8a5-c3c37b25ea49\",\"moduleSequenceNumber\":55894}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":55894,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///34a90a2f-3055-4651-8fcc-ad2afb345777\",\"moduleSequenceNumber\":2790}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":2790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":2542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":2543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":708199098,\"moneyMax\":17704977450,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":747,\"serverGrowth\":59}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"13.5.7.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":2355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///ca60b7d5-9b87-4088-a062-c62bdd197af2\",\"moduleSequenceNumber\":26946}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":26946,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///988af311-4fab-47bb-af12-e4b32a5c8640\",\"moduleSequenceNumber\":2782}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":2782,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":2358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"rho-construction\",\"moduleSequenceNumber\":2359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zb-institute\",\"aerocorp\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":679700982,\"moneyMax\":16992524550,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":502,\"serverGrowth\":43}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-286661-TianDiHui.cct\",\"type\":\"Array Jumping Game\",\"data\":[7,4,1,10,8,2,0,0,8],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"27.3.6.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":2529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///24cc444f-4dab-4e34-a722-5958a743e28e\",\"moduleSequenceNumber\":55893}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":55893,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///8b75354f-fe73-4dac-909a-22aac287258d\",\"moduleSequenceNumber\":2789}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":2789,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":2532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":2533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":711896268,\"moneyMax\":17797406700,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":555,\"serverGrowth\":53}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"21.7.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":2519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///e5206f11-35a5-4db7-9d76-e76019d89054\",\"moduleSequenceNumber\":55892}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":55892,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///a51d88fb-a89a-4285-b65e-8e66f514d2f3\",\"moduleSequenceNumber\":2788}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":2788,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":2522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"aevum-police\",\"moduleSequenceNumber\":2523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"summit-uni\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":330455804,\"moneyMax\":8261395100,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":404,\"serverGrowth\":45}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-220172-Chongqing.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[22,68,35,92,116,178,25,51,193,166,177,139,48,188,181,55],\"reward\":{\"name\":\"Chongqing\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"15.9.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":2325,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///6257f086-071b-4cdd-9140-619738e8416a\",\"moduleSequenceNumber\":55889}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":55889,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d99e4ca3-d171-48ac-9385-572438d2bb9c\",\"moduleSequenceNumber\":2786}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":2786,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":2328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":2329,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"computek\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":249902513,\"moneyMax\":6247562825,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":425,\"serverGrowth\":41}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"0.4.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":4089,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///e7da5b1c-ec91-4f92-adf2-41bdca22c99e\",\"moduleSequenceNumber\":55887}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":55887,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///9c8ff05d-4a1b-4e0c-b3b9-6d171129092d\",\"moduleSequenceNumber\":4440}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":4440,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":4092,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zb-institute\",\"moduleSequenceNumber\":4093,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"netlink\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":1073710905,\"moneyMax\":26842772625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":770,\"serverGrowth\":76}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-548073.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[24,28],[4,9],[5,6],[16,20],[3,11],[18,26],[10,12],[25,28],[14,19],[16,17],[16,23],[23,32],[22,32],[6,7],[10,14],[24,30],[16,19],[15,19]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"47.6.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":2315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///1b514ce4-377d-45d1-8dd5-0dbb0baa870b\",\"moduleSequenceNumber\":55888}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":55888,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///2514f097-2ac3-43af-81dc-6f27981ff2fa\",\"moduleSequenceNumber\":2785}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":2785,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":2318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"summit-uni\",\"moduleSequenceNumber\":2319,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"the-hub\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":22,\"minDifficulty\":22,\"moneyAvailable\":314638045,\"moneyMax\":7865951125,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":431,\"serverGrowth\":46}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"71.4.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":516592745,\"moneyMax\":12914818625,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":585,\"serverGrowth\":70}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"74.7.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":2345,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///b411a8b9-077b-448b-b6e2-180b267fcb6e\",\"moduleSequenceNumber\":55891}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":55891,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///e8e56a22-4a0d-4d6f-b647-9e2fcd5f4029\",\"moduleSequenceNumber\":2781}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":2781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":2348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"catalyst\",\"moduleSequenceNumber\":2349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":22,\"minDifficulty\":22,\"moneyAvailable\":423350755,\"moneyMax\":10583768875,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":427,\"serverGrowth\":27}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"26.6.2.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":2280,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///7c3aec72-3933-453e-9bf9-ca32ca78f805\",\"moduleSequenceNumber\":3531}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":3531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///81c4d0a2-e576-46a1-ab85-df50faea47cb\",\"moduleSequenceNumber\":2296}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":2296,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":2283,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"the-hub\",\"moduleSequenceNumber\":2284,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"neo-net\",\"summit-uni\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":172103256,\"moneyMax\":4302581400,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":310,\"serverGrowth\":52}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"24.0.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":20,\"minDifficulty\":20,\"moneyAvailable\":246507979,\"moneyMax\":6162699475,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":304,\"serverGrowth\":55}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"52.9.5.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"netlink\",\"moduleSequenceNumber\":2305,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///c2839584-07f1-4a82-be40-d7026d3ac8a5\",\"moduleSequenceNumber\":3529}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":3529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///9ec022b4-d3c6-49fc-8c86-59ffb338ace7\",\"moduleSequenceNumber\":2779}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":2779,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///efc5bd20-986e-4ae9-8a32-041f3e2dd4f4\",\"moduleSequenceNumber\":19399}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":19399,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"netlink\",\"moduleSequenceNumber\":2309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":23,\"minDifficulty\":23,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":380,\"serverGrowth\":57}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"85.5.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":76911406,\"moneyMax\":1922785150,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":274,\"serverGrowth\":41}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-861374.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":911986,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"7.2.5.8\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":1610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///9a498e09-8b30-43ad-804a-d020cdc618cd\",\"moduleSequenceNumber\":4447}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":4447,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///b45d2013-da60-41ed-a5a3-e3ed669666f5\",\"moduleSequenceNumber\":1991}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":1991,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":1613,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"n00dles\",\"moduleSequenceNumber\":1614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-858145-Chongqing.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"ARRAYPASTELOGICLOGINMACRO\",\"LURKING\"],\"reward\":{\"name\":\"Chongqing\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"70.1.0.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///e659f763-d008-40e8-9039-ab19831f2345\",\"moduleSequenceNumber\":26951}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":26951,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///de51a8cc-4ecb-4911-bd88-6b16f8254336\",\"moduleSequenceNumber\":1984}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1984,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1623,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"69.9.3.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///eb3ee76a-a5dd-486e-ba39-24283fce9796\",\"moduleSequenceNumber\":26952}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":26952,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///68379279-6cbb-4bec-8689-e180f9c2ecd3\",\"moduleSequenceNumber\":1985}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1985,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1634,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":13.744,\"minDifficulty\":3,\"moneyAvailable\":52940891.48692458,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"77.2.6.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":1640,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///157d2e70-b650-4dfe-b4fc-b90009209190\",\"moduleSequenceNumber\":26953}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":26953,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///95dff54f-ec68-412a-96c4-6768ae8a5f90\",\"moduleSequenceNumber\":1986}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":1986,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":1643,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"joesguns\",\"moduleSequenceNumber\":1644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":22602570.9402225,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"46.9.5.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"zer0\",\"moduleSequenceNumber\":1710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///138acdfd-652e-4d86-be96-65b481fc25be\",\"moduleSequenceNumber\":55883}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":55883,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///37c4a55b-733e-404b-8f4c-8d0182dbcc2c\",\"moduleSequenceNumber\":1982}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":1982,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":1713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zer0\",\"moduleSequenceNumber\":1714,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"iron-gym\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":17.369999999999997,\"minDifficulty\":8,\"moneyAvailable\":138475664.91912663,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-343516.cct\",\"type\":\"Array Jumping Game II\",\"data\":[3,2,1,2,4,2,1,1,1,1,5,0,2],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"15.8.5.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///cf3f1876-4aea-4344-88b4-7168ee12e636\",\"moduleSequenceNumber\":55881}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":55881,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///4654718b-b481-4997-8b30-97a48357e404\",\"moduleSequenceNumber\":1989}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1989,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":9.468,\"minDifficulty\":7,\"moneyAvailable\":780728,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"37.9.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":1720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///673e8484-7d60-4ea6-b9b0-ac4fa7cc9daa\",\"moduleSequenceNumber\":55886}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":55886,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///f7fdf2b0-10a4-4e0a-9a3c-26d34916d9a7\",\"moduleSequenceNumber\":1983}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":1983,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":1723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"neo-net\",\"moduleSequenceNumber\":1724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zer0\",\"the-hub\",\"computek\",\"johnson-ortho\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":27.454,\"minDifficulty\":8,\"moneyAvailable\":51016287.60411302,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"72.1.1.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":2250,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///81a3f319-2882-4b36-b038-70d8651c9a70\",\"moduleSequenceNumber\":3530}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":3530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///e8d7de16-422e-4ed4-8da7-a02563ac6191\",\"moduleSequenceNumber\":2295}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":2295,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":2253,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":2254,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":12.04,\"minDifficulty\":10,\"moneyAvailable\":1125000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-540555-Ishima.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[10,5,147,161,13,9,117,13,45,171,78,195,187,28,179,200,184,125,32,54,53,8,194],\"reward\":{\"name\":\"Ishima\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"17.8.2.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///e510eaec-95de-4ca9-98f1-3994caccdc93\",\"moduleSequenceNumber\":55878}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":55878,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///690f855e-1ab6-4740-aa35-077efd2732c5\",\"moduleSequenceNumber\":1987}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1987,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":23.566,\"minDifficulty\":5,\"moneyAvailable\":29621553.64508477,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"75.1.1.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1660,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///d9577a77-b36f-432e-ade9-366dc1d41011\",\"moduleSequenceNumber\":55879}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":55879,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///ff438d36-553f-4332-b50a-a40e3922f7fe\",\"moduleSequenceNumber\":1988}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1988,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1663,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":13.526,\"minDifficulty\":5,\"moneyAvailable\":72954659.42559025,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"81.0.4.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":2270,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///de8bf200-2da9-47c7-a4de-29236cbac8a9\",\"moduleSequenceNumber\":55885}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":55885,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///1855bf5c-a7a2-4f7e-8282-ca743f244710\",\"moduleSequenceNumber\":2299}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":2299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":2273,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"phantasy\",\"moduleSequenceNumber\":2274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"max-hardware\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":9.12,\"minDifficulty\":7,\"moneyAvailable\":6509760,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"36.6.2.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///eb174058-4fb3-484b-8688-b5a3976b1c23\",\"moduleSequenceNumber\":55882}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":55882,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///78dc552a-78ce-4f4b-9c45-ad0d5acbfba3\",\"moduleSequenceNumber\":1981}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1981,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":17.029999999999998,\"minDifficulty\":5,\"moneyAvailable\":138384975.95742643,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"76.1.0.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":2260,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///f2c10c74-a576-4d60-af1c-4742be90b6c0\",\"moduleSequenceNumber\":55884}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":55884,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///4a1643b4-412d-4129-8a9a-c2f30b607bad\",\"moduleSequenceNumber\":2298}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":2298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":2263,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"omega-net\",\"moduleSequenceNumber\":2264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":28,\"hackDifficulty\":16.204,\"minDifficulty\":9,\"moneyAvailable\":403987475,\"moneyMax\":1640747475,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":204,\"serverGrowth\":31}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"34.4.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":46520698,\"moneyMax\":1163017450,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":267,\"serverGrowth\":31}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"8.9.3.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1670,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///ca4f2004-f7fc-43c0-bc92-05aa9e55c136\",\"moduleSequenceNumber\":55880}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":55880,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///cf8e10e0-da13-498c-a973-729a257e74e3\",\"moduleSequenceNumber\":1980}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1980,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":26.252,\"minDifficulty\":10,\"moneyAvailable\":280408155.8699538,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-543544.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"YYYYYYYTTxxvvvvvvvvvvvvxXbbbbbbaaD1x44444RRuutzzzzzzzzzzzzWWt\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"89.0.8.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":2365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///d88d873b-c3f6-4e82-822e-c7678d9d309f\",\"moduleSequenceNumber\":26947}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":26947,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///04f3f249-1694-440a-9286-048004f0a423\",\"moduleSequenceNumber\":2783}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":2783,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":2368,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":2369,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":505,\"serverGrowth\":34}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"61.9.7.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":4189,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///f870e38c-ebd4-4e87-aac4-a4bcb8e6b756\",\"moduleSequenceNumber\":55897}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":55897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///f39dcf3e-305a-4b44-a299-4af5c9e4019d\",\"moduleSequenceNumber\":4437}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":4437,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":4192,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":4193,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":953,\"serverGrowth\":52}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"22.8.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":709,\"serverGrowth\":43}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"88.1.8.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",146],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.20999999999995,\"pid\":17302,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"threads\":146,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///8efdf339-c2a9-42bf-a4f6-ef26aeb52533\",\"moduleSequenceNumber\":17189}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":2579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///ace06970-5f71-492a-bdd8-f4104e89d29b\",\"moduleSequenceNumber\":11624}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":11624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///03a29a59-e382-42ba-80fb-7bd6fc9bc487\",\"moduleSequenceNumber\":2778}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":2778,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///8efdf339-c2a9-42bf-a4f6-ef26aeb52533\",\"moduleSequenceNumber\":17189}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":17189,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":2583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zb-def\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":542,\"serverGrowth\":1}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-42047-Chongqing.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((((()(((()(a()\",\"reward\":{\"name\":\"Chongqing\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"4.8.4.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":2335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///c855f74c-2e01-45f5-8db9-9ae11d1612e9\",\"moduleSequenceNumber\":55890}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":55890,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///2fe7a73a-79a7-463e-a582-44c4ddca3aad\",\"moduleSequenceNumber\":2787}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":2787,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":2338,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":2339,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":359,\"serverGrowth\":1}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"86.6.8.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":2290,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///b4c107a1-028d-4d1c-b3a0-e2135151d7bc\",\"moduleSequenceNumber\":52081}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":52081,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///67fc6a2c-c172-4e49-b17c-8c7edd98b225\",\"moduleSequenceNumber\":2297}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":2297,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":2293,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":2294,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"neo-net\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":202,\"serverGrowth\":1}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"55.0.3.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\".\",\"moduleSequenceNumber\":2589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///e6b9400d-e428-405b-a31f-cb17974e5cbe\",\"moduleSequenceNumber\":4444}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":4444,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///8826b38e-0837-4789-a092-4076889aaec0\",\"moduleSequenceNumber\":2792}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":2792,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":2592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\".\",\"moduleSequenceNumber\":2593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":520,\"serverGrowth\":1}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"7.9.8.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":1690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///4e8ce019-b59c-4116-831d-67fe5b6d3de9\",\"moduleSequenceNumber\":4446}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":4446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///8630bb95-fb6c-4c30-aed5-5765b52bde45\",\"moduleSequenceNumber\":1990}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":1990,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":1693,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"CSEC\",\"moduleSequenceNumber\":1694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"n00dles\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":52,\"serverGrowth\":1}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"55.1.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":1}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"80.5.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":1}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"67.3.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":100,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096\",\"httpPortOpen\":false,\"ip\":\"2.0.2.6\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":376.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",200],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"pid\":17310,\"ramUsage\":1.75,\"server\":\"pserv-4096\",\"threads\":200,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///a036b21e-1f35-4e7d-99dc-22123dd77569\",\"moduleSequenceNumber\":58891}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",15],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":17312,\"ramUsage\":1.75,\"server\":\"pserv-4096\",\"threads\":15,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///1f5513b0-6755-4bb8-84db-fe1402eda958\",\"moduleSequenceNumber\":62072}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"pserv-4096\",\"moduleSequenceNumber\":58743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///88409317-1bca-46bc-9eb2-656b6a71be10\",\"moduleSequenceNumber\":66508}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096\",\"moduleSequenceNumber\":66508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///a036b21e-1f35-4e7d-99dc-22123dd77569\",\"moduleSequenceNumber\":58891}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096\",\"moduleSequenceNumber\":58891,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///1f5513b0-6755-4bb8-84db-fe1402eda958\",\"moduleSequenceNumber\":62072}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096\",\"moduleSequenceNumber\":62072,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-4096\",\"moduleSequenceNumber\":58747,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    filter_adminRights,\\r\\n    filter_canNuke,\\r\\n    filter_minRam,\\r\\n    filter_hostname,\\r\\n    filter_playerServer,\\r\\n    getAllServers,\\r\\n    applyFilter,\\r\\n    deployPayload,\\r\\n    portOpener,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var noAdminFilter = filter_adminRights(false)\\r\\n    var hasAdminFilter = filter_adminRights(true)\\r\\n    var canNukeFilter = filter_canNuke(ns)\\r\\n    var ramFilter = filter_minRam(4)\\r\\n    var nameFilter = filter_hostname(ns, \\\"darkweb|home\\\")\\r\\n    var playerServerFilter = filter_playerServer()\\r\\n\\r\\n    var targets = getAllServers(ns)\\r\\n    targets = applyFilter(targets, [noAdminFilter, canNukeFilter], false, false)\\r\\n    targets = applyFilter(targets, [nameFilter, playerServerFilter])\\r\\n    for (const t in targets) {\\r\\n        ns.printf(\\\"Nuking Target: %s\\\", targets[t].hostname)\\r\\n        attack(ns, targets[t])\\r\\n    }\\r\\n\\r\\n    targets = getAllServers(ns)\\r\\n    targets = applyFilter(targets, [hasAdminFilter, ramFilter], false, false)\\r\\n    for (const t in targets) {\\r\\n        ns.printf(\\\"Deploying payload on Target: %s\\\", targets[t].hostname)\\r\\n        await deployPayload(ns, t)\\r\\n    }\\r\\n    for (const name of ns.getPurchasedServers()) {\\r\\n        ns.printf(\\\"Deploying payload on Target: %s\\\", name)\\r\\n        await deployPayload(ns, name)\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function attack(ns, target) {\\r\\n    var po = portOpener(ns)\\r\\n    if (target.openPortCount < target.numOpenPortsRequired) {\\r\\n        for (let attack of po) {\\r\\n            if (attack[\\\"check\\\"](target)) {\\r\\n                attack[\\\"func\\\"](target.hostname)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    ns.nuke(target.hostname)\\r\\n\\r\\n    // if (!target.backdoorInstalled) {\\r\\n    //     await ns.singularity.installBackdoor(target.hostname)\\r\\n    // }\\r\\n}\",\"filename\":\"/scripts/backdoor-worm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///8e773e10-a06e-4133-bdb3-e0c3d3d5c2d8\",\"moduleSequenceNumber\":58743},{\"filename\":\"/scripts/backdoor-worm.js\",\"url\":\"blob:file:///d2a0a85c-70d0-4dcf-a719-2af786b986d4\",\"moduleSequenceNumber\":58890}],\"dependents\":[],\"ramUsage\":10.7,\"server\":\"pserv-4096\",\"moduleSequenceNumber\":58890,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096-0\",\"httpPortOpen\":false,\"ip\":\"55.9.0.2\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"pserv-4096-0\",\"moduleSequenceNumber\":58753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///e995cdbd-297d-481b-9061-f79c3bb5bfb9\",\"moduleSequenceNumber\":58893}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096-0\",\"moduleSequenceNumber\":58893,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///76a6fd47-ae3a-4ca8-a24f-b105a0084f87\",\"moduleSequenceNumber\":58892}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-0\",\"moduleSequenceNumber\":58892,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///8eb8fbd0-257e-44c9-90dc-810ecde1d6db\",\"moduleSequenceNumber\":63024}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-0\",\"moduleSequenceNumber\":63024,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-4096-0\",\"moduleSequenceNumber\":58757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096-1\",\"httpPortOpen\":false,\"ip\":\"74.2.5.3\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":420,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",95],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.20999999999995,\"pid\":17303,\"ramUsage\":1.75,\"server\":\"pserv-4096-1\",\"threads\":95,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///1c037290-71f3-4a7b-a928-caf388ea3f7a\",\"moduleSequenceNumber\":62707}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",145],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.009999999999952,\"pid\":17304,\"ramUsage\":1.75,\"server\":\"pserv-4096-1\",\"threads\":145,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///1c037290-71f3-4a7b-a928-caf388ea3f7a\",\"moduleSequenceNumber\":62707}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"pserv-4096-1\",\"moduleSequenceNumber\":58763,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///62c2c79e-b06e-4f54-8761-eb6ad32b4d24\",\"moduleSequenceNumber\":62705}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096-1\",\"moduleSequenceNumber\":62705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///96fe02c8-dab7-4300-b297-bfb4e80886ab\",\"moduleSequenceNumber\":58894}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-1\",\"moduleSequenceNumber\":58894,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///1c037290-71f3-4a7b-a928-caf388ea3f7a\",\"moduleSequenceNumber\":62707}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-1\",\"moduleSequenceNumber\":62707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-4096-1\",\"moduleSequenceNumber\":58767,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096-2\",\"httpPortOpen\":false,\"ip\":\"74.6.3.4\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"pserv-4096-2\",\"moduleSequenceNumber\":58773,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///6ddc6662-142a-4f0a-b3e9-9d1c1baedb90\",\"moduleSequenceNumber\":60807}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096-2\",\"moduleSequenceNumber\":60807,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///09a8436f-9cc2-40d5-b84c-d05dd3df04d2\",\"moduleSequenceNumber\":58895}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-2\",\"moduleSequenceNumber\":58895,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///6ef75f9c-70e9-4f0a-8b37-05344ff4fecc\",\"moduleSequenceNumber\":80103}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-2\",\"moduleSequenceNumber\":80103,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-4096-2\",\"moduleSequenceNumber\":58777,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096-3\",\"httpPortOpen\":false,\"ip\":\"24.7.5.8\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"pserv-4096-3\",\"moduleSequenceNumber\":58783,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///f48ae19d-b5a0-4495-b2c1-511bb25dbac3\",\"moduleSequenceNumber\":60173}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096-3\",\"moduleSequenceNumber\":60173,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///84726f80-7e7e-4443-9313-21fafa64a484\",\"moduleSequenceNumber\":58896}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-3\",\"moduleSequenceNumber\":58896,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///7cbf8002-766c-489a-b279-65762b2db150\",\"moduleSequenceNumber\":63341}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-3\",\"moduleSequenceNumber\":63341,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-4096-3\",\"moduleSequenceNumber\":58787,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096-4\",\"httpPortOpen\":false,\"ip\":\"36.7.9.9\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"pserv-4096-4\",\"moduleSequenceNumber\":58793,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///095704b9-62c6-4e17-8846-934ab510bb0e\",\"moduleSequenceNumber\":59853}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096-4\",\"moduleSequenceNumber\":59853,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///73ee5621-db85-4e6a-89f0-9bd8285eca8b\",\"moduleSequenceNumber\":58897}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-4\",\"moduleSequenceNumber\":58897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///0d16ff01-06a3-4d87-bae1-1bd45b71fbb2\",\"moduleSequenceNumber\":58898}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-4\",\"moduleSequenceNumber\":58898,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-4096-4\",\"moduleSequenceNumber\":58797,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096-5\",\"httpPortOpen\":false,\"ip\":\"78.0.9.7\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"pserv-4096-5\",\"moduleSequenceNumber\":58803,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///7d6b51c0-d053-43e1-a90d-d829dfe244dd\",\"moduleSequenceNumber\":60490}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096-5\",\"moduleSequenceNumber\":60490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///2c1dc4e5-4aa5-4fef-9566-664f405e6ea2\",\"moduleSequenceNumber\":59855}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-5\",\"moduleSequenceNumber\":59855,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///0c2a0a2c-a7e1-4b7f-9c54-12eb7c421126\",\"moduleSequenceNumber\":58899}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-5\",\"moduleSequenceNumber\":58899,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-4096-5\",\"moduleSequenceNumber\":58807,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096-6\",\"httpPortOpen\":false,\"ip\":\"82.6.9.0\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"pserv-4096-6\",\"moduleSequenceNumber\":58813,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///35a0ba53-c436-4366-b519-de30b1901848\",\"moduleSequenceNumber\":66509}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096-6\",\"moduleSequenceNumber\":66509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d81a43cf-0a44-4d60-b53f-b6636fdb0a85\",\"moduleSequenceNumber\":58900}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-6\",\"moduleSequenceNumber\":58900,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///56e5b5e8-6096-4820-a944-48dd69e709aa\",\"moduleSequenceNumber\":82633}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-6\",\"moduleSequenceNumber\":82633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-4096-6\",\"moduleSequenceNumber\":58817,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096-7\",\"httpPortOpen\":false,\"ip\":\"60.5.5.2\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4095,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",2340],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.41000000000042,\"pid\":17287,\"ramUsage\":1.75,\"server\":\"pserv-4096-7\",\"threads\":2340,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///aa1ea76c-3dff-4224-a005-c87036155a76\",\"moduleSequenceNumber\":58901}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"pserv-4096-7\",\"moduleSequenceNumber\":58823,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///4f615d47-eefc-449f-b9ef-5bfa33694e3f\",\"moduleSequenceNumber\":64927}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096-7\",\"moduleSequenceNumber\":64927,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///aa1ea76c-3dff-4224-a005-c87036155a76\",\"moduleSequenceNumber\":58901}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-7\",\"moduleSequenceNumber\":58901,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///62285075-bd45-47c7-a31b-6e041a1d94f6\",\"moduleSequenceNumber\":59218}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-7\",\"moduleSequenceNumber\":59218,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-4096-7\",\"moduleSequenceNumber\":58827,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096-8\",\"httpPortOpen\":false,\"ip\":\"37.8.5.8\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1503.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",86],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":67.41000000000042,\"pid\":17288,\"ramUsage\":1.75,\"server\":\"pserv-4096-8\",\"threads\":86,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///1b1f9b9f-d048-4ccd-90ce-ecd5b8cbd02c\",\"moduleSequenceNumber\":60172}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",558],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.00999999999993,\"pid\":17299,\"ramUsage\":1.75,\"server\":\"pserv-4096-8\",\"threads\":558,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///1b1f9b9f-d048-4ccd-90ce-ecd5b8cbd02c\",\"moduleSequenceNumber\":60172}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",215],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":17313,\"ramUsage\":1.75,\"server\":\"pserv-4096-8\",\"threads\":215,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///8a00962b-6a8c-40b9-8d04-375ebaa6b612\",\"moduleSequenceNumber\":96222}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"pserv-4096-8\",\"moduleSequenceNumber\":58833,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///5efe09fd-c118-401b-a374-ab8669a450ea\",\"moduleSequenceNumber\":64926}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096-8\",\"moduleSequenceNumber\":64926,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///1b1f9b9f-d048-4ccd-90ce-ecd5b8cbd02c\",\"moduleSequenceNumber\":60172}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-8\",\"moduleSequenceNumber\":60172,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///8a00962b-6a8c-40b9-8d04-375ebaa6b612\",\"moduleSequenceNumber\":96222}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-8\",\"moduleSequenceNumber\":96222,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-4096-8\",\"moduleSequenceNumber\":58837,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096-9\",\"httpPortOpen\":false,\"ip\":\"22.1.0.1\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"pserv-4096-9\",\"moduleSequenceNumber\":58843,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///6fb3a13a-b780-4cfb-9c4e-1d43360d4f4d\",\"moduleSequenceNumber\":106019}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096-9\",\"moduleSequenceNumber\":106019,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///7889cb29-8549-41d3-8eee-60f22165f4d8\",\"moduleSequenceNumber\":63658}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-9\",\"moduleSequenceNumber\":63658,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///c9c9bae5-cec1-436e-951d-146abd264436\",\"moduleSequenceNumber\":63659}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-9\",\"moduleSequenceNumber\":63659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-4096-9\",\"moduleSequenceNumber\":58847,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096-10\",\"httpPortOpen\":false,\"ip\":\"99.8.6.1\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"pserv-4096-10\",\"moduleSequenceNumber\":58853,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///d3d87758-7cde-4b44-a010-81ee160bee0a\",\"moduleSequenceNumber\":82632}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096-10\",\"moduleSequenceNumber\":82632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///001115d9-bbd6-4a0a-84da-70e7cfcc6208\",\"moduleSequenceNumber\":64608}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-10\",\"moduleSequenceNumber\":64608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///57727554-3a0e-4ce3-a1b6-4ce52013a111\",\"moduleSequenceNumber\":71566}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-10\",\"moduleSequenceNumber\":71566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-4096-10\",\"moduleSequenceNumber\":58857,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096-11\",\"httpPortOpen\":false,\"ip\":\"88.9.5.6\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"pserv-4096-11\",\"moduleSequenceNumber\":58863,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///55942844-f8a6-4af0-9113-d300b2778b32\",\"moduleSequenceNumber\":73463}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096-11\",\"moduleSequenceNumber\":73463,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///bdb32ba5-0da1-425a-8819-cd93b13ba188\",\"moduleSequenceNumber\":64609}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-11\",\"moduleSequenceNumber\":64609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///56e44156-5bdb-4f4f-89d1-4c40ce4b6123\",\"moduleSequenceNumber\":128772}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-11\",\"moduleSequenceNumber\":128772,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-4096-11\",\"moduleSequenceNumber\":58867,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096-12\",\"httpPortOpen\":false,\"ip\":\"47.4.9.1\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"pserv-4096-12\",\"moduleSequenceNumber\":58873,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///10debf8e-6c42-410e-868d-d2334863994a\",\"moduleSequenceNumber\":73464}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096-12\",\"moduleSequenceNumber\":73464,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///e5eb86d1-ab94-4102-86f5-43a496e7ca90\",\"moduleSequenceNumber\":73782}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-12\",\"moduleSequenceNumber\":73782,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///1d726cf7-39a8-4554-9eaa-03071bc02978\",\"moduleSequenceNumber\":73781}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-12\",\"moduleSequenceNumber\":73781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-4096-12\",\"moduleSequenceNumber\":58877,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4096-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4096-13\",\"httpPortOpen\":false,\"ip\":\"17.9.6.2\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"pserv-4096-13\",\"moduleSequenceNumber\":58883,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-4096-13\",\"moduleSequenceNumber\":58884,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///f6e4034c-073c-4570-9160-5c59c68b07ea\",\"moduleSequenceNumber\":142993}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-13\",\"moduleSequenceNumber\":142993,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-4096-13\",\"moduleSequenceNumber\":58886,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-4096-13\",\"moduleSequenceNumber\":58887,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":42438.285756678466}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":5.3669,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":90.468,\"isBanned\":false,\"isMember\":true,\"name\":\"Chongqing\",\"playerReputation\":75591.29774054814}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":17.2159,\"isBanned\":false,\"isMember\":true,\"name\":\"Ishima\",\"playerReputation\":3954.5123956829316}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":17.2246,\"isBanned\":false,\"isMember\":true,\"name\":\"New Tokyo\",\"playerReputation\":3958.3188987226345}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":51.5716,\"isBanned\":true,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":102.7897,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":27757.837405396018}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":37.5517,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":8259.47682554704}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":240,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":2,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":true,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":false,\"MonacoTheme\":\"one-dark\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#98C379\",\"primary\":\"#98C379\",\"primarydark\":\"#98C379\",\"successlight\":\"#98C379\",\"success\":\"#98C379\",\"successdark\":\"#98C379\",\"errorlight\":\"#E06C75\",\"error\":\"#BE5046\",\"errordark\":\"#BE5046\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E5C07B\",\"warning\":\"#E5C07B\",\"warningdark\":\"#D19A66\",\"infolight\":\"#61AFEF\",\"info\":\"#61AFEF\",\"infodark\":\"#61AFEF\",\"welllight\":\"#4B5263\",\"well\":\"#282C34\",\"white\":\"#ABB2BF\",\"black\":\"#282C34\",\"hp\":\"#E06C75\",\"money\":\"#E5C07B\",\"hack\":\"#98C379\",\"combat\":\"#ABB2BF\",\"cha\":\"#C678DD\",\"int\":\"#61AFEF\",\"rep\":\"#ABB2BF\",\"disabled\":\"#56B6C2\",\"backgroundprimary\":\"#282C34\",\"backgroundsecondary\":\"#21252B\",\"button\":\"#4B5263\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-29,\"y\":0,\"opened\":true},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}}}","VersionSave":"25","AllGangsSave":"","LastExportBonus":"1661713160039","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}