{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":2329,\"max\":2329},\"skills\":{\"hacking\":11269,\"strength\":15349,\"defense\":23190,\"dexterity\":8527,\"agility\":13402,\"charisma\":1496,\"intelligence\":44},\"exp\":{\"hacking\":104294243264.62935,\"strength\":7084083.3269129945,\"defense\":7083220.102386258,\"dexterity\":8145684.517724888,\"agility\":7086359.100665303,\"charisma\":5412987.736226764,\"intelligence\":1539.5166989013514},\"mults\":{\"hacking_chance\":10.944495526817123,\"hacking_speed\":8.34866328606431,\"hacking_money\":92.79124147069973,\"hacking_grow\":15.085532068369936,\"hacking\":52.62258188622865,\"hacking_exp\":35.21698916108783,\"strength\":125.92014561608234,\"strength_exp\":6.952390719582896,\"defense\":190.2418966989016,\"defense_exp\":6.952390719582896,\"dexterity\":68.9435954807572,\"dexterity_exp\":7.99524932752033,\"agility\":109.93988567649296,\"agility_exp\":6.952390719582896,\"charisma\":12.635727394562513,\"charisma_exp\":12.765155852249869,\"hacknet_node_money\":2.1284701331033418,\"hacknet_node_purchase_cost\":0.4577935977796922,\"hacknet_node_ram_cost\":0.4577935977796922,\"hacknet_node_core_cost\":0.4577935977796922,\"hacknet_node_level_cost\":0.4577935977796922,\"company_rep\":33.069153747676296,\"faction_rep\":5.0054723681888245,\"work_money\":4.992624683012523,\"crime_success\":6.938903093897553,\"crime_money\":12.96707515672105,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"money\":1172408353124982.5,\"city\":\"Volhaven\",\"location\":\"CompuTek\",\"jobs\":{\"NWO\":\"Chief Financial Officer\",\"Fulcrum Technologies\":\"Business Manager\",\"KuaiGong International\":\"Head of Security\",\"OmniTek Incorporated\":\"Head of Security\",\"ECorp\":\"Security Officer\",\"Bachman & Associates\":\"Security Officer\",\"Clarke Incorporated\":\"Security Officer\",\"MegaCorp\":\"Security Officer\",\"Four Sigma\":\"Security Officer\",\"Blade Industries\":\"Security Officer\"},\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-8192\",\"pserv-8192-0\",\"pserv-8192-1\",\"pserv-8192-2\",\"pserv-8192-3\",\"pserv-8192-4\",\"pserv-8192-5\",\"pserv-8192-6\",\"pserv-8192-7\",\"pserv-8192-8\",\"pserv-8192-9\",\"pserv-8192-10\",\"pserv-8192-11\",\"pserv-8192-12\",\"pserv-8192-13\"],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Illuminati\",\"Daedalus\",\"The Covenant\",\"ECorp\",\"MegaCorp\",\"Bachman & Associates\",\"Blade Industries\",\"NWO\",\"Clarke Incorporated\",\"OmniTek Incorporated\",\"Four Sigma\",\"KuaiGong International\",\"Fulcrum Secret Technologies\",\"BitRunners\",\"The Black Hand\",\"NiteSec\",\"Volhaven\",\"Speakers for the Dead\",\"The Dark Army\",\"The Syndicate\",\"Silhouette\",\"Tetrads\",\"Slum Snakes\",\"Tian Di Hui\",\"CyberSec\",\"Shadows of Anarchy\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"SoA - Chaos of Dionysus\"},{\"level\":1,\"name\":\"Hydroflame Left Arm\"},{\"level\":1,\"name\":\"Graphene Bionic Arms Upgrade\"},{\"level\":62,\"name\":\"NeuroFlux Governor\"},{\"level\":63,\"name\":\"NeuroFlux Governor\"},{\"level\":64,\"name\":\"NeuroFlux Governor\"},{\"level\":65,\"name\":\"NeuroFlux Governor\"},{\"level\":66,\"name\":\"NeuroFlux Governor\"},{\"level\":67,\"name\":\"NeuroFlux Governor\"},{\"level\":68,\"name\":\"NeuroFlux Governor\"},{\"level\":69,\"name\":\"NeuroFlux Governor\"},{\"level\":70,\"name\":\"NeuroFlux Governor\"},{\"level\":71,\"name\":\"NeuroFlux Governor\"},{\"level\":72,\"name\":\"NeuroFlux Governor\"},{\"level\":73,\"name\":\"NeuroFlux Governor\"},{\"level\":74,\"name\":\"NeuroFlux Governor\"},{\"level\":75,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"level\":61,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"INFRARET Enhancement\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"Neurotrainer III\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Enhanced Social Interaction Implant\"},{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"HemoRecirculator\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"DermaForce Particle Barrier\"},{\"level\":1,\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V3 Upgrade\"},{\"level\":1,\"name\":\"Xanipher\"},{\"level\":1,\"name\":\"The Shadow's Simulacrum\"},{\"level\":1,\"name\":\"Embedded Netburner Module Analyze Engine\"},{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":1,\"name\":\"Bionic Spine\"},{\"level\":1,\"name\":\"BrachiBlades\"},{\"level\":1,\"name\":\"Combat Rib III\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Bionic Arms\"},{\"level\":1,\"name\":\"Augmented Targeting III\"},{\"level\":1,\"name\":\"NEMEAN Subdermal Weave\"},{\"level\":1,\"name\":\"Bionic Legs\"},{\"level\":1,\"name\":\"Unstable Circadian Modulator\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Graphene BrachiBlades Upgrade\"},{\"level\":1,\"name\":\"QLink\"},{\"level\":1,\"name\":\"nickofolas Congruity Implant\"},{\"level\":1,\"name\":\"ECorp HVMind Implant\"},{\"level\":1,\"name\":\"OmniTek InfoLoad\"},{\"level\":1,\"name\":\"nextSENS Gene Modification\"},{\"level\":1,\"name\":\"SPTN-97 Gene Modification\"},{\"level\":1,\"name\":\"HyperSight Corneal Implant\"},{\"level\":1,\"name\":\"Neuronal Densification\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface NeuroNet Injector\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface Optimization Submodule\"},{\"level\":1,\"name\":\"SmartJaw\"},{\"level\":1,\"name\":\"FocusWire\"},{\"level\":1,\"name\":\"ADR-V2 Pheromone Gene\"},{\"level\":1,\"name\":\"Graphene Bionic Legs Upgrade\"},{\"level\":1,\"name\":\"Graphene Bionic Spine Upgrade\"},{\"level\":1,\"name\":\"CordiARC Fusion Reactor\"},{\"level\":1,\"name\":\"TITN-41 Gene-Modification Injection\"}],\"sourceFiles\":[{\"lvl\":1,\"n\":1},{\"lvl\":1,\"n\":5}],\"numPeopleKilled\":31,\"karma\":-1108.5,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":202,\"max\":202},\"skills\":{\"hacking\":475,\"strength\":6359,\"defense\":1923,\"dexterity\":1319,\"agility\":444,\"charisma\":249,\"intelligence\":2},\"exp\":{\"hacking\":584099.3293852876,\"strength\":230620.8937031981,\"defense\":230620.8937031981,\"dexterity\":265214.02775868383,\"agility\":230620.8937031981,\"charisma\":190547.43847701832,\"intelligence\":24.375},\"mults\":{\"hacking_chance\":1.5870228412500005,\"hacking_speed\":1.4964983878804825,\"hacking_money\":4.805475674999999,\"hacking_grow\":1.75,\"hacking\":6.044680209258686,\"hacking_exp\":12.256060459635432,\"strength\":81.43294035254819,\"strength_exp\":4.8390803999999985,\"defense\":24.630633033428815,\"defense_exp\":4.8390803999999985,\"dexterity\":16.51334535163814,\"dexterity_exp\":5.564942459999998,\"agility\":5.693570190000001,\"agility_exp\":4.8390803999999985,\"charisma\":3.2980723776000005,\"charisma_exp\":3.998225659428,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":2.73170697228,\"faction_rep\":1.8813408899999997,\"work_money\":2.34564,\"crime_success\":1.6300212500000004,\"crime_money\":3.0461022109375007,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen I\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"Neuregen Gene Modification\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"CRTX42-AA Gene Modification\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen III\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Embedded Netburner Module Core Implant\",\"level\":1},{\"name\":\"Enhanced Social Interaction Implant\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V3 Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V2 Upgrade\",\"level\":1},{\"name\":\"Enhanced Myelin Sheathing\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"Unstable Circadian Modulator\",\"level\":1},{\"name\":\"BitRunners Neurolink\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen V\",\"level\":1},{\"name\":\"Neural Accelerator\",\"level\":1},{\"name\":\"Artificial Bio-neural Network Implant\",\"level\":1},{\"name\":\"Hydroflame Left Arm\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"TITN-41 Gene-Modification Injection\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"Neuronal Densification\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1}],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveFactionWork\",\"data\":{\"type\":\"FACTION\",\"factionWorkType\":\"FIELD\",\"factionName\":\"Daedalus\"}},\"memory\":100,\"shock\":100,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":163,\"max\":163},\"skills\":{\"hacking\":475,\"strength\":5086,\"defense\":1538,\"dexterity\":959,\"agility\":355,\"charisma\":231,\"intelligence\":1},\"exp\":{\"hacking\":583412.9899995478,\"strength\":230349.90520079812,\"defense\":230349.90520079812,\"dexterity\":264902.3909809239,\"agility\":230349.90520079812,\"charisma\":190323.53784009034,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.5870228412500007,\"hacking_speed\":1.496498387880483,\"hacking_money\":4.805475675,\"hacking_grow\":1.75,\"hacking\":6.044680209258686,\"hacking_exp\":8.754328899739594,\"strength\":65.14635228203856,\"strength_exp\":2.0162835,\"defense\":19.704506426743052,\"defense_exp\":2.0162835,\"dexterity\":12.009705710282281,\"dexterity_exp\":2.3187260249999997,\"agility\":4.554856152000001,\"agility_exp\":2.0162835,\"charisma\":3.060288,\"charisma_exp\":3.7099616399999995,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":2.5347564000000005,\"faction_rep\":1.7456999999999996,\"work_money\":1.32,\"crime_success\":2.4200000000000004,\"crime_money\":5.1390625,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Enhanced Social Interaction Implant\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Embedded Netburner Module Core Implant\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V2 Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V3 Upgrade\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"Hydroflame Left Arm\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Artificial Bio-neural Network Implant\",\"level\":1},{\"name\":\"Enhanced Myelin Sheathing\",\"level\":1},{\"name\":\"Neural Accelerator\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen III\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen V\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"BitRunners Neurolink\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen I\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"CRTX42-AA Gene Modification\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Unstable Circadian Modulator\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"TITN-41 Gene-Modification Injection\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"Neuronal Densification\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1}],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveSynchroWork\",\"data\":{\"type\":\"SYNCHRO\"}},\"memory\":100,\"shock\":100,\"storedCycles\":1,\"sync\":60.14181794528393}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":163,\"max\":163},\"skills\":{\"hacking\":475,\"strength\":5085,\"defense\":1538,\"dexterity\":958,\"agility\":355,\"charisma\":231,\"intelligence\":1},\"exp\":{\"hacking\":582898.2354602433,\"strength\":230146.66382399813,\"defense\":230146.66382399813,\"dexterity\":264668.6633976039,\"agility\":230146.66382399813,\"charisma\":190155.61236239437,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.5870228412500007,\"hacking_speed\":1.496498387880483,\"hacking_money\":4.805475675,\"hacking_grow\":1.75,\"hacking\":6.044680209258686,\"hacking_exp\":8.754328899739594,\"strength\":65.14635228203856,\"strength_exp\":2.0162835,\"defense\":19.704506426743052,\"defense_exp\":2.0162835,\"dexterity\":12.009705710282281,\"dexterity_exp\":2.3187260249999997,\"agility\":4.554856152000001,\"agility_exp\":2.0162835,\"charisma\":3.060288,\"charisma_exp\":3.7099616399999995,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":2.5347564000000005,\"faction_rep\":1.7456999999999996,\"work_money\":1.32,\"crime_success\":2.4200000000000004,\"crime_money\":5.1390625,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Enhanced Social Interaction Implant\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Embedded Netburner Module Core Implant\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V2 Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V3 Upgrade\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"Hydroflame Left Arm\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Artificial Bio-neural Network Implant\",\"level\":1},{\"name\":\"Enhanced Myelin Sheathing\",\"level\":1},{\"name\":\"Neural Accelerator\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen III\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen V\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"BitRunners Neurolink\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen I\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"CRTX42-AA Gene Modification\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Unstable Circadian Modulator\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"TITN-41 Gene-Modification Injection\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"Neuronal Densification\",\"level\":1}],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveSynchroWork\",\"data\":{\"type\":\"SYNCHRO\"}},\"memory\":100,\"shock\":100,\"storedCycles\":1,\"sync\":47.90633748328577}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":163,\"max\":163},\"skills\":{\"hacking\":475,\"strength\":5084,\"defense\":1537,\"dexterity\":958,\"agility\":355,\"charisma\":231,\"intelligence\":1},\"exp\":{\"hacking\":582334.4566791,\"strength\":229924.06612559815,\"defense\":229924.06612559815,\"dexterity\":264412.676044444,\"agility\":229924.06612559815,\"charisma\":189971.69398206065,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.587022841250001,\"hacking_speed\":1.4964983878804827,\"hacking_money\":4.805475675,\"hacking_grow\":1.75,\"hacking\":6.044680209258686,\"hacking_exp\":8.754328899739594,\"strength\":65.14635228203856,\"strength_exp\":2.0162835,\"defense\":19.704506426743055,\"defense_exp\":2.0162835,\"dexterity\":12.009705710282281,\"dexterity_exp\":2.3187260249999997,\"agility\":4.554856152000001,\"agility_exp\":2.0162835,\"charisma\":3.0602880000000003,\"charisma_exp\":3.7099616399999995,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":2.5347564000000005,\"faction_rep\":1.7456999999999996,\"work_money\":1.32,\"crime_success\":2.4200000000000004,\"crime_money\":5.1390625,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Enhanced Social Interaction Implant\",\"level\":1},{\"name\":\"Embedded Netburner Module Core Implant\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V2 Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V3 Upgrade\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"Hydroflame Left Arm\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Artificial Bio-neural Network Implant\",\"level\":1},{\"name\":\"Enhanced Myelin Sheathing\",\"level\":1},{\"name\":\"Neural Accelerator\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen III\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen V\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"BitRunners Neurolink\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen I\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"CRTX42-AA Gene Modification\",\"level\":1},{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Unstable Circadian Modulator\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"Graphene BrachiBlades Upgrade\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"TITN-41 Gene-Modification Injection\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"Neuronal Densification\",\"level\":1}],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveSynchroWork\",\"data\":{\"type\":\"SYNCHRO\"}},\"memory\":100,\"shock\":100,\"storedCycles\":1,\"sync\":28.63149111841243}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":19,\"max\":19},\"skills\":{\"hacking\":96,\"strength\":98,\"defense\":98,\"dexterity\":100,\"agility\":98,\"charisma\":96,\"intelligence\":1},\"exp\":{\"hacking\":2734102.0227082614,\"strength\":1164398.8821695026,\"defense\":1164398.8821695026,\"dexterity\":1339058.7144950326,\"agility\":1164398.8821695026,\"charisma\":962069.0510742973,\"intelligence\":0},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveRecoveryWork\",\"data\":{\"type\":\"RECOVERY\"}},\"memory\":100,\"shock\":37.38699999999395,\"storedCycles\":1,\"sync\":1}}],\"sleevesFromCovenant\":4,\"bitNodeN\":10,\"entropy\":0,\"lastUpdate\":1662315665750,\"lastSave\":1662315663160,\"totalPlaytime\":2491341600,\"playtimeSinceLastAug\":126264200,\"playtimeSinceLastBitnode\":1237639400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-88128,\"codingcontract\":0,\"corporation\":0,\"crime\":4522267.460906468,\"gang\":0,\"hacking\":19558126467694336,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":-109862000,\"infiltration\":0,\"sleeves\":-12645852162680552,\"stock\":0,\"total\":1172408352124982.5,\"work\":76147629.72004989,\"servers\":-2225011529341081.2,\"other\":-311500000,\"augmentations\":-3514854082770750.5}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-109248,\"codingcontract\":0,\"corporation\":0,\"crime\":36068664.2782805,\"gang\":0,\"hacking\":19587312209641464,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":-109862000,\"infiltration\":0,\"sleeves\":-12645909772879996,\"stock\":0,\"total\":1175120089108774.5,\"work\":116834400.82156113,\"servers\":-2232674281942178.8,\"other\":-3760264700000,\"augmentations\":-3529847843945553}},\"scriptProdSinceLastAug\":16592821935632942,\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1659824867829},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1659825047835},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1659979761452},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1660064291656},{\"ID\":\"FROZE\",\"unlockedOn\":1660070224596},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1660073344593},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1660074763681},{\"ID\":\"TOR\",\"unlockedOn\":1660156303324},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1660156543333},{\"ID\":\"NITESEC\",\"unlockedOn\":1660254508514},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1660254628533},{\"ID\":\"TRAVEL\",\"unlockedOn\":1660255468524},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1660485627110},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1660485627120},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1660485627122},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1660512825233},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1660566971219},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1660650992951},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1660678330325},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1660724917416},{\"ID\":\"4S\",\"unlockedOn\":1660751408262},{\"ID\":\"DONATION\",\"unlockedOn\":1660820248649},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1660847929353},{\"ID\":\"SF1.1\",\"unlockedOn\":1660863818847},{\"ID\":\"WORKOUT\",\"unlockedOn\":1660864298842},{\"ID\":\"SF5.1\",\"unlockedOn\":1661503823880},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1662188976553},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1662190722916},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1662191202983},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1662193242893},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1662276199967},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1662297854463},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1662299239720}],\"terminalCommandHistory\":[\"connect silver-helix\",\"connect netlink\",\"connect rothman-uni\",\"connect alpha-ent\",\"connect snap-fitness\",\"connect deltaone\",\"connect defcomm\",\"connect taiyang-digital\",\"connect applied-energetics\",\"connect helios\",\"connect omnitek\",\"connect nwo\",\"backdoor\",\"home\",\"connect n\",\"connect n00dles\",\"connect max-hardware\",\"connect silver-helix\",\"connect netlink\",\"connect rothman-uni\",\"connect alpha-ent\",\"backdoor\",\"home\",\"./scripts\",\"./scripts/compare-servers.js\",\"./scripts/find-\",\"./scripts/find-server.js\",\"connect n00dles\",\"connect max-hardware\",\"connect silver-helix\",\"connect netlink\",\"connect rothman-uni\",\"connect alpha-ent\",\"connect snap-fitness\",\"connect deltaone\",\"connect defcomm\",\"connect taiyang-digital\",\"connect applied-energetics\",\"connect helios\",\"connect .\",\"connect blade\",\"connect fulcrumassets\",\"backdoor\",\"home\",\"./scripts/compare-servers.js\",\"./scripts/add-targets.js\",\"./scripts/compare-servers.js\",\"./fl1ght.exe\",\"./scripts/compare-servers.js\",\"./scripts/add-all-targets.js\"],\"focus\":false,\"currentWork\":null,\"identifier\":\"15ded30ed8298a\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":8,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"19.7.1.8\",\"isConnectedTo\":true,\"maxRam\":2097152,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"Formulas.exe\",\"fl1ght.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\",\"DeepscanV2.exe\"],\"ramUsed\":11450.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/scripts/multi-target-scheduler.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":23351136691.59803,\"offlineMoneyMade\":0,\"offlineRunningTime\":31733.556999999997,\"onlineExpGained\":80901347229.17393,\"onlineMoneyMade\":16592202199877390,\"onlineRunningTime\":94413.80999979647,\"pid\":1,\"ramUsage\":9.35,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///672e3a44-48fa-4495-b7f1-beaa9bc4f06e\",\"moduleSequenceNumber\":1978},{\"filename\":\"/scripts/multi-target-scheduler.js\",\"url\":\"blob:file:///597ae566-5c50-4c1d-b92c-a75f0a58c58f\",\"moduleSequenceNumber\":2003}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\",692],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.809999999999995,\"pid\":819224,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":692,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///6eef7624-7600-4253-8ab8-14f636f3479a\",\"moduleSequenceNumber\":672}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",72],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999996,\"pid\":819256,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":72,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///6eef7624-7600-4253-8ab8-14f636f3479a\",\"moduleSequenceNumber\":672}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",73],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.41,\"pid\":819338,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":73,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///6eef7624-7600-4253-8ab8-14f636f3479a\",\"moduleSequenceNumber\":672}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\",71],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.61,\"pid\":819353,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":71,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///6eef7624-7600-4253-8ab8-14f636f3479a\",\"moduleSequenceNumber\":672}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",120],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.01,\"pid\":819393,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":120,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d2c82fa8-7afa-43c0-ad9c-3c821ec4cab0\",\"moduleSequenceNumber\":677}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\",244],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.210000000000003,\"pid\":819443,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":244,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d2c82fa8-7afa-43c0-ad9c-3c821ec4cab0\",\"moduleSequenceNumber\":677}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",261],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.610000000000003,\"pid\":819457,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":261,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d2c82fa8-7afa-43c0-ad9c-3c821ec4cab0\",\"moduleSequenceNumber\":677}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",131],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000002,\"pid\":819489,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":131,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d2c82fa8-7afa-43c0-ad9c-3c821ec4cab0\",\"moduleSequenceNumber\":677}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\",149],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000001,\"pid\":819503,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":149,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d2c82fa8-7afa-43c0-ad9c-3c821ec4cab0\",\"moduleSequenceNumber\":677}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\",164],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000001,\"pid\":819504,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":164,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d2c82fa8-7afa-43c0-ad9c-3c821ec4cab0\",\"moduleSequenceNumber\":677}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",124],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000001,\"pid\":819505,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":124,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d2c82fa8-7afa-43c0-ad9c-3c821ec4cab0\",\"moduleSequenceNumber\":677}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",222],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000002,\"pid\":819519,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":222,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d2c82fa8-7afa-43c0-ad9c-3c821ec4cab0\",\"moduleSequenceNumber\":677}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\",124],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000002,\"pid\":819521,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":124,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d2c82fa8-7afa-43c0-ad9c-3c821ec4cab0\",\"moduleSequenceNumber\":677}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",121],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000002,\"pid\":819522,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":121,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d2c82fa8-7afa-43c0-ad9c-3c821ec4cab0\",\"moduleSequenceNumber\":677}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",115],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000001,\"pid\":819535,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":115,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d2c82fa8-7afa-43c0-ad9c-3c821ec4cab0\",\"moduleSequenceNumber\":677}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",114],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000001,\"pid\":819536,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":114,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d2c82fa8-7afa-43c0-ad9c-3c821ec4cab0\",\"moduleSequenceNumber\":677}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\",204],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000001,\"pid\":819537,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":204,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d2c82fa8-7afa-43c0-ad9c-3c821ec4cab0\",\"moduleSequenceNumber\":677}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\",306],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000001,\"pid\":819538,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":306,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d2c82fa8-7afa-43c0-ad9c-3c821ec4cab0\",\"moduleSequenceNumber\":677}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",8],\"dataMap\":{},\"filename\":\"/payload/hack-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000001,\"pid\":819539,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":8,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///0630e64b-47b9-44f9-95fa-98fca62710f3\",\"moduleSequenceNumber\":679}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\",8],\"dataMap\":{},\"filename\":\"/payload/hack-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000001,\"pid\":819540,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":8,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///0630e64b-47b9-44f9-95fa-98fca62710f3\",\"moduleSequenceNumber\":679}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",8],\"dataMap\":{},\"filename\":\"/payload/hack-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.8100000000000005,\"pid\":819556,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":8,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///0630e64b-47b9-44f9-95fa-98fca62710f3\",\"moduleSequenceNumber\":679}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\",144],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.2100000000000004,\"pid\":819569,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":144,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d2c82fa8-7afa-43c0-ad9c-3c821ec4cab0\",\"moduleSequenceNumber\":677}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",80],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"pid\":819584,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":80,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///6eef7624-7600-4253-8ab8-14f636f3479a\",\"moduleSequenceNumber\":672}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\",7],\"dataMap\":{},\"filename\":\"/payload/hack-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"pid\":819585,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":7,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///0630e64b-47b9-44f9-95fa-98fca62710f3\",\"moduleSequenceNumber\":679}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\",319],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"pid\":819586,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":319,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d2c82fa8-7afa-43c0-ad9c-3c821ec4cab0\",\"moduleSequenceNumber\":677}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\",7],\"dataMap\":{},\"filename\":\"/payload/hack-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"pid\":819587,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":7,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///0630e64b-47b9-44f9-95fa-98fca62710f3\",\"moduleSequenceNumber\":679}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\",7],\"dataMap\":{},\"filename\":\"/payload/hack-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"pid\":819588,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":7,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///0630e64b-47b9-44f9-95fa-98fca62710f3\",\"moduleSequenceNumber\":679}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",7],\"dataMap\":{},\"filename\":\"/payload/hack-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.0100000000000002,\"pid\":819600,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":7,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///0630e64b-47b9-44f9-95fa-98fca62710f3\",\"moduleSequenceNumber\":679}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",79],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.0100000000000002,\"pid\":819603,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":79,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///6eef7624-7600-4253-8ab8-14f636f3479a\",\"moduleSequenceNumber\":672}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",138],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.0100000000000002,\"pid\":819605,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":138,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d2c82fa8-7afa-43c0-ad9c-3c821ec4cab0\",\"moduleSequenceNumber\":677}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\",79],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.0100000000000002,\"pid\":819606,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":79,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///6eef7624-7600-4253-8ab8-14f636f3479a\",\"moduleSequenceNumber\":672}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\",8],\"dataMap\":{},\"filename\":\"/payload/hack-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.0100000000000002,\"pid\":819607,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":8,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///0630e64b-47b9-44f9-95fa-98fca62710f3\",\"moduleSequenceNumber\":679}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\",8],\"dataMap\":{},\"filename\":\"/payload/hack-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.0100000000000002,\"pid\":819608,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":8,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///0630e64b-47b9-44f9-95fa-98fca62710f3\",\"moduleSequenceNumber\":679}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",6],\"dataMap\":{},\"filename\":\"/payload/hack-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.2100000000000002,\"pid\":819620,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":6,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///0630e64b-47b9-44f9-95fa-98fca62710f3\",\"moduleSequenceNumber\":679}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\",168],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.2100000000000002,\"pid\":819621,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":168,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d2c82fa8-7afa-43c0-ad9c-3c821ec4cab0\",\"moduleSequenceNumber\":677}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\",79],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.2100000000000002,\"pid\":819622,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":79,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///6eef7624-7600-4253-8ab8-14f636f3479a\",\"moduleSequenceNumber\":672}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",5],\"dataMap\":{},\"filename\":\"/payload/hack-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":819631,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///0630e64b-47b9-44f9-95fa-98fca62710f3\",\"moduleSequenceNumber\":679}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",160],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":819632,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":160,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d2c82fa8-7afa-43c0-ad9c-3c821ec4cab0\",\"moduleSequenceNumber\":677}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\",6],\"dataMap\":{},\"filename\":\"/payload/hack-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":819633,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":6,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///0630e64b-47b9-44f9-95fa-98fca62710f3\",\"moduleSequenceNumber\":679}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",6],\"dataMap\":{},\"filename\":\"/payload/hack-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":819634,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":6,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///0630e64b-47b9-44f9-95fa-98fca62710f3\",\"moduleSequenceNumber\":679}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\",167],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":819635,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":167,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d2c82fa8-7afa-43c0-ad9c-3c821ec4cab0\",\"moduleSequenceNumber\":677}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",6],\"dataMap\":{},\"filename\":\"/payload/hack-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":819636,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":6,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///0630e64b-47b9-44f9-95fa-98fca62710f3\",\"moduleSequenceNumber\":679}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\",73],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":819637,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":73,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///6eef7624-7600-4253-8ab8-14f636f3479a\",\"moduleSequenceNumber\":672}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",7],\"dataMap\":{},\"filename\":\"/payload/hack-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":819638,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":7,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///0630e64b-47b9-44f9-95fa-98fca62710f3\",\"moduleSequenceNumber\":679}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",2],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":819639,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":2,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d2c82fa8-7afa-43c0-ad9c-3c821ec4cab0\",\"moduleSequenceNumber\":677}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",77],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":819640,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":77,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///6eef7624-7600-4253-8ab8-14f636f3479a\",\"moduleSequenceNumber\":672}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",5],\"dataMap\":{},\"filename\":\"/payload/hack-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":819641,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///0630e64b-47b9-44f9-95fa-98fca62710f3\",\"moduleSequenceNumber\":679}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",5],\"dataMap\":{},\"filename\":\"/payload/hack-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":819642,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///0630e64b-47b9-44f9-95fa-98fca62710f3\",\"moduleSequenceNumber\":679}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",78],\"dataMap\":{},\"filename\":\"/payload/weaken-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":819643,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":78,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///6eef7624-7600-4253-8ab8-14f636f3479a\",\"moduleSequenceNumber\":672}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",5],\"dataMap\":{},\"filename\":\"/payload/hack-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":819644,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///0630e64b-47b9-44f9-95fa-98fca62710f3\",\"moduleSequenceNumber\":679}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",183],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":819645,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":183,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d2c82fa8-7afa-43c0-ad9c-3c821ec4cab0\",\"moduleSequenceNumber\":677}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",105],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":819646,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":105,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d2c82fa8-7afa-43c0-ad9c-3c821ec4cab0\",\"moduleSequenceNumber\":677}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",5],\"dataMap\":{},\"filename\":\"/payload/hack-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":819647,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///0630e64b-47b9-44f9-95fa-98fca62710f3\",\"moduleSequenceNumber\":679}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",5],\"dataMap\":{},\"filename\":\"/payload/hack-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":819648,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///0630e64b-47b9-44f9-95fa-98fca62710f3\",\"moduleSequenceNumber\":679}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",314],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":819649,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":314,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d2c82fa8-7afa-43c0-ad9c-3c821ec4cab0\",\"moduleSequenceNumber\":677}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",5],\"dataMap\":{},\"filename\":\"/payload/hack-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":819650,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///0630e64b-47b9-44f9-95fa-98fca62710f3\",\"moduleSequenceNumber\":679}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",5],\"dataMap\":{},\"filename\":\"/payload/hack-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":819651,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///0630e64b-47b9-44f9-95fa-98fca62710f3\",\"moduleSequenceNumber\":679}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"computek\",124],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":819652,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":124,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d2c82fa8-7afa-43c0-ad9c-3c821ec4cab0\",\"moduleSequenceNumber\":677}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",179],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":819653,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":179,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d2c82fa8-7afa-43c0-ad9c-3c821ec4cab0\",\"moduleSequenceNumber\":677}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",8],\"dataMap\":{},\"filename\":\"/payload/hack-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":819654,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":8,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///0630e64b-47b9-44f9-95fa-98fca62710f3\",\"moduleSequenceNumber\":679}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\",157],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":819655,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":157,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d2c82fa8-7afa-43c0-ad9c-3c821ec4cab0\",\"moduleSequenceNumber\":677}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\",234],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":819656,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":234,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d2c82fa8-7afa-43c0-ad9c-3c821ec4cab0\",\"moduleSequenceNumber\":677}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\",149],\"dataMap\":{},\"filename\":\"/payload/grow-only.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":819657,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":149,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d2c82fa8-7afa-43c0-ad9c-3c821ec4cab0\",\"moduleSequenceNumber\":677}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    filter_adminRights,\\r\\n    filter_canNuke,\\r\\n    filter_minRam,\\r\\n    filter_hostname,\\r\\n    filter_playerServer,\\r\\n    getAllServers,\\r\\n    applyFilter,\\r\\n    deployPayload,\\r\\n    portOpener,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var noAdminFilter = filter_adminRights(false)\\r\\n    var hasAdminFilter = filter_adminRights(true)\\r\\n    var canNukeFilter = filter_canNuke(ns)\\r\\n    var ramFilter = filter_minRam(4)\\r\\n    var nameFilter = filter_hostname(ns, \\\"darkweb|home\\\")\\r\\n    var playerServerFilter = filter_playerServer()\\r\\n\\r\\n    var targets = getAllServers(ns)\\r\\n    targets = applyFilter(targets, [noAdminFilter, canNukeFilter], false, false)\\r\\n    targets = applyFilter(targets, [nameFilter, playerServerFilter])\\r\\n    for (const t in targets) {\\r\\n        ns.printf(\\\"Nuking Target: %s\\\", targets[t].hostname)\\r\\n        attack(ns, targets[t])\\r\\n    }\\r\\n\\r\\n    targets = getAllServers(ns)\\r\\n    targets = applyFilter(targets, [hasAdminFilter, ramFilter], false, false)\\r\\n    for (const t in targets) {\\r\\n        ns.printf(\\\"Deploying payload on Target: %s\\\", targets[t].hostname)\\r\\n        await deployPayload(ns, t)\\r\\n    }\\r\\n    for (const name of ns.getPurchasedServers()) {\\r\\n        ns.printf(\\\"Deploying payload on Target: %s\\\", name)\\r\\n        await deployPayload(ns, name)\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function attack(ns, target) {\\r\\n    var po = portOpener(ns)\\r\\n    if (target.openPortCount < target.numOpenPortsRequired) {\\r\\n        for (let attack of po) {\\r\\n            if (attack[\\\"check\\\"](target)) {\\r\\n                attack[\\\"func\\\"](target.hostname)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    ns.nuke(target.hostname)\\r\\n\\r\\n    // if (!target.backdoorInstalled) {\\r\\n    //     await ns.singularity.installBackdoor(target.hostname)\\r\\n    // }\\r\\n}\",\"filename\":\"/scripts/backdoor-worm.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///72d0be3d-241b-4bc7-b30e-03960d95e855\",\"moduleSequenceNumber\":243},{\"filename\":\"/scripts/backdoor-worm.js\",\"url\":\"blob:file:///95cd2730-d79f-464c-8c0d-a150a3c97da5\",\"moduleSequenceNumber\":1888}],\"dependents\":[],\"ramUsage\":10.7,\"server\":\"home\",\"moduleSequenceNumber\":316,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar host = ns.args[0]\\r\\n\\tvar growFactor = ns.args[1]\\r\\n\\tvar cores = ns.args[2]\\r\\n\\tvar t = ns.growthAnalyze(host, growFactor, cores)\\r\\n\\tns.tprintf(\\\"%f\\\", t)\\r\\n}\\r\\n\",\"filename\":\"/scratch/test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scratch/test.js\",\"url\":\"blob:file:///eca5b35d-c9f2-4f45-82af-3aabccbe26a2\",\"moduleSequenceNumber\":67064}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"home\",\"moduleSequenceNumber\":318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAdditionalServerInfo, hasFormulas } from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var server = ns.getServer(name)\\r\\n    var advancedServer = getAdditionalServerInfo(ns, server)\\r\\n\\r\\n    ns.tprint(name)\\r\\n    ns.tprintf(\\\"  Weaken time: %s\\\", ns.nFormat(advancedServer.weakenTime / 1000, \\\"00:00:00\\\"))\\r\\n    ns.tprintf(\\\"  Hack time: %s\\\", ns.nFormat(advancedServer.hackTime / 1000, \\\"00:00:00\\\"))\\r\\n    ns.tprintf(\\\"  Grow time: %s\\\", ns.nFormat(advancedServer.growTime / 1000, \\\"00:00:00\\\"))\\r\\n    ns.tprintf(\\\"  Max money: %s (%f)\\\", ns.nFormat(server.moneyMax, \\\"($0.00a)\\\"), server.moneyMax)\\r\\n    ns.tprintf(\\\"  Money: %s (%f)\\\", ns.nFormat(server.moneyAvailable, \\\"($0.00a)\\\"), server.moneyAvailable)\\r\\n    ns.tprintf(\\\"  Money threshold: %s (%f)\\\", ns.nFormat(advancedServer.moneyThreshold, \\\"($0.00a)\\\"), advancedServer.moneyThreshold)\\r\\n    ns.tprintf(\\\"  Max Regrow amount: %s (%f)\\\", ns.nFormat(advancedServer.maxRegrowAmount, \\\"($0.00a)\\\"), advancedServer.maxRegrowAmount)\\r\\n    ns.tprintf(\\\"  Growth rate: %d\\\", server.serverGrowth)\\r\\n    ns.tprintf(\\\"  Security min: %d\\\", server.minDifficulty)\\r\\n    ns.tprintf(\\\"  Security: %d\\\", server.hackDifficulty)\\r\\n    ns.tprintf(\\\"  Security threshold: %d\\\", advancedServer.securityThreshold)\\r\\n    ns.tprintf(\\\"  Weaken threads: %f\\\", advancedServer.weakenThreads)\\r\\n    ns.tprintf(\\\"  Grow threads: %f\\\", advancedServer.growThreads)\\r\\n    ns.tprintf(\\\"  Hack threads: %f\\\", advancedServer.hackThreads)\\r\\n    ns.tprintf(\\\"  Score: %s\\\", ns.nFormat(advancedServer.score, '0.00e+0'))\\r\\n    ns.tprintf(\\\"  TimeScore: %s/s\\\", ns.nFormat(advancedServer.timeScore, \\\"($0.00a)\\\"))\\r\\n}\\r\\n\\r\\n\",\"filename\":\"/scripts/analyze-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///9a8b37f0-dd00-4f89-8858-40a4c40312b7\",\"moduleSequenceNumber\":10589},{\"filename\":\"/scripts/analyze-server.js\",\"url\":\"blob:file:///d654e717-e11d-42d7-bed5-84a86b0350cc\",\"moduleSequenceNumber\":10590}],\"dependents\":[],\"ramUsage\":7.55,\"server\":\"home\",\"moduleSequenceNumber\":319,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { threadsAvailable } from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var threadSize = 0.15 + 1.6\\r\\n    let systemThreads = threadsAvailable(ns, threadSize, false)\\r\\n    let idleThreads = threadsAvailable(ns, threadSize, true)\\r\\n    ns.tprintf(\\\"==> Attack threads: %d (idle); %d (available)\\\", idleThreads, systemThreads)\\r\\n}\",\"filename\":\"/scripts/threads-available.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///7926943b-ab6d-44a3-a32e-f40ab4132812\",\"moduleSequenceNumber\":114289},{\"filename\":\"/scripts/threads-available.js\",\"url\":\"blob:file:///e72c6ba0-9b70-4980-8126-0fe4f12b53f5\",\"moduleSequenceNumber\":114290}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home\",\"moduleSequenceNumber\":320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d2c82fa8-7afa-43c0-ad9c-3c821ec4cab0\",\"moduleSequenceNumber\":677}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///0630e64b-47b9-44f9-95fa-98fca62710f3\",\"moduleSequenceNumber\":679}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///6eef7624-7600-4253-8ab8-14f636f3479a\",\"moduleSequenceNumber\":672}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":672,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    applyFilter,\\r\\n    filter_adminRights,\\r\\n    filter_minRamAvailable,\\r\\n    getAllServers,\\r\\n    performAttack,\\r\\n    getGrowAttack,\\r\\n    getWeakenAttack,\\r\\n    getHackAttack,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const targetName = ns.args[0]\\r\\n    const growAttack = getGrowAttack(ns)\\r\\n    const weakenAttack = getWeakenAttack(ns)\\r\\n    const hackAttack = getHackAttack(ns)\\r\\n    await ns.sleep(10000)\\r\\n\\r\\n    while (true) {\\r\\n        let target = ns.getServer(targetName)\\r\\n        let attackers = getAttackers(ns)\\r\\n\\r\\n        if (Object.keys(attackers).length <= 0) {\\r\\n            ns.print(\\\"No attackers available, sleeping 10 seconds before retrying\\\")\\r\\n            await ns.sleep(10000)\\r\\n            continue\\r\\n        }\\r\\n\\r\\n        if (target.hackDifficulty > target.securityThreshold) {\\r\\n            await ns.sleep(performAttack(ns, weakenAttack, target, attackers))\\r\\n        } else if (target.moneyAvailable < target.moneyThreshold) {\\r\\n            await ns.sleep(performAttack(ns, growAttack, target, attackers))\\r\\n        } else {\\r\\n            await ns.sleep(performAttack(ns, hackAttack, target, attackers))\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nexport function getAttackers(ns) {\\r\\n    var hasAdminFilter = filter_adminRights(true)\\r\\n    // 1.6G base script size + 0.15G (weaken/grow)\\r\\n    // hack() requires 0.1G so it works everywhere where weaken/grow works\\r\\n    var ramFilter = filter_minRamAvailable(ns.getScriptRam(\\\"/payload/weaken-only.js\\\"))\\r\\n    return applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n}\\r\\n\\r\\n\",\"filename\":\"/scripts/single-target-scheduler.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///e34114a3-4a42-4b8a-9301-6dd5dd6934c8\",\"moduleSequenceNumber\":27714},{\"filename\":\"/scripts/single-target-scheduler.js\",\"url\":\"blob:file:///48284b6f-e9df-4c95-ba95-d2ec4a215546\",\"moduleSequenceNumber\":27715}],\"dependents\":[],\"ramUsage\":8.95,\"server\":\"home\",\"moduleSequenceNumber\":324,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    buyServers,\\r\\n    upgradeServers,\\r\\n    buyHacknetNodes,\\r\\n    upgradeHacknetNodes,\\r\\n    getHacknetRamUpgrade,\\r\\n    getHacknetCoreUpgrade,\\r\\n    getHacknetLevelUpgrade,\\r\\n    schedule,\\r\\n    getServersByRam,\\r\\n    maxServerUpgrade,\\r\\n    bulkServerUpgrade,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var count = Infinity\\r\\n    if (ns.args.length > 0) {\\r\\n        count = parseInt(ns.args[0])\\r\\n    }\\r\\n\\r\\n    var completed = []\\r\\n    // with the ability to set a money limit with\\r\\n    // the money-limit.js script, there is no need\\r\\n    // to limit the size of our compute nodes here\\r\\n    var serverRamLimit = ns.getPurchasedServerMaxRam()\\r\\n    var hacknetNodeLimit = 8\\r\\n    var hacknetRamUpgrade = getHacknetRamUpgrade(ns, hacknetNodeLimit)\\r\\n    var doHacknet = false\\r\\n    var expected = doHacknet ? 6 : 2\\r\\n    var hacknetCoreUpgrade = getHacknetCoreUpgrade(ns, hacknetNodeLimit)\\r\\n    var hacknetLevelUpgrade = getHacknetLevelUpgrade(ns, hacknetNodeLimit)\\r\\n\\r\\n    ns.disableLog(\\\"disableLog\\\")\\r\\n    var markCompleted = (name) => {\\r\\n        if (!completed.includes(name)) {\\r\\n            completed.push(name)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    while ((completed.length < expected) && (count > 0)) {\\r\\n        let maxUpgrade = maxServerUpgrade(ns) > serverRamLimit ? serverRamLimit : maxServerUpgrade(ns)\\r\\n        let serversByRam = getServersByRam(ns)\\r\\n        let serverCount = ns.getPurchasedServers().length\\r\\n        let largestServer = serverCount > 0 ? Object.keys(serversByRam).sort()[0] : 0\\r\\n\\r\\n        ns.printf(\\\"MaxUpgrade: %d; largest Server: %d\\\", maxUpgrade, largestServer)\\r\\n        if ((maxUpgrade > 4) && (maxUpgrade > largestServer)) {\\r\\n            if (await bulkServerUpgrade(ns, maxUpgrade) && maxUpgrade >= serverRamLimit) {\\r\\n                markCompleted(\\\"buyServers\\\")\\r\\n                markCompleted(\\\"upgradeServers\\\")\\r\\n            }\\r\\n\\r\\n        } else {\\r\\n            if (await buyServers(ns)) {\\r\\n                markCompleted(\\\"buyServers\\\")\\r\\n            }\\r\\n            if (await upgradeServers(ns, serverRamLimit)) {\\r\\n                markCompleted(\\\"upgradeServers\\\")\\r\\n            }\\r\\n        }\\r\\n        // only start upgrading hacknet when we at least have\\r\\n        // a basic set of purchased servers\\r\\n        if (completed.includes(\\\"buyServers\\\") && doHacknet) {\\r\\n            if (buyHacknetNodes(ns, hacknetNodeLimit)) {\\r\\n                markCompleted(\\\"buyHacknetNodes\\\")\\r\\n            }\\r\\n            if (await upgradeHacknetNodes(ns, hacknetRamUpgrade)) {\\r\\n                markCompleted(\\\"buyHacknetRam\\\")\\r\\n            }\\r\\n            if (await upgradeHacknetNodes(ns, hacknetCoreUpgrade)) {\\r\\n                markCompleted(\\\"buyHacknetCores\\\")\\r\\n            }\\r\\n            if (await upgradeHacknetNodes(ns, hacknetLevelUpgrade)) {\\r\\n                markCompleted(\\\"buyHacknetLevel\\\")\\r\\n            }\\r\\n        }\\r\\n        if (!await schedule(ns, \\\"/scripts/backdoor-worm.js\\\")) {\\r\\n            ns.print(\\\"Failed to execute backdoor-worm\\\")\\r\\n        }\\r\\n        count--\\r\\n        if (count > 0) {\\r\\n            await ns.sleep(10000)\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/setup-upgrade-infra.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///df4eb17a-ec32-41b8-be95-5abf3bb03753\",\"moduleSequenceNumber\":243},{\"filename\":\"/scripts/setup-upgrade-infra.js\",\"url\":\"blob:file:///95aa3d9e-701d-4c21-88a2-f434fd65c5dc\",\"moduleSequenceNumber\":1737}],\"dependents\":[],\"ramUsage\":21.3,\"server\":\"home\",\"moduleSequenceNumber\":325,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    filter_adminRights,\\r\\n    filter_minRamAvailable,\\r\\n    getAllServers,\\r\\n    applyFilter,\\r\\n    ramAvail,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var script = \\\"/payload/share.js\\\"\\r\\n    var scriptRam = ns.getScriptRam(script)\\r\\n    var hasAdminFilter = filter_adminRights(true)\\r\\n    var ramFilter = filter_minRamAvailable(scriptRam)\\r\\n    var targets = getAllServers(ns)\\r\\n    targets = applyFilter(targets, [hasAdminFilter, ramFilter], false, false)\\r\\n    for (const t in targets) {\\r\\n        // we don't ever want to use home to boost faction gain as the compute\\r\\n        // power there is way to valuable for that. Given a large enough size\\r\\n        // later in the game, most attacks are executed from home, so we can use\\r\\n        // all other compute power for sharing.\\r\\n        if (targets[t].hostname == \\\"home\\\") {\\r\\n            continue\\r\\n        }\\r\\n        let serverThreads = Math.floor(ramAvail(targets[t]) / scriptRam)\\r\\n        if (ns.exec(script, t, serverThreads) == 0) {\\r\\n            ns.tprintf(\\\"Failed to share() on '%s' with %d threads\\\", t, serverThreads)\\r\\n        }\\r\\n    }\\r\\n    await ns.sleep(2000)\\r\\n    ns.tprintf(\\\"Share power: %f\\\", ns.getSharePower())\\r\\n}\",\"filename\":\"/scripts/boost-faction-reputation.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///c9fa377f-8efe-4acc-ab92-889cf3703648\",\"moduleSequenceNumber\":51742},{\"filename\":\"/scripts/boost-faction-reputation.js\",\"url\":\"blob:file:///f63c3263-3ae7-453e-a520-ac2682b9ae62\",\"moduleSequenceNumber\":55701}],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"home\",\"moduleSequenceNumber\":326,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getSharePower\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { schedule } from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    if (!await schedule(ns, ...ns.args)) {\\r\\n        ns.print(\\\"Failed to execute '%s'\\\", ns.args[0])\\r\\n    }\\r\\n}\",\"filename\":\"run.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.55,\"server\":\"home\",\"moduleSequenceNumber\":327,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/share.js\",\"url\":\"blob:file:///a20ca803-efea-4f7b-a4a4-973c7fafd698\",\"moduleSequenceNumber\":6260}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    filter_hostname,\\r\\n    filter_playerServer,\\r\\n    getAllServers,\\r\\n    applyFilter,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var known = []\\r\\n    var nameFilter = filter_hostname(ns, \\\"darkweb|home\\\")\\r\\n    var playerServerFilter = filter_playerServer(true)\\r\\n    var targets = getAllServers(ns)\\r\\n    targets = applyFilter(targets, [nameFilter, playerServerFilter])\\r\\n\\r\\n\\r\\n    for (const t in targets) {\\r\\n        let result = []\\r\\n        for (const f of ns.ls(t)) {\\r\\n            if (f.startsWith(\\\"/payload/\\\") || f.startsWith(\\\"/lib/\\\") || f.startsWith(\\\"/scripts/\\\") || f.startsWith(\\\"/scratch/\\\")) {\\r\\n                continue\\r\\n            }\\r\\n            if (!known.includes(f)) {\\r\\n                result.push(f)\\r\\n                known.push(f)\\r\\n            }\\r\\n        }\\r\\n        if (result.length > 0) {\\r\\n            ns.tprintf(\\\"%s:\\\", t)\\r\\n            for (const f of result) {\\r\\n                ns.tprintf(\\\"  %s\\\", f)\\r\\n                if (f.endsWith(\\\".lit\\\")) {\\r\\n                    await ns.scp(f, \\\"home\\\", t)\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/find-files.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///eb0a39a2-2c7b-45b9-b992-8caaa11f548a\",\"moduleSequenceNumber\":136926},{\"filename\":\"/scripts/find-files.js\",\"url\":\"blob:file:///c750a4a9-9a84-448e-a5f8-716975578a18\",\"moduleSequenceNumber\":147666}],\"dependents\":[],\"ramUsage\":8.35,\"server\":\"home\",\"moduleSequenceNumber\":329,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    applyFilter,\\r\\n    filter_adminRights,\\r\\n    filter_minRamAvailable,\\r\\n    getAllServers,\\r\\n    performAttack,\\r\\n    getGrowAttack,\\r\\n    getWeakenAttack,\\r\\n    getHackAttack,\\r\\n    getTargetAddPort,\\r\\n    getTargetRemovePort,\\r\\n    threadsAvailable,\\r\\n    sortObjectBy,\\r\\n    sortByKey,\\r\\n    getAdditionalServerInfo,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var targets = [...ns.args]\\r\\n    const growAttack = getGrowAttack(ns)\\r\\n    const weakenAttack = getWeakenAttack(ns)\\r\\n    const hackAttack = getHackAttack(ns)\\r\\n    ns.disableLog(\\\"disableLog\\\")\\r\\n    ns.disableLog(\\\"sleep\\\")\\r\\n\\r\\n    // If there is an already running instance of the scheduler\\r\\n    // just add the parameters as targets and exit. Bitburner\\r\\n    // itself prevents multiple instances of the same script running\\r\\n    // with the same parameters\\r\\n    if (isRunning(ns)) {\\r\\n        let addPort = getTargetAddPort(ns)\\r\\n        for (const t of targets) {\\r\\n            while (!addPort.tryWrite(t)) {\\r\\n                await ns.sleep(1000)\\r\\n            }\\r\\n        }\\r\\n        return\\r\\n    }\\r\\n\\r\\n    var procs = {}\\r\\n    var startDate = new Date()\\r\\n    while (true) {\\r\\n        let schedulables = getSchedulables(targets, procs)\\r\\n        for (const targetName of schedulables) {\\r\\n            let target = getAdditionalServerInfo(ns, ns.getServer(targetName))\\r\\n            let attackers = getAttackers(ns)\\r\\n\\r\\n            // no attackers available, skip this scheduling cycle\\r\\n            if (Object.keys(attackers).length <= 0) {\\r\\n                continue\\r\\n            }\\r\\n\\r\\n            var nextAttack = hackAttack\\r\\n            if (target.hackDifficulty > target.securityThreshold) {\\r\\n                nextAttack = weakenAttack\\r\\n            } else if (target.moneyAvailable < target.moneyThreshold) {\\r\\n                nextAttack = growAttack\\r\\n            }\\r\\n            var state = performAttack(ns, nextAttack, target, attackers)\\r\\n            procs[targetName] = state\\r\\n        }\\r\\n        printState(ns, procs, targets)\\r\\n        let waitResult = await wait(ns, procs, startDate)\\r\\n        procs = waitResult[\\\"procs\\\"]\\r\\n        startDate = waitResult[\\\"startDate\\\"]\\r\\n        targets = updateTargets(ns, targets)\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getAttackers(ns) {\\r\\n    var hasAdminFilter = filter_adminRights(true)\\r\\n    // 1.6G base script size + 0.15G (weaken/grow)\\r\\n    // hack() requires 0.1G so it works everywhere where weaken/grow works\\r\\n    var ramFilter = filter_minRamAvailable(ns.getScriptRam(\\\"/payload/weaken-only.js\\\"))\\r\\n    return applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n}\\r\\n\\r\\nfunction getSchedulables(targets, procs) {\\r\\n    var schedulables = []\\r\\n    var running = Object.keys(procs)\\r\\n    for (const t of targets) {\\r\\n        if (!running.includes(t)) {\\r\\n            schedulables.push(t)\\r\\n        }\\r\\n    }\\r\\n    return schedulables\\r\\n}\\r\\n\\r\\nasync function wait(ns, procs, startDate = new Date()) {\\r\\n    var newProcs = {}\\r\\n    await ns.sleep(200)\\r\\n    var newStartDate = new Date()\\r\\n    var endDate = new Date()\\r\\n    var iterationTime = endDate.getTime() - startDate.getTime()\\r\\n    ns.printf(\\\"Schedule iteration took %s ms\\\", iterationTime)\\r\\n    for (const proc in procs) {\\r\\n        let newWaitTime = procs[proc][\\\"waitTime\\\"] - iterationTime\\r\\n        let pids = procs[proc][\\\"pids\\\"]\\r\\n        let newPids = [...pids].filter((p) => ns.isRunning(p))\\r\\n        if (newPids.length < 1) {\\r\\n            continue\\r\\n        }\\r\\n        newProcs[proc] = procs[proc]\\r\\n        newProcs[proc][\\\"pids\\\"] = newPids\\r\\n        newProcs[proc][\\\"waitTime\\\"] = newWaitTime\\r\\n    }\\r\\n    return {\\r\\n        \\\"procs\\\": newProcs,\\r\\n        \\\"startDate\\\": newStartDate,\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction updateTargets(ns, current) {\\r\\n    var newTargets = [...current]\\r\\n    var addPort = getTargetAddPort(ns)\\r\\n    var removePort = getTargetRemovePort(ns)\\r\\n\\r\\n    while (!addPort.empty()) {\\r\\n        let data = addPort.read()\\r\\n        // Just a safety precaution as I have no idea\\r\\n        // how race-condition safe the port interface is.\\r\\n        // As in \\\"if empty() returns false, is it guaranteed to\\r\\n        // stay non empty in the current function?\\\"\\r\\n        // Also do not add targets that are already present\\r\\n        if ((data != \\\"NULL PORT DATA\\\") && (!newTargets.includes(data))) {\\r\\n            if (!ns.serverExists(data)) {\\r\\n                ns.printf(\\\"Failed to add new target, server does not exist: %s\\\", data)\\r\\n            }\\r\\n            newTargets.push(data)\\r\\n        }\\r\\n    }\\r\\n    while (!removePort.empty()) {\\r\\n        let data = removePort.read()\\r\\n        // See comment above\\r\\n        if (data != \\\"NULL PORT DATA\\\") {\\r\\n            newTargets = newTargets.filter((v) => v != data)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return newTargets\\r\\n}\\r\\n\\r\\nfunction printState(ns, procs, targets) {\\r\\n    var procNames = [...Object.keys(procs)].sort()\\r\\n    var sortedProcs = sortObjectBy(procs, sortByKey(\\\"waitTime\\\"))\\r\\n    if (sortedProcs.length > 0) {\\r\\n        ns.print(\\\"Running attacks:\\\")\\r\\n        for (const proc of sortedProcs) {\\r\\n            ns.printf(\\\"  %20s: %6s (s: %3d / %3d; t: %6d; rt: %6d; wt: %8s)\\\",\\r\\n                proc[\\\"target\\\"],\\r\\n                proc[\\\"operation\\\"],\\r\\n                proc[\\\"pids\\\"].length,\\r\\n                proc[\\\"serverCount\\\"],\\r\\n                proc[\\\"attackThreads\\\"],\\r\\n                proc[\\\"requiredThreads\\\"],\\r\\n                ns.nFormat(proc[\\\"waitTime\\\"] / 1000, \\\"00:00:00\\\"),\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n    var idleTargets = []\\r\\n    for (const t of targets) {\\r\\n        if (!procNames.includes(t)) {\\r\\n            idleTargets.push(t)\\r\\n        }\\r\\n    }\\r\\n    if (idleTargets.length > 0) {\\r\\n        ns.print(\\\"Idle targets:\\\")\\r\\n        for (const t of idleTargets) {\\r\\n            ns.printf(\\\"  %s\\\", t)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let maxAttackScriptSize = ns.getScriptRam(\\\"/payload/weaken-only.js\\\")\\r\\n    let systemThreads = threadsAvailable(ns, maxAttackScriptSize, false)\\r\\n    let idleThreads = threadsAvailable(ns, maxAttackScriptSize, true)\\r\\n    ns.printf(\\\"System threads: %d (idle); %d (available)\\\", idleThreads, systemThreads)\\r\\n}\\r\\n\\r\\nfunction isRunning(ns) {\\r\\n    var myself = ns.getScriptName()\\r\\n    var count = 0\\r\\n    for (const proc of ns.ps()) {\\r\\n        if (proc.filename == myself) {\\r\\n            count++\\r\\n        }\\r\\n        if (count > 1) {\\r\\n            return true\\r\\n        }\\r\\n    }\\r\\n    return false\\r\\n}\",\"filename\":\"/scripts/multi-target-scheduler.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///01d31c34-37ad-4011-bd61-f4aae8210f3d\",\"moduleSequenceNumber\":318},{\"filename\":\"/scripts/multi-target-scheduler.js\",\"url\":\"blob:file:///dda5e2ca-8429-4d49-8e12-aa0c9f22781c\",\"moduleSequenceNumber\":631}],\"dependents\":[],\"ramUsage\":9.35,\"server\":\"home\",\"moduleSequenceNumber\":631,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    getTargetAddPort,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var targets = ns.args\\r\\n    var addPort = getTargetAddPort(ns)\\r\\n    for (const t of targets) {\\r\\n        if (!ns.serverExists(t)) {\\r\\n            ns.tprintf(\\\"Server does not exist: %s\\\", t)\\r\\n        }\\r\\n        while (!addPort.tryWrite(t)) {\\r\\n            await ns.sleep(1000)\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/add-targets.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///249ca91b-829e-4fea-97b9-5af3d1469f56\",\"moduleSequenceNumber\":243},{\"filename\":\"/scripts/add-targets.js\",\"url\":\"blob:file:///58c2cbb3-c04d-4b69-8ca8-6e1af16487e5\",\"moduleSequenceNumber\":70606}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":331,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    getTargetRemovePort,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var targets = ns.args\\r\\n    var removePort = getTargetRemovePort(ns)\\r\\n    for (const t of targets) {\\r\\n        while (!removePort.tryWrite(t)) {\\r\\n            await ns.sleep(1000)\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/remove-targets.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///d438e185-6d65-4f79-9ad0-7d1c0053cc74\",\"moduleSequenceNumber\":243},{\"filename\":\"/scripts/remove-targets.js\",\"url\":\"blob:file:///a39c1c7d-223b-4248-ba70-ff5cd4f30f3a\",\"moduleSequenceNumber\":774}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":332,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    setMoneyLimit,\\r\\n    getMoneyLimit,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args.length < 1) {\\r\\n        ns.tprintf(\\\"Current money limit: %d\\\", getMoneyLimit(ns))\\r\\n        return\\r\\n    }\\r\\n    setMoneyLimit(ns, ns.args[0])\\r\\n    ns.tprintf(\\\"New money limit: %d\\\", getMoneyLimit(ns))\\r\\n}\\r\\n\",\"filename\":\"/scripts/money-limit.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///38f37ecb-2dcb-43cc-aa01-659b0c27cd7b\",\"moduleSequenceNumber\":4401},{\"filename\":\"/scripts/money-limit.js\",\"url\":\"blob:file:///74a582ff-9db2-4fd5-94ea-61f71843b326\",\"moduleSequenceNumber\":4565}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":333,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    getAllServers,\\r\\n    applyFilter,\\r\\n    filter_hackingSkill,\\r\\n    filter_minMaxMoney,\\r\\n    filter_adminRights,\\r\\n    sortObjectBy,\\r\\n    //sortByFunctionValue,\\r\\n    sortByKey,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    // can be used to add specialized sort functions \\r\\n    // if necessary, but most information should be\\r\\n    // already injected in the server object by getAdditionalServerInfo()\\r\\n    // during the getAllServers() call\\r\\n    var sortTypes = {\\r\\n        // \\\"weakenTime\\\": sortByFunctionValue(ns.getWeakenTime),\\r\\n        // \\\"growTime\\\": sortByFunctionValue(ns.getGrowTime),\\r\\n        // \\\"hackTime\\\": sortByFunctionValue(ns.getHackTime),\\r\\n    }\\r\\n\\r\\n    var sortType = \\\"moneyMax\\\"\\r\\n    if (ns.args.length > 0) {\\r\\n        sortType = ns.args[0]\\r\\n    }\\r\\n    var output = \\\"\\\"\\r\\n    if (ns.args.length > 1) {\\r\\n        output = ns.args[1]\\r\\n    }\\r\\n    var sortFunc = sortByKey(sortType)\\r\\n    if (Object.keys(sortTypes).includes(sortType)) {\\r\\n        sortFunc = sortTypes[sortType]\\r\\n    }\\r\\n\\r\\n    var skillFilter = filter_hackingSkill(ns.getHackingLevel())\\r\\n    var maxMoneyFilter = filter_minMaxMoney(1)\\r\\n    var hasAdminFilter = filter_adminRights(false)\\r\\n    var servers = applyFilter(getAllServers(ns), [skillFilter, hasAdminFilter])\\r\\n    servers = applyFilter(servers, [maxMoneyFilter], false)\\r\\n\\r\\n    for (const server of sortObjectBy(servers, sortFunc)) {\\r\\n        if (output != \\\"\\\") {\\r\\n            ns.tprintf(\\\"%s\\\", server[output])\\r\\n            continue\\r\\n        }\\r\\n        ns.tprintf(\\r\\n            \\\"%20s: sc: %8s; tsc: %8s; m: %8s; gr: %4d; sm: %3d; wt: %8s; gt: %8s; ht: %8s\\\",\\r\\n            server.hostname,\\r\\n            ns.nFormat(server.score, '0.00e+0'),\\r\\n            ns.nFormat(server.timeScore, \\\"($0.00a)\\\"),\\r\\n            ns.nFormat(server.moneyMax, \\\"($0.00a)\\\"),\\r\\n            server.serverGrowth,\\r\\n            server.minDifficulty,\\r\\n            ns.nFormat(server.weakenTime / 1000, \\\"00:00:00\\\"),\\r\\n            ns.nFormat(server.growTime / 1000, \\\"00:00:00\\\"),\\r\\n            ns.nFormat(server.hackTime / 1000, \\\"00:00:00\\\"),\\r\\n        )\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/compare-servers.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///c32710a7-8677-41f0-91cd-9f55eff52925\",\"moduleSequenceNumber\":243},{\"filename\":\"/scripts/compare-servers.js\",\"url\":\"blob:file:///11aab0c8-b413-4590-b87e-4711a466ce0c\",\"moduleSequenceNumber\":1736}],\"dependents\":[],\"ramUsage\":7.6,\"server\":\"home\",\"moduleSequenceNumber\":334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var base = 8\\r\\n    var ram = base\\r\\n    while (ram <= ns.getPurchasedServerMaxRam()) {\\r\\n        ns.tprintf(\\r\\n            \\\"%9s: %8s (%8s)\\\",\\r\\n            ns.nFormat(ram * 1024 * 1024 * 1024, \\\"0.00ib\\\"),\\r\\n            ns.nFormat(ns.getPurchasedServerCost(ram), \\\"($0.00a)\\\"),\\r\\n            ns.nFormat(ns.getPurchasedServerCost(ram) * ns.getPurchasedServerLimit(), \\\"($0.00a)\\\")\\r\\n        )\\r\\n        ram = ram * 2\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/server-upgrade-costs.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/server-upgrade-costs.js\",\"url\":\"blob:file:///c3defe59-1d41-46de-a49d-cde19ae6239f\",\"moduleSequenceNumber\":162202}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    getAllServers,\\r\\n    applyFilter,\\r\\n    filter_hackingSkill,\\r\\n    filter_minMaxMoney,\\r\\n    filter_adminRights,\\r\\n    getTargetAddPort,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var skillFilter = filter_hackingSkill(ns.getHackingLevel())\\r\\n    var maxMoneyFilter = filter_minMaxMoney(1)\\r\\n    var hasAdminFilter = filter_adminRights(false)\\r\\n    var servers = applyFilter(getAllServers(ns), [skillFilter, hasAdminFilter])\\r\\n    servers = applyFilter(servers, [maxMoneyFilter], false)\\r\\n\\r\\n    var addPort = getTargetAddPort(ns)\\r\\n    for (const t of Object.keys(servers)) {\\r\\n        ns.tprintf(\\\"Adding %s as target\\\", t)\\r\\n        while (!addPort.tryWrite(t)) {\\r\\n            await ns.sleep(1000)\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/add-all-targets.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///6447344c-3bd0-45be-8e7c-cf94e4576416\",\"moduleSequenceNumber\":318},{\"filename\":\"/scripts/add-all-targets.js\",\"url\":\"blob:file:///3023e083-9225-4f8b-a6eb-5bce0897fa0c\",\"moduleSequenceNumber\":22730}],\"dependents\":[],\"ramUsage\":7.6,\"server\":\"home\",\"moduleSequenceNumber\":22730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    portOpener,\\r\\n    threadsAvailable,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    const hackScheduler = \\\"/scripts/multi-target-scheduler.js\\\"\\r\\n    ns.exec(\\\"/scripts/backdoor-worm.js\\\", \\\"home\\\")\\r\\n    if (!ns.scriptRunning(hackScheduler, \\\"home\\\")) {\\r\\n        ns.tail(ns.exec(hackScheduler, \\\"home\\\"))\\r\\n    }\\r\\n\\r\\n    var portOpenerSeen = portOpener(ns).length\\r\\n    while (true) {\\r\\n        var currentPortOpener = portOpener(ns).length\\r\\n        if (currentPortOpener > portOpenerSeen) {\\r\\n            ns.exec(\\\"/scripts/backdoor-worm.js\\\", \\\"home\\\")\\r\\n            portOpenerSeen = currentPortOpener\\r\\n        }\\r\\n\\r\\n        var player = ns.getPlayer()\\r\\n        var sleeveCount = ns.sleeve.getNumSleeves()\\r\\n        var threadsAvail = threadsAvailable(ns, 1.75, false)\\r\\n        if (sleeveCount >= 1) {\\r\\n            for (var id = 0; id < sleeveCount; id++) {\\r\\n                var sleeve = ns.sleeve.getSleeveStats(id)\\r\\n                var task = ns.sleeve.getTask(id)\\r\\n                if ((sleeve.shock > 0) && (task.type != \\\"RECOVERY\\\")) {\\r\\n                    ns.sleeve.setToShockRecovery(id)\\r\\n                    continue\\r\\n                }\\r\\n                if ((sleeve.sync < 100) && (task.type != \\\"SYNCHRO\\\")) {\\r\\n                    ns.sleeve.setToSynchronize(id)\\r\\n                }\\r\\n            }\\r\\n            if ((player.skills.hacking < 10) && (ns.sleeve.getSleeveStats(0).sync >= 100)) {\\r\\n                if (!ns.sleeve.setToUniversityCourse(0, \\\"Rothman University\\\", \\\"Study Computer Science\\\")) {\\r\\n                    ns.print(\\\"Failed to send sleeve 0 to study computer science at Rothman University\\\")\\r\\n                }\\r\\n            }\\r\\n            if ((player.skills.hacking >= 10) && (player.factions.includes(\\\"Tian Di Hui\\\")) && (ns.sleeve.getSleeveStats(0).sync >= 100)) {\\r\\n                if (!ns.sleeve.setToFactionWork(0, \\\"Tian Di Hui\\\", \\\"Hacking Contracts\\\")) {\\r\\n                    ns.print(\\\"Failed to send sleeve 0 to do hacking contracts for Tian Di Hui\\\")\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        var stages = {\\r\\n            0: [\\\"joesguns\\\"],\\r\\n            1500: [\\\"sigma-cosmetics\\\"],\\r\\n            3000: [\\\"harakiri-sushi\\\", \\\"max-hardware\\\", \\\"zer0\\\"],\\r\\n            6000: [\\\"phantasy\\\", \\\"iron-gym\\\"],\\r\\n            15000: [\\\"omega-net\\\", \\\"silver-helix\\\"],\\r\\n            25000: [\\\"nectar-net\\\", \\\"hong-fang-tea\\\", \\\"neo-net\\\"],\\r\\n            40000: [\\\"computek\\\", \\\"netlink\\\", \\\"catalyst\\\", \\\"summit-uni\\\"],\\r\\n            70000: [\\\"rho-construction\\\", \\\"the-hub\\\", \\\"alpha-ent\\\", \\\"snap-fitness\\\", \\\"lexo-corp\\\"]\\r\\n        }\\r\\n        for (const stage of Object.keys(stages)) {\\r\\n            if (threadsAvail >= stage) {\\r\\n                for (const name of stages[stage]) {\\r\\n                    var server = ns.getServer(name)\\r\\n                    if (server.hasAdminRights && (server.hackDifficulty <= player.skills.hacking)) {\\r\\n                        addTarget(ns, name)\\r\\n                        await ns.sleep(100)\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (threadsAvail >= 100000 && (player.skills.hacking > 2200)) {\\r\\n            ns.exec(\\\"/scripts/add-all-targets.js\\\", \\\"home\\\")\\r\\n            return\\r\\n        }\\r\\n        await ns.sleep(2000)\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction addTarget(ns, ...names) {\\r\\n    ns.exec(\\\"/scripts/add-targets.js\\\", \\\"home\\\", 1, ...names)\\r\\n}\",\"filename\":\"/scripts/startup.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///a3f4c5cf-0717-4297-8e73-7885009e00ce\",\"moduleSequenceNumber\":1978},{\"filename\":\"/scripts/startup.js\",\"url\":\"blob:file:///471303a5-5b01-41b9-9d02-d7e1267230fa\",\"moduleSequenceNumber\":2001}],\"dependents\":[],\"ramUsage\":34.95,\"server\":\"home\",\"moduleSequenceNumber\":337,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getSleeveStats\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getTask\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToShockRecovery\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToSynchronize\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToUniversityCourse\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToFactionWork\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    findServer\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\nexport async function main(ns) {\\r\\n    var names = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\", \\\"fulcrumassets\\\", \\\"w0r1d_d43m0n\\\"]\\r\\n    if (ns.args.length > 0) {\\r\\n        names = ns.args\\r\\n    }\\r\\n    for (const name of names) {\\r\\n        ns.tprintf(\\\"%s\\\", findServer(ns, name))\\r\\n    }\\r\\n}\\r\\n\\r\\n\",\"filename\":\"/scripts/find-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///2c19ad6c-9029-40ed-907b-8f0f703de4bf\",\"moduleSequenceNumber\":243},{\"filename\":\"/scripts/find-server.js\",\"url\":\"blob:file:///9155e603-e00c-4b89-80da-53b087202d69\",\"moduleSequenceNumber\":1015}],\"dependents\":[],\"ramUsage\":7.55,\"server\":\"home\",\"moduleSequenceNumber\":338,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar multipliers = ns.getBitNodeMultipliers()\\r\\n\\tfor (const key in multipliers) {\\r\\n\\t\\tif (multipliers[key] != 1) {\\r\\n\\t\\t\\tns.tprintf(\\\"%27s: %s\\\", key, multipliers[key])\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"filename\":\"/scripts/bitnode-details.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/bitnode-details.js\",\"url\":\"blob:file:///af4b5d30-bd00-4505-880e-d59a14180e24\",\"moduleSequenceNumber\":3593}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":339,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    applyFilter,\\r\\n    filter_adminRights,\\r\\n    filter_minRamAvailable,\\r\\n    getAllServers,\\r\\n    threadsAvailable,\\r\\n    getHackAttack,\\r\\n    sortObjectBy,\\r\\n    sortByKey,\\r\\n    getAdditionalServerInfo,\\r\\n    ramAvail,\\r\\n} from \\\"lib/utils.js\\\";\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var targets = [\\\"darkweb\\\"]\\r\\n    const hackAttack = getHackAttack(ns)\\r\\n    ns.disableLog(\\\"disableLog\\\")\\r\\n    ns.disableLog(\\\"sleep\\\")\\r\\n\\r\\n    // If there is an already running instance of the scheduler\\r\\n    // just add the parameters as targets and exit. Bitburner\\r\\n    // itself prevents multiple instances of the same script running\\r\\n    // with the same parameters\\r\\n    if (isRunning(ns)) {\\r\\n        return\\r\\n    }\\r\\n\\r\\n    var procs = {}\\r\\n    var startDate = new Date()\\r\\n    while (true) {\\r\\n        let schedulables = getSchedulables(targets, procs)\\r\\n        for (const targetName of schedulables) {\\r\\n            let target = getAdditionalServerInfo(ns, ns.getServer(targetName))\\r\\n            let attackers = getAttackers(ns)\\r\\n\\r\\n            // no attackers available, skip this scheduling cycle\\r\\n            if (Object.keys(attackers).length <= 0) {\\r\\n                continue\\r\\n            }\\r\\n\\r\\n            var nextAttack = hackAttack\\r\\n            var state = performUnboundAttack(ns, nextAttack, target, attackers)\\r\\n            procs[targetName] = state\\r\\n        }\\r\\n        printState(ns, procs, targets)\\r\\n        let waitResult = await wait(ns, procs, startDate)\\r\\n        procs = waitResult[\\\"procs\\\"]\\r\\n        startDate = waitResult[\\\"startDate\\\"]\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getAttackers(ns) {\\r\\n    var hasAdminFilter = filter_adminRights(true)\\r\\n    // 1.6G base script size + 0.15G (weaken/grow)\\r\\n    // hack() requires 0.1G so it works everywhere where weaken/grow works\\r\\n    var ramFilter = filter_minRamAvailable(ns.getScriptRam(\\\"/payload/hack-only.js\\\"))\\r\\n    return applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n}\\r\\n\\r\\nfunction getSchedulables(targets, procs) {\\r\\n    var schedulables = []\\r\\n    var running = Object.keys(procs)\\r\\n    for (const t of targets) {\\r\\n        if (!running.includes(t)) {\\r\\n            schedulables.push(t)\\r\\n        }\\r\\n    }\\r\\n    return schedulables\\r\\n}\\r\\n\\r\\nasync function wait(ns, procs, startDate = new Date()) {\\r\\n    var newProcs = {}\\r\\n    await ns.sleep(200)\\r\\n    var newStartDate = new Date()\\r\\n    var endDate = new Date()\\r\\n    var iterationTime = endDate.getTime() - startDate.getTime()\\r\\n    ns.printf(\\\"Schedule iteration took %s ms\\\", iterationTime)\\r\\n    for (const proc in procs) {\\r\\n        let newWaitTime = procs[proc][\\\"waitTime\\\"] - iterationTime\\r\\n        let pids = procs[proc][\\\"pids\\\"]\\r\\n        let newPids = [...pids].filter((p) => ns.isRunning(p))\\r\\n        if (newPids.length < 1) {\\r\\n            continue\\r\\n        }\\r\\n        newProcs[proc] = procs[proc]\\r\\n        newProcs[proc][\\\"pids\\\"] = newPids\\r\\n        newProcs[proc][\\\"waitTime\\\"] = newWaitTime\\r\\n    }\\r\\n    return {\\r\\n        \\\"procs\\\": newProcs,\\r\\n        \\\"startDate\\\": newStartDate,\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction printState(ns, procs, targets) {\\r\\n    var procNames = [...Object.keys(procs)].sort()\\r\\n    var sortedProcs = sortObjectBy(procs, sortByKey(\\\"waitTime\\\"))\\r\\n    if (sortedProcs.length > 0) {\\r\\n        ns.print(\\\"Running attacks:\\\")\\r\\n        for (const proc of sortedProcs) {\\r\\n            ns.printf(\\\"  %20s: %6s (s: %3d / %3d; t: %6d; rt: %6d; wt: %8s)\\\",\\r\\n                proc[\\\"target\\\"].hostname,\\r\\n                proc[\\\"type\\\"],\\r\\n                proc[\\\"pids\\\"].length,\\r\\n                proc[\\\"serverCount\\\"],\\r\\n                proc[\\\"attackThreads\\\"],\\r\\n                proc[\\\"requiredThreads\\\"],\\r\\n                ns.nFormat(proc[\\\"waitTime\\\"] / 1000, \\\"00:00:00\\\"),\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n    var idleTargets = []\\r\\n    for (const t of targets) {\\r\\n        if (!procNames.includes(t)) {\\r\\n            idleTargets.push(t)\\r\\n        }\\r\\n    }\\r\\n    if (idleTargets.length > 0) {\\r\\n        ns.print(\\\"Idle targets:\\\")\\r\\n        for (const t of idleTargets) {\\r\\n            ns.printf(\\\"  %s\\\", t)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let maxAttackScriptSize = ns.getScriptRam(\\\"/payload/hack-only.js\\\")\\r\\n    let systemThreads = threadsAvailable(ns, maxAttackScriptSize, false)\\r\\n    let idleThreads = threadsAvailable(ns, maxAttackScriptSize, true)\\r\\n    ns.printf(\\\"System threads: %d (idle); %d (available)\\\", idleThreads, systemThreads)\\r\\n}\\r\\n\\r\\nfunction isRunning(ns) {\\r\\n    var myself = ns.getScriptName()\\r\\n    var count = 0\\r\\n    for (const proc of ns.ps()) {\\r\\n        if (proc.filename == myself) {\\r\\n            count++\\r\\n        }\\r\\n        if (count > 1) {\\r\\n            return true\\r\\n        }\\r\\n    }\\r\\n    return false\\r\\n}\\r\\n\\r\\nfunction performUnboundAttack(ns, attack, target, attackers) {\\r\\n    var waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n    var attackThreads = 0\\r\\n    var serverCount = 0\\r\\n    var scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n    ns.disableLog(\\\"exec\\\")\\r\\n    var pids = []\\r\\n    // this sorts the servers according to the amount of threads required by\\r\\n    // a single core system (assuming that all attackable systems are single core)...\\r\\n    var servers = Object.values(attackers)\\r\\n    // ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n    // this with the most suitable attacker\\r\\n    var requiredThreads = threadsAvailable(ns, 1.7, true)\\r\\n    var threadCount = requiredThreads\\r\\n    if (threadCount <= 0) {\\r\\n        ns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n        return {\\r\\n            \\\"waitTime\\\": 0,\\r\\n            \\\"requiredThreads\\\": requiredThreads,\\r\\n            \\\"attackThreads\\\": 0,\\r\\n            \\\"operation\\\": attack[\\\"type\\\"],\\r\\n            \\\"serverCount\\\": 0,\\r\\n            \\\"pids\\\": [],\\r\\n            \\\"target\\\": target.hostname,\\r\\n        }\\r\\n    }\\r\\n    for (const server of servers) {\\r\\n        let serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n        if (serverThreads > threadCount) {\\r\\n            serverThreads = threadCount\\r\\n        }\\r\\n        let pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n        if (pid == 0) {\\r\\n            ns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n            continue\\r\\n        }\\r\\n        pids.push(pid)\\r\\n        threadCount = threadCount - serverThreads\\r\\n        attackThreads = attackThreads + serverThreads\\r\\n        serverCount++\\r\\n        if (threadCount <= 0) {\\r\\n            break\\r\\n        }\\r\\n    }\\r\\n    return {\\r\\n        \\\"waitTime\\\": waitTime,\\r\\n        \\\"requiredThreads\\\": requiredThreads,\\r\\n        \\\"attackThreads\\\": attackThreads,\\r\\n        \\\"operation\\\": attack[\\\"type\\\"],\\r\\n        \\\"serverCount\\\": serverCount,\\r\\n        \\\"pids\\\": pids,\\r\\n        \\\"target\\\": target.hostname,\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"/scratch/exp-farm.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/utils.js\",\"url\":\"blob:file:///8c436446-d865-4b1e-8dcb-56f26abdeb28\",\"moduleSequenceNumber\":53028},{\"filename\":\"/scratch/exp-farm.js\",\"url\":\"blob:file:///42716f10-a1ea-40c3-b446-424dc768f130\",\"moduleSequenceNumber\":55877}],\"dependents\":[],\"ramUsage\":9.25,\"server\":\"home\",\"moduleSequenceNumber\":340,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-8192\",\"pserv-8192-0\",\"pserv-8192-1\",\"pserv-8192-2\",\"pserv-8192-3\",\"pserv-8192-4\",\"pserv-8192-5\",\"pserv-8192-6\",\"pserv-8192-7\",\"pserv-8192-8\",\"pserv-8192-9\",\"pserv-8192-10\",\"pserv-8192-11\",\"pserv-8192-12\",\"pserv-8192-13\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"V2_0_0_API_BREAK.txt\",\"text\":\"This file contains the list of potential API break. A pattern was used to look through all your files and note the spots where you might have a problem. Not everything here is broken./ns\\\\.scp/g\\nscp arguments were switch, it is now scp(files, destination, optionally_source). If you were using 2 argument (not 3) this doesn't affect you.\\n\\n\\t/lib/utils.js\\n\\t\\tLine 230 await ns.scp(files, \\\"home\\\", name)\\n\\t\\tLine 481 await ns.scp(\\\"/lib/utils.js\\\", \\\"home\\\", target)\\n\\t\\tLine 482 await ns.scp(script, \\\"home\\\", target)\\n\\t/scripts/find-files.js\\n\\t\\tLine 33 await ns.scp(f, t, \\\"home\\\")\\n\\n\\n/ns.installBackdoor/g\\nns.installBackdoor was moved to ns.singularity.installBackdoor\\n\\n\\t/scripts/backdoor-worm.js\\n\\t\\tLine 50 //     await ns.installBackdoor(target.hostname)\\n\\n\\n/hacking/g\\nThe work system is completely reworked and ns.getPlayer().hacking no longer exists. This data is likely available inside ns.getPlayer().currentWork, skills, exp, or hp\\n\\n\\t/lib/utils.js\\n\\t\\tLine 69 export function filter_hackingSkill(level) {\\n\\t/scripts/compare-servers.js\\n\\t\\tLine 1 import { getAllServers, applyFilter, filter_hackingSkill, filter_minMaxMoney, filter_adminRights, sortObjectsBy } from \\\"lib/utils.js\\\";\\n\\t\\tLine 9 var skillFilter = filter_hackingSkill(ns.getHackingLevel())\\n\\n\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"85.6.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":35.187999999999995,\"minDifficulty\":33,\"moneyAvailable\":1105437354750,\"moneyMax\":1105437354750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1149,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-718606.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[117,154,179,195,156,11,83,70,51,141,79,163,185,86,84,56,92,92,177,102,31,189,47,17,182,146,165,7,149,180,44,95,92,70,51,79,83,133,165,125,22,37,55,197],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-915391-FulcrumTechnologies.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[4,9],[20,24],[18,20],[8,17],[16,21],[2,3],[3,7],[10,15]],\"reward\":{\"name\":\"Fulcrum Technologies\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-391856.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":604316072,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"59.3.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":35.075999999999986,\"minDifficulty\":33,\"moneyAvailable\":163456884383,\"moneyMax\":1463019598975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1303,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"52.7.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":26.631999999999998,\"minDifficulty\":26,\"moneyAvailable\":42625583989,\"moneyMax\":453213365250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":989,\"serverGrowth\":65}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-817084.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":977206380,\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-529528-OmniTekIncorporated.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"719513339\",\"reward\":{\"name\":\"OmniTek Incorporated\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"28.8.2.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"blade\",\"moduleSequenceNumber\":341,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":343,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":344,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"blade\",\"moduleSequenceNumber\":345,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\".\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":32.199999999999996,\"minDifficulty\":31,\"moneyAvailable\":15557542379,\"moneyMax\":366762117875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":981,\"serverGrowth\":60}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-607330-FourSigma.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[11,[[0,7],[6,7],[5,7],[0,4],[7,9],[2,3],[1,2],[3,9],[2,5],[4,9],[2,9],[4,10],[3,8],[3,10],[1,4],[2,10],[7,8],[1,7],[0,3]]],\"reward\":{\"name\":\"Four Sigma\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"86.8.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":99,\"hackDifficulty\":33,\"minDifficulty\":33,\"moneyAvailable\":514903800000,\"moneyMax\":514903800000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1237,\"serverGrowth\":92}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-264178-KuaiGongInternational.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"1000100000010001\",\"reward\":{\"name\":\"KuaiGong International\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"63.4.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":19.916000000000004,\"minDifficulty\":17,\"moneyAvailable\":10428153299,\"moneyMax\":403338052450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1142,\"serverGrowth\":48}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"69.0.5.4\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":347,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///24e7edcb-a467-40da-91eb-b7d8ca0d93f3\",\"moduleSequenceNumber\":7250}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///927fff1f-d264-482e-8f53-a3138154061c\",\"moduleSequenceNumber\":8520}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"omnitek\",\"moduleSequenceNumber\":350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"helios\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":37.191999999999986,\"minDifficulty\":32,\"moneyAvailable\":545995183025,\"moneyMax\":545995183025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1091,\"serverGrowth\":95}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-653204.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,8,0,0,2,0,5,0,0,2,0,10,8,10,3,9,2,6,1,3,1,0,3,6],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"61.4.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":24.811999999999998,\"minDifficulty\":21,\"moneyAvailable\":31063232513,\"moneyMax\":454593493275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":953,\"serverGrowth\":85}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-388800-TheDarkArmy.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[61,31,143,68,187,52],\"reward\":{\"name\":\"The Dark Army\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"36.3.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":35.28799999999999,\"minDifficulty\":32,\"moneyAvailable\":69049468056,\"moneyMax\":642737744200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1222,\"serverGrowth\":98}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"21.9.7.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":351,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///20957a30-e807-47bb-bf96-57babb9985b4\",\"moduleSequenceNumber\":17355}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///b26709bc-868e-4311-94a0-e90b4a5c1e74\",\"moduleSequenceNumber\":72815}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":354,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":33.236,\"minDifficulty\":32,\"moneyAvailable\":35575641200,\"moneyMax\":35575641200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1121,\"serverGrowth\":95}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-376709-TheBlackHand.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"jjeeeeeeeeeeeeWRQQsssssssmmTkkYYhhhhhhhhYY44kMMMMMMMMMMMottHNK77Fyyqqqqqqq\",\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"43.4.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":99,\"hackDifficulty\":82.676,\"minDifficulty\":33,\"moneyAvailable\":25000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1332,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"88.0.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":30,\"minDifficulty\":30,\"moneyAvailable\":29977881175,\"moneyMax\":29977881175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":988,\"serverGrowth\":91}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-54506.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"746761789536\",31],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"71.5.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":37.66,\"minDifficulty\":32,\"moneyAvailable\":20591519950,\"moneyMax\":20591519950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":883,\"serverGrowth\":53}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-966566-NWO.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[6,[190,171,124,144,194,77,185,90,181,92,12,66,164,12,116,86,121,96,104,28,186,173,39]],\"reward\":{\"name\":\"NWO\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-588041.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[9,[[0,7],[0,5],[1,8],[3,7],[3,8],[4,5],[2,6],[0,2],[0,3],[3,6],[4,7],[1,6],[2,4]]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"58.3.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":31.861999999999995,\"minDifficulty\":29,\"moneyAvailable\":538391936,\"moneyMax\":18420383200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":891,\"serverGrowth\":71}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-609672-TheSyndicate.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":619007322,\"reward\":{\"name\":\"The Syndicate\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"54.1.6.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"helios\",\"moduleSequenceNumber\":356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":357,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"helios\",\"moduleSequenceNumber\":360,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\"kuai-gong\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":34.66199999999999,\"minDifficulty\":29,\"moneyAvailable\":16373097175,\"moneyMax\":16373097175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":895,\"serverGrowth\":70}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-363550-FulcrumTechnologies.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":531916602,\"reward\":{\"name\":\"Fulcrum Technologies\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-715351.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"MEDIA SHELL MOUSE PRINT FRAME\",24],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"5.0.7.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":361,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":362,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":363,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":364,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"vitalife\",\"moduleSequenceNumber\":365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":30.714,\"minDifficulty\":29,\"moneyAvailable\":195301262,\"moneyMax\":18110618150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":869,\"serverGrowth\":70}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"81.4.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":33.967999999999996,\"minDifficulty\":29,\"moneyAvailable\":23179301650,\"moneyMax\":23179301650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":855,\"serverGrowth\":92}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"98.3.0.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":366,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":367,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///a00077f6-e3ab-4d92-91eb-c10eb75c3941\",\"moduleSequenceNumber\":17354}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":368,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///c5350457-b277-4d2b-b588-5fdb75114b9d\",\"moduleSequenceNumber\":72814}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":369,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"univ-energy\",\"moduleSequenceNumber\":370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":35.139999999999986,\"minDifficulty\":30,\"moneyAvailable\":28642342775,\"moneyMax\":28642342775,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":851,\"serverGrowth\":83}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-718372.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[10,[[4,5],[1,9],[3,4],[7,8],[6,9],[0,9],[5,7],[4,8],[6,7]]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-940678-ECorp.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":419,\"reward\":{\"name\":\"ECorp\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"6.1.9.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":371,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":373,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":374,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"titan-labs\",\"moduleSequenceNumber\":375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":27.475999999999992,\"minDifficulty\":24,\"moneyAvailable\":21015313250,\"moneyMax\":21015313250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":860,\"serverGrowth\":75}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-66750.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":87358491557460450,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"35.6.5.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"microdyne\",\"moduleSequenceNumber\":380,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zb-def\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":25.055999999999997,\"minDifficulty\":23,\"moneyAvailable\":791743226,\"moneyMax\":13496420575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":812,\"serverGrowth\":70}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-107331-TheDarkArmy.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[13,22,109,147,18,155,154,168,29,35,79,117,34,73,13,123,80,23,67,180,118,14,4,54,116,168,111,13],\"reward\":{\"name\":\"The Dark Army\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-183129-NWO.cct\",\"type\":\"Array Jumping Game II\",\"data\":[1,0,1,2,1,2,0,5,6,5,3,3,3,1,3,4],\"reward\":{\"name\":\"NWO\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"81.2.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":25.014,\"minDifficulty\":25,\"moneyAvailable\":1328459023,\"moneyMax\":20819096875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":875,\"serverGrowth\":74}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-77344.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-3,10,-5,5,7,3,10,-10,-7,2,-9,-8,4,-5,10,-6,9,-3,9,5,-1,6,0,4,-4,-5,9,5,8,-8],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-956400-BladeIndustries.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"2194527020\",21],\"reward\":{\"name\":\"Blade Industries\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"74.3.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":26.205999999999996,\"minDifficulty\":21,\"moneyAvailable\":19768870025,\"moneyMax\":19768870025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":848,\"serverGrowth\":84}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-481912-NWO.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"ARRAY FLASH CACHE INBOX LOGIN\",19],\"reward\":{\"name\":\"NWO\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"65.7.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":29.105999999999998,\"minDifficulty\":27,\"moneyAvailable\":25172207350,\"moneyMax\":25172207350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":871,\"serverGrowth\":58}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-656580.cct\",\"type\":\"Array Jumping Game II\",\"data\":[5,6,1,1,2,2,5,5,3,4,1,0,5,4,4],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"65.9.2.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"omnia\",\"moduleSequenceNumber\":381,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":382,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":383,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"omnia\",\"moduleSequenceNumber\":385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":35.065999999999995,\"minDifficulty\":30,\"moneyAvailable\":23478108575,\"moneyMax\":23478108575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":938,\"serverGrowth\":60}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-621429.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1203663107\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-645404.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[11,[[6,9],[7,10],[0,10],[1,7],[0,6],[3,9],[3,8],[5,7],[6,8],[6,7],[0,10],[0,1]]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"15.8.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":23.712,\"minDifficulty\":20,\"moneyAvailable\":964223671,\"moneyMax\":23280027825,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":808,\"serverGrowth\":71}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-292524-FulcrumTechnologies.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"ARRAY FRAME TRASH VIRUS EMAIL\",7],\"reward\":{\"name\":\"Fulcrum Technologies\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"32.9.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":21.014,\"minDifficulty\":21,\"moneyAvailable\":209352620,\"moneyMax\":18343350425,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":849,\"serverGrowth\":71}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"15.7.2.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"solaris\",\"moduleSequenceNumber\":386,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":387,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"solaris\",\"moduleSequenceNumber\":390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":27.047999999999995,\"minDifficulty\":23,\"moneyAvailable\":1798761770,\"moneyMax\":20820132600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":843,\"serverGrowth\":78}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-508475-SpeakersfortheDead.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[24,38],[30,49],[6,22],[50,4],[15,41],[6,16],[4,17],[5,5]],\"reward\":{\"name\":\"Speakers for the Dead\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"61.0.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":31.709999999999997,\"minDifficulty\":27,\"moneyAvailable\":662595555,\"moneyMax\":35573093275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":801,\"serverGrowth\":61}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"77.4.4.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":392,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":394,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"global-pharm\",\"moduleSequenceNumber\":395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"rho-construction\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":30.931999999999995,\"minDifficulty\":28,\"moneyAvailable\":43030043525,\"moneyMax\":43030043525,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":830,\"serverGrowth\":83}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-64299-Volhaven.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,1,0,1,0,1,0,0,1],[0,1,0,0,1,0,0,0,0,0],[0,0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,1,0],[0,0,1,0,0,0,0,0,1,0],[0,0,1,0,1,0,0,0,0,0]],\"reward\":{\"name\":\"Volhaven\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"57.0.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":23.648,\"minDifficulty\":23,\"moneyAvailable\":1148914895,\"moneyMax\":28941786575,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":798,\"serverGrowth\":79}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-390398.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[7,73,51,149,60,84,83,155,90,63,137,40,195,86,168,181,148,167,172,19,133,105,81,7,62,1],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"60.0.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":28,\"minDifficulty\":28,\"moneyAvailable\":34367367725,\"moneyMax\":34367367725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":800,\"serverGrowth\":71}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-119911-FulcrumTechnologies.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[169,114,64,72,5,182,6,157,129,23,31,6,68],\"reward\":{\"name\":\"Fulcrum Technologies\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"3.6.6.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":396,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":397,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":399,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"unitalife\",\"moduleSequenceNumber\":400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"global-pharm\",\"icarus\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":26.681999999999995,\"minDifficulty\":23,\"moneyAvailable\":2036510553,\"moneyMax\":26189040675,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":797,\"serverGrowth\":76}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"42.3.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":401,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":402,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":403,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":404,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":405,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":23.014,\"minDifficulty\":23,\"moneyAvailable\":384307420,\"moneyMax\":18713075850,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":677,\"serverGrowth\":62}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-372918.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,1,1,0,0,0],[0,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[0,0,0,1,1,0,0,0,0,1,0],[0,0,0,0,0,1,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,0,0,0,1,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"15.3.6.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":406,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":407,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///f5850592-172c-46b4-8902-118afa4c10a5\",\"moduleSequenceNumber\":17358}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":408,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":409,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"rho-construction\",\"moduleSequenceNumber\":410,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zb-institute\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":17.468,\"minDifficulty\":17,\"moneyAvailable\":14841397025,\"moneyMax\":14841397025,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":518,\"serverGrowth\":58}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"18.1.7.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":411,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":412,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":413,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":414,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":415,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"aerocorp\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":62,\"hackDifficulty\":22.872000000000007,\"minDifficulty\":21,\"moneyAvailable\":2572103220,\"moneyMax\":17224691850,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":556,\"serverGrowth\":59}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"98.2.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":417,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":418,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":419,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"aevum-police\",\"moduleSequenceNumber\":420,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"catalyst\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":30.679999999999996,\"minDifficulty\":25,\"moneyAvailable\":8542945550,\"moneyMax\":8542945550,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":426,\"serverGrowth\":36}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-511318-NWO.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[118,194,119,12,91,187,143,196,1,107,195,47,44,48,122],\"reward\":{\"name\":\"NWO\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"95.3.9.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":421,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":422,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":423,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":424,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":425,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"netlink\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":21.62,\"minDifficulty\":16,\"moneyAvailable\":4477084675,\"moneyMax\":4477084675,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":415,\"serverGrowth\":40}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-755312-SpeakersfortheDead.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"14716722765\",\"reward\":{\"name\":\"Speakers for the Dead\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"1.5.9.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":427,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":428,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":429,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zb-institute\",\"moduleSequenceNumber\":430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"computek\",\"lexo-corp\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":31.483999999999995,\"minDifficulty\":27,\"moneyAvailable\":2970671161,\"moneyMax\":22355008875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":733,\"serverGrowth\":85}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-629123-NWO.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"9mRkzjePKg6615671V565WSTYj773Tv3819JHLq5c56F633yPC913WFA82\",\"reward\":{\"name\":\"NWO\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"25.6.1.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":431,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///b65a770f-e3ea-48a9-bef2-93cc3e7f414a\",\"moduleSequenceNumber\":28699}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///73d1fc17-f3be-468b-8453-f456a155b8d7\",\"moduleSequenceNumber\":17356}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"summit-uni\",\"moduleSequenceNumber\":435,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":22.904,\"minDifficulty\":19,\"moneyAvailable\":7665274800,\"moneyMax\":7665274800,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":449,\"serverGrowth\":43}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"38.3.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":27.733999999999995,\"minDifficulty\":23,\"moneyAvailable\":888806067,\"moneyMax\":11957988100,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":605,\"serverGrowth\":66}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-245964.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"11001100110000101010100001011101\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"5.4.7.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":436,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///58a75816-62d1-4ea4-8806-860d4004c350\",\"moduleSequenceNumber\":8522}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":437,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///f469e2b7-a93e-4452-a594-95a662e98311\",\"moduleSequenceNumber\":17353}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":438,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///23d31ae5-dde9-4a4a-a47c-2ade4a609484\",\"moduleSequenceNumber\":39729}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":439,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"catalyst\",\"moduleSequenceNumber\":440,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":23.184,\"minDifficulty\":21,\"moneyAvailable\":1123658358,\"moneyMax\":7894797900,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":424,\"serverGrowth\":39}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-866060.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"327052\",4],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"84.5.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":441,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":443,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":444,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"the-hub\",\"moduleSequenceNumber\":445,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37,\"hackDifficulty\":16.01,\"minDifficulty\":12,\"moneyAvailable\":4365215750,\"moneyMax\":4365215750,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":309,\"serverGrowth\":51}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"26.9.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":19.535999999999998,\"minDifficulty\":18,\"moneyAvailable\":553968753,\"moneyMax\":6021666375,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":308,\"serverGrowth\":58}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-638582.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[62,35,147,161,67,91,81,7,66,52,40,47,72,108,161,24,174,143,38,40,188,86,195,135,16,188,75,50,83,175,106,133,189,12,55,7,33,121],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"30.7.3.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"netlink\",\"moduleSequenceNumber\":446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///0534efc7-3c09-4244-887a-b7a4378c57b0\",\"moduleSequenceNumber\":8521}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":447,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///9bb7a810-6bbd-4363-8003-04d14f03f041\",\"moduleSequenceNumber\":17352}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":448,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///b4dfe6fe-853f-4c91-93bd-545066fc73a4\",\"moduleSequenceNumber\":39728}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":449,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"netlink\",\"moduleSequenceNumber\":450,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":26,\"minDifficulty\":26,\"moneyAvailable\":6875000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":418,\"serverGrowth\":48}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-722193.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[165,[2,3,4,5,6,7,9,10]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"61.4.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":16.012,\"minDifficulty\":16,\"moneyAvailable\":89804202,\"moneyMax\":1887986400,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":254,\"serverGrowth\":47}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-558675.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[60,38,144,185,138,16,36,33,141,51,7,93,13,87,172,9,186,169,67,79,166,197,161,80,158,186,148,81,106,27,194,94,179,171,33,79,1,139,197,181,194,54,181,148,193,19,145],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-544576-FulcrumTechnologies.cct\",\"type\":\"Array Jumping Game\",\"data\":[9,2,0,1,2,8,4,9,10,0,8,0,0,10],\"reward\":{\"name\":\"Fulcrum Technologies\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"97.1.9.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":451,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":452,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":453,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":454,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"n00dles\",\"moduleSequenceNumber\":455,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.1980000000000002,\"minDifficulty\":1,\"moneyAvailable\":78590,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"29.4.8.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":456,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///055ae2e4-44fd-4a9a-88ca-441023a5249a\",\"moduleSequenceNumber\":67136}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":457,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":8.488,\"minDifficulty\":3,\"moneyAvailable\":50000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"29.6.1.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":461,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///2f671f7e-bdc5-4da4-bde0-48bd98ded9bb\",\"moduleSequenceNumber\":67137}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":462,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":463,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":464,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":465,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":57500000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"33.1.5.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///d9e14474-3a73-4c81-a6c0-0ae6683a7f28\",\"moduleSequenceNumber\":67138}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":467,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"joesguns\",\"moduleSequenceNumber\":470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":8.173999999999998,\"minDifficulty\":5,\"moneyAvailable\":62500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-280374.cct\",\"type\":\"Total Ways to Sum\",\"data\":15,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"15.4.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"zer0\",\"moduleSequenceNumber\":471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///2f440989-1474-4f58-8de0-00738aa35fea\",\"moduleSequenceNumber\":8203}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":473,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zer0\",\"moduleSequenceNumber\":475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":12.126,\"minDifficulty\":8,\"moneyAvailable\":187500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-178576-TianDiHui.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[10,4],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-423011.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"INBOXFRAMEMOUSEFLASHQUEUE\",\"BOOKMARK\"],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"8.7.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///fa8d334d-b815-4a03-bbb4-ff9d54976ad3\",\"moduleSequenceNumber\":76283}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":477,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":479,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":8.915999999999999,\"minDifficulty\":7,\"moneyAvailable\":68750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-764432-FulcrumTechnologies.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"953869\",23],\"reward\":{\"name\":\"Fulcrum Technologies\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-885910.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,1,0,0,1,0,0],[0,0,0,0,0,1,0],[0,0,0,1,0,0,0],[0,1,0,0,1,1,0],[1,1,0,1,0,0,0],[1,0,1,1,1,0,0],[0,0,0,1,0,1,0],[0,1,1,0,0,0,1],[0,0,0,0,0,0,0],[1,0,0,0,0,0,0],[0,1,0,1,0,0,0],[0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"26.5.5.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///1d8d0202-4e43-4824-b776-e7c1fba740e6\",\"moduleSequenceNumber\":29646}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"neo-net\",\"moduleSequenceNumber\":485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"CSEC\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":125000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"33.8.9.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///a5cf645c-f83d-4dfc-8a29-f314c2290d86\",\"moduleSequenceNumber\":7884}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":487,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"max-hardware\",\"netlink\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":13.62,\"minDifficulty\":10,\"moneyAvailable\":12596220,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-959881.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[13,[[2,11],[1,11],[3,6],[10,11],[1,8],[10,12],[0,5],[2,5],[1,4],[2,12],[0,8],[8,10],[5,10],[3,10],[2,6],[7,12],[2,8],[0,6],[2,4],[1,9],[1,12],[7,11]]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"64.6.0.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":491,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///ef48ac8a-9f65-4150-940c-95bb23b8a1ed\",\"moduleSequenceNumber\":69975}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":493,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":10.562,\"minDifficulty\":5,\"moneyAvailable\":75000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"80.6.1.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///b9ac8da5-6c5c-40de-80f7-493d99060026\",\"moduleSequenceNumber\":76282}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":6.637999999999999,\"minDifficulty\":5,\"moneyAvailable\":100000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-865264-NWO.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"25224516225\",\"reward\":{\"name\":\"NWO\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-603825.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[8,2],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"46.3.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":501,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///d12d4875-554e-4c4e-99a9-312e7d1ad7ab\",\"moduleSequenceNumber\":29647}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"phantasy\",\"moduleSequenceNumber\":505,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":8.36,\"minDifficulty\":7,\"moneyAvailable\":600000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-719303.cct\",\"type\":\"Total Ways to Sum\",\"data\":93,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"23.3.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":506,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///7d50d44e-2c2b-45a8-8341-c7d1a5b753e8\",\"moduleSequenceNumber\":7887}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"n00dles\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.4479999999999995,\"minDifficulty\":5,\"moneyAvailable\":23098635,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"93.9.6.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///76978192-fe6b-4120-92c7-379ee50032ed\",\"moduleSequenceNumber\":8204}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"omega-net\",\"moduleSequenceNumber\":515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":31,\"hackDifficulty\":11.491999999999999,\"minDifficulty\":10,\"moneyAvailable\":1675522550,\"moneyMax\":1675522550,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":217,\"serverGrowth\":34}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-952714-FulcrumTechnologies.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(((a((aa()()\",\"reward\":{\"name\":\"Fulcrum Technologies\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"68.7.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":17.268,\"minDifficulty\":15,\"moneyAvailable\":1481836525,\"moneyMax\":1481836525,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":256,\"serverGrowth\":27}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"66.3.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///b83fdf4c-8968-493d-8968-bde23e8a2b8b\",\"moduleSequenceNumber\":7886}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":13.359999999999998,\"minDifficulty\":10,\"moneyAvailable\":84910150,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-266194-NWO.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-1,1,10,7,1,-9,-4,-4,9,-5,-4,-5,7,-4,-3,10,-4,-4],\"reward\":{\"name\":\"NWO\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"12.1.4.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///3de9842e-2361-4f89-b814-9e730ccdd741\",\"moduleSequenceNumber\":17351}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///6537b691-303d-4c47-8f77-aa008159d2c5\",\"moduleSequenceNumber\":7252}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":19.716000000000005,\"minDifficulty\":17,\"moneyAvailable\":691492714,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":509,\"serverGrowth\":40}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-937451.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[4,2],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"34.4.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":58,\"hackDifficulty\":23.24599999999999,\"minDifficulty\":19,\"moneyAvailable\":22500000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1070,\"serverGrowth\":60}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-160952-Daedalus.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"768153247\",9],\"reward\":{\"name\":\"Daedalus\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"27.2.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":20.492000000000004,\"minDifficulty\":17,\"moneyAvailable\":1584469176,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":773,\"serverGrowth\":50}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"88.2.1.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":548,\"serverGrowth\":1}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"5.7.3.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///b44676e7-78b2-400e-9f46-0eebeeb58edd\",\"moduleSequenceNumber\":28700}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":537,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///a453bba1-fd87-4a6b-9b2f-a387d05f44be\",\"moduleSequenceNumber\":17357}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":342,\"serverGrowth\":1}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"78.0.1.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///83e9869b-3e3d-4fe4-ac24-4ce6337db0d9\",\"moduleSequenceNumber\":7885}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"silver-helix\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":207,\"serverGrowth\":1}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-394506-FulcrumTechnologies.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[4,7],\"reward\":{\"name\":\"Fulcrum Technologies\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-359599.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[4],[4,9],[5,4,8],[9,1,9,6],[1,7,6,8,4]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"59.0.7.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\".\",\"moduleSequenceNumber\":546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\".\",\"moduleSequenceNumber\":550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":526,\"serverGrowth\":1}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"57.8.6.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/hack-only.js\",\"url\":\"blob:file:///490614ba-c537-41f8-9ca1-9778f4346603\",\"moduleSequenceNumber\":67139}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"CSEC\",\"moduleSequenceNumber\":555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"neo-net\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":57,\"serverGrowth\":1}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"54.5.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":1}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"13.7.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":1}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"76.2.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192\",\"httpPortOpen\":false,\"ip\":\"33.2.4.8\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"pserv-8192\",\"moduleSequenceNumber\":556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192\",\"moduleSequenceNumber\":557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///067334fd-eb10-4a0e-8e12-5228ca30493d\",\"moduleSequenceNumber\":7244}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192\",\"moduleSequenceNumber\":558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///df4e69ea-9cbe-4ce1-94ce-38e9ea60c8b2\",\"moduleSequenceNumber\":71237}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192\",\"moduleSequenceNumber\":559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-8192\",\"moduleSequenceNumber\":560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192-0\",\"httpPortOpen\":false,\"ip\":\"24.2.3.4\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"pserv-8192-0\",\"moduleSequenceNumber\":561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192-0\",\"moduleSequenceNumber\":562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///da86dd22-b9e2-467e-8a3f-3c9de948a707\",\"moduleSequenceNumber\":7245}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-0\",\"moduleSequenceNumber\":563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///cbcb2e0d-c1d5-4efa-a848-11f185ab93bf\",\"moduleSequenceNumber\":74706}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-0\",\"moduleSequenceNumber\":564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-8192-0\",\"moduleSequenceNumber\":565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192-1\",\"httpPortOpen\":false,\"ip\":\"72.1.9.1\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"pserv-8192-1\",\"moduleSequenceNumber\":566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192-1\",\"moduleSequenceNumber\":567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///99b91b92-e9a0-4f4a-aecd-eae8566ef853\",\"moduleSequenceNumber\":7246}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-1\",\"moduleSequenceNumber\":568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///77b18116-710d-4b0f-b1ac-0d2afc45a2be\",\"moduleSequenceNumber\":71553}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-1\",\"moduleSequenceNumber\":569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-8192-1\",\"moduleSequenceNumber\":570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192-2\",\"httpPortOpen\":false,\"ip\":\"16.4.3.7\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"pserv-8192-2\",\"moduleSequenceNumber\":571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192-2\",\"moduleSequenceNumber\":572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///d881cd57-e7bc-4040-bfe7-a16a242585ce\",\"moduleSequenceNumber\":7247}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-2\",\"moduleSequenceNumber\":573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-2\",\"moduleSequenceNumber\":574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-8192-2\",\"moduleSequenceNumber\":575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192-3\",\"httpPortOpen\":false,\"ip\":\"72.9.6.6\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"pserv-8192-3\",\"moduleSequenceNumber\":576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192-3\",\"moduleSequenceNumber\":577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///3a630517-70d7-498c-8e09-5e56fdc53a9f\",\"moduleSequenceNumber\":7248}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-3\",\"moduleSequenceNumber\":578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-3\",\"moduleSequenceNumber\":579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-8192-3\",\"moduleSequenceNumber\":580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192-4\",\"httpPortOpen\":false,\"ip\":\"66.8.8.1\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"pserv-8192-4\",\"moduleSequenceNumber\":581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192-4\",\"moduleSequenceNumber\":582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///36452221-102d-46ff-a9b8-673c608f658d\",\"moduleSequenceNumber\":7249}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-4\",\"moduleSequenceNumber\":583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///f9297f09-cce9-4200-a9e1-691ed5d551c7\",\"moduleSequenceNumber\":7253}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-4\",\"moduleSequenceNumber\":584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-8192-4\",\"moduleSequenceNumber\":585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192-5\",\"httpPortOpen\":false,\"ip\":\"80.0.8.9\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"pserv-8192-5\",\"moduleSequenceNumber\":586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192-5\",\"moduleSequenceNumber\":587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///99a3a844-e1e4-4ffd-8477-23076b5b5fa1\",\"moduleSequenceNumber\":7251}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-5\",\"moduleSequenceNumber\":588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-5\",\"moduleSequenceNumber\":589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-8192-5\",\"moduleSequenceNumber\":590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192-6\",\"httpPortOpen\":false,\"ip\":\"19.6.8.4\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"pserv-8192-6\",\"moduleSequenceNumber\":591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192-6\",\"moduleSequenceNumber\":592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///e1d3f24d-5ce8-4a18-ae26-d1e8d8528a86\",\"moduleSequenceNumber\":17343}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-6\",\"moduleSequenceNumber\":593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-6\",\"moduleSequenceNumber\":594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-8192-6\",\"moduleSequenceNumber\":595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192-7\",\"httpPortOpen\":false,\"ip\":\"45.0.9.6\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"pserv-8192-7\",\"moduleSequenceNumber\":596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192-7\",\"moduleSequenceNumber\":597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///b32f2ede-3a5e-4900-9929-322aab9d3845\",\"moduleSequenceNumber\":17344}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-7\",\"moduleSequenceNumber\":598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-7\",\"moduleSequenceNumber\":599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-8192-7\",\"moduleSequenceNumber\":600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192-8\",\"httpPortOpen\":false,\"ip\":\"92.9.6.5\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"pserv-8192-8\",\"moduleSequenceNumber\":601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192-8\",\"moduleSequenceNumber\":602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///a13f6890-597b-4ed3-a532-b615980851f8\",\"moduleSequenceNumber\":17345}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-8\",\"moduleSequenceNumber\":603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/weaken-only.js\",\"url\":\"blob:file:///79c66870-d568-48ed-ac11-44c1583200cb\",\"moduleSequenceNumber\":40675}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-8\",\"moduleSequenceNumber\":604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-8192-8\",\"moduleSequenceNumber\":605,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192-9\",\"httpPortOpen\":false,\"ip\":\"84.8.8.6\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"pserv-8192-9\",\"moduleSequenceNumber\":606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192-9\",\"moduleSequenceNumber\":607,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///1ab5fbcb-2afc-4bd0-ad41-2f59b7405380\",\"moduleSequenceNumber\":17346}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-9\",\"moduleSequenceNumber\":608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-9\",\"moduleSequenceNumber\":609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-8192-9\",\"moduleSequenceNumber\":610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192-10\",\"httpPortOpen\":false,\"ip\":\"5.6.7.2\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"pserv-8192-10\",\"moduleSequenceNumber\":611,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192-10\",\"moduleSequenceNumber\":612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///3ecce660-cd55-46ac-9207-b02ea3032fe1\",\"moduleSequenceNumber\":17347}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-10\",\"moduleSequenceNumber\":613,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-10\",\"moduleSequenceNumber\":614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-8192-10\",\"moduleSequenceNumber\":615,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192-11\",\"httpPortOpen\":false,\"ip\":\"3.4.2.2\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"pserv-8192-11\",\"moduleSequenceNumber\":616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192-11\",\"moduleSequenceNumber\":617,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///8707f054-5fd5-4155-a578-90df875cd20b\",\"moduleSequenceNumber\":17348}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-11\",\"moduleSequenceNumber\":618,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-11\",\"moduleSequenceNumber\":619,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-8192-11\",\"moduleSequenceNumber\":620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192-12\",\"httpPortOpen\":false,\"ip\":\"83.2.0.0\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"pserv-8192-12\",\"moduleSequenceNumber\":621,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192-12\",\"moduleSequenceNumber\":622,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///7b72ccce-ff85-420b-b040-c868d9d8e901\",\"moduleSequenceNumber\":17349}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-12\",\"moduleSequenceNumber\":623,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-12\",\"moduleSequenceNumber\":624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-8192-12\",\"moduleSequenceNumber\":625,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8192-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8192-13\",\"httpPortOpen\":false,\"ip\":\"24.9.0.1\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function _getAllServers(ns) {\\r\\n\\t// result is a dict of str => Server\\r\\n\\tvar knownHosts = {}\\r\\n\\r\\n\\t// always start scanning at our \\\"home\\\" server\\r\\n\\tvar entryPoint = \\\"home\\\"\\r\\n\\tvar hostsToScan = [entryPoint]\\r\\n\\r\\n\\t// While we still have hosts eligible to be scanned\\r\\n\\t// iterate over all of them, scan them to get the list\\r\\n\\t// of other hosts they \\\"see\\\", then remove already known\\r\\n\\t// and duplicate hosts. Make the resulting list the new list\\r\\n\\t// of hosts eligible to scan\\r\\n\\tns.disableLog(\\\"scan\\\")\\r\\n\\twhile (hostsToScan.length > 0) {\\r\\n\\t\\tvar scanCandidates = []\\r\\n\\t\\tfor (const host of hostsToScan) {\\r\\n\\t\\t\\tlet server = ns.getServer(host)\\r\\n\\t\\t\\tlet scanResult = ns.scan(host).filter((h) => h != host)\\r\\n\\t\\t\\tknownHosts[host] = { ...server, \\\"children\\\": scanResult }\\r\\n\\t\\t\\tscanCandidates = scanCandidates.concat(scanResult)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// create a new list of scan eligible hosts\\r\\n\\t\\t// by filtering out all already known and duplicate\\r\\n\\t\\t// hosts from the scan candidates\\r\\n\\t\\thostsToScan = []\\r\\n\\t\\tfor (const candidate of scanCandidates) {\\r\\n\\t\\t\\tif (hostsToScan.includes(candidate) || (candidate in knownHosts)) {\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thostsToScan.push(candidate)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn knownHosts\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function getAllServers(ns) {\\r\\n\\tvar servers = _getAllServers(ns)\\r\\n\\tvar result = {}\\r\\n\\tfor (const server in servers) {\\r\\n\\t\\tresult[server] = getAdditionalServerInfo(ns, servers[server])\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport function findServer(ns, name, node = \\\"home\\\", servers = getAllServers(ns), path = [node]) {\\r\\n\\t// found it!\\r\\n\\tif (servers[node].hostname == name) {\\r\\n\\t\\treturn path\\r\\n\\t}\\r\\n\\t// we have been here before\\r\\n\\tif (path.indexOf(node) != (path.length - 1)) {\\r\\n\\t\\treturn []\\r\\n\\t}\\r\\n\\t// search all connected nodes\\r\\n\\t// note: \\\"children\\\" is an additional server attribute that is added to each\\r\\n\\t// server object by the getAllServers() function\\r\\n\\tfor (const next of servers[node].children) {\\r\\n\\t\\tlet result = findServer(ns, name, next, servers, [...path, next])\\r\\n\\t\\tif (result.length > 0) {\\r\\n\\t\\t\\treturn result\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn []\\r\\n}\\r\\n\\r\\nexport function applyFilter(hosts, filter = [], exclude = true, matchAny = true) {\\r\\n\\tvar results = []\\r\\n\\tvar hostnames = Object.keys(hosts)\\r\\n\\tfor (const f of filter) {\\r\\n\\t\\tlet filterResults = hostnames.filter(name => f(hosts[name]))\\r\\n\\t\\tresults.push(filterResults)\\r\\n\\t}\\r\\n\\tvar matcher = intersection\\r\\n\\tif (matchAny) {\\r\\n\\t\\tmatcher = union\\r\\n\\t}\\r\\n\\tvar result = {}\\r\\n\\tvar filtered = matcher(...results)\\r\\n\\tif (exclude) {\\r\\n\\t\\tfiltered = difference(hostnames, filtered)\\r\\n\\t}\\r\\n\\r\\n\\tfor (const name of filtered) {\\r\\n\\t\\tresult[name] = hosts[name]\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport function filter_hostname(regex) {\\r\\n\\tvar re = new RegExp(sprintf(\\\"^%s$\\\", regex))\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn re.test(host.hostname)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_hackingSkill(level) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (level < host.requiredHackingSkill)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_adminRights(adminRightsPresent = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.hasAdminRights == adminRightsPresent)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minRam(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.maxRam >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function ramAvail(host) {\\r\\n\\tlet reserved = 0\\r\\n\\tif (host.hostname == \\\"home\\\") {\\r\\n\\t\\treserved = 32\\r\\n\\t}\\r\\n\\treturn Math.max(host.maxRam - (host.ramUsed + reserved), 0)\\r\\n}\\r\\n\\r\\nexport function filter_minRamAvailable(size) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (ramAvail(host) >= size)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_canNuke(ns = true) {\\r\\n\\tvar po = portOpener(ns)\\r\\n\\tvar maxOpenPortsRequired = po.length\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.numOpenPortsRequired <= maxOpenPortsRequired)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_playerServer(state = true) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.purchasedByPlayer == state)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function filter_minMaxMoney(amount = 1) {\\r\\n\\treturn (function (host) {\\r\\n\\t\\treturn (host.moneyMax >= amount)\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function portOpener(ns) {\\r\\n\\tvar portOpener = []\\r\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.brutessh, \\\"check\\\": (s) => !s.sshPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.ftpcrack, \\\"check\\\": (s) => !s.ftpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.relaysmtp, \\\"check\\\": (s) => !s.smtpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.httpworm, \\\"check\\\": (s) => !s.httpPortOpen })\\r\\n\\t}\\r\\n\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n\\t\\tportOpener.push({ \\\"func\\\": ns.sqlinject, \\\"check\\\": (s) => !s.sqlPortOpen })\\r\\n\\t}\\r\\n\\treturn portOpener\\r\\n}\\r\\n\\r\\nexport function union(...lists) {\\r\\n\\treturn [...(new Set(lists.flat()))]\\r\\n}\\r\\n\\r\\nexport function unique(...lists) {\\r\\n\\treturn lists.flat().filter((v, i, a) => a.indexOf(v) === a.lastIndexOf(v))\\r\\n}\\r\\n\\r\\nexport function intersection(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => l.includes(x))\\r\\n\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function difference(...lists) {\\r\\n\\tvar input = [...lists]\\r\\n\\tvar result = input.shift()\\r\\n\\tfor (const l of input) {\\r\\n\\t\\tresult = result.filter(x => !l.includes(x))\\r\\n\\t}\\r\\n\\treturn [...(new Set(result))]\\r\\n}\\r\\n\\r\\nexport function threadsAvailable(ns, threadSize, onlyFree = true) {\\r\\n\\tvar adminFilter = filter_adminRights(true)\\r\\n\\tvar targets = _getAllServers(ns)\\r\\n\\tvar ramFilter = filter_minRamAvailable(threadSize)\\r\\n\\tif (!onlyFree) {\\r\\n\\t\\tramFilter = filter_minRam(threadSize)\\r\\n\\t}\\r\\n\\ttargets = applyFilter(targets, [adminFilter, ramFilter], false, false)\\r\\n\\r\\n\\tvar threads = 0\\r\\n\\tfor (const name in targets) {\\r\\n\\t\\tlet target = targets[name]\\r\\n\\t\\tlet ram = ramAvail(target)\\r\\n\\t\\tif (!onlyFree) {\\r\\n\\t\\t\\tram = target.maxRam\\r\\n\\t\\t}\\r\\n\\t\\tlet serverThreads = Math.floor(ram / threadSize)\\r\\n\\t\\tthreads = threads + serverThreads\\r\\n\\t}\\r\\n\\treturn threads\\r\\n}\\r\\n\\r\\nexport function getWeakenThreads(ns, server, attacker = server) {\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar targetAmount = Math.max(server.hackDifficulty - server.minDifficulty, 0)\\r\\n\\tvar threadsRequired = Math.ceil(targetAmount / ns.weakenAnalyze(1))\\r\\n\\t// if the provided attacker has enough compute power to perform the full weaken\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(targetAmount / ns.weakenAnalyze(1, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\nexport function getGrowThreads(ns, server, attacker = server) {\\r\\n\\t// 1.75GB is the size of the simplest grow script\\r\\n\\tvar threadsAvail = ramAvail(attacker) / 1.75\\r\\n\\tvar money = server.moneyAvailable\\r\\n\\t// If we made a mistake and fully drained a server, we assume the\\r\\n\\t// we need 1000 threads, which is the same as assuming the server has $1000.\\r\\n\\t// Normally, with a non-drained server the whole setup looks like this:\\r\\n\\t//   threads = growthAnalyze(moneyMax / moneyAvail)\\r\\n\\t//   maxMoney = moneyAvail + (moneyAvail * growPercent(threads))\\r\\n\\t// With a drained server this becomes\\r\\n\\t//   threads = growthAnalyze(moneyMax / threads)\\r\\n\\t//   maxMoney = threads + (threads * formulas.growPercent(threads))\\r\\n\\t// Because for a drained server, grow() assumes $1 for each thread.\\r\\n\\t// As in this case the input of growthAnalyze depends on its output, we cannot use it.\\r\\n\\t// And without \\\"cheating\\\" (i.e. extracting the actual growPercent calculation from the source),\\r\\n\\t// we have no way of reliably calculating the amount of threads needed for \\r\\n\\t// a drained server, so we assume a more or less arbitrary amount.\\r\\n\\tif (money <= 0) {\\r\\n\\t\\treturn 1000\\r\\n\\t}\\r\\n\\tvar growFactor = server.moneyMax / money\\r\\n\\tvar threadsRequired = Math.ceil(ns.growthAnalyze(server.hostname, growFactor))\\r\\n\\t// if the provided attacker has enough compute power to perform the full grow\\r\\n\\t// with one core in one go although it has more than one core, re-calculate the\\r\\n\\t// required amount of threads with the proper amount of cpu cores to optimize\\r\\n\\t// the resource usage\\r\\n\\tif ((threadsAvail >= threadsRequired) && (attacker.cpuCores > 1)) {\\r\\n\\t\\treturn Math.ceil(ns.growthAnalyze(server.hostname, growFactor, attacker.cpuCores))\\r\\n\\t}\\r\\n\\treturn threadsRequired\\r\\n}\\r\\n\\r\\n// returns the amount of threads required to hack 99% of the servers\\r\\n// available money, up to the given max amount.\\r\\n// This can return 0 if even a single thread would hack more than\\r\\n// 99% of the money available on the server (e.g. on a server with max \\r\\n// $100, $2 available and a single hack thread would hack >$1.1 this will\\r\\n// return 0)\\r\\nexport function getHackThreads(ns, server, maxAmount = Infinity) {\\r\\n\\t// Don't ever fully drain a server.\\r\\n\\t// The amount of money created by grow() is based on the\\r\\n\\t// moneyAvailable on the server. If moneyAvailable == 0,\\r\\n\\t// grow() assumes the server has $1 for each thread it is called\\r\\n\\t// with, making it impossible (for my; mayby just complicated for someone else)\\r\\n\\t// to determine the amount of threads required to grow a server to a given amount.\\r\\n\\t// Always reserve 1% of money on the server.\\r\\n\\tvar money = Math.min(maxAmount, server.moneyAvailable - (server.moneyAvailable * 0.01))\\r\\n\\tvar hackThreads = Math.floor(ns.hackAnalyzeThreads(server.hostname, money))\\r\\n\\tif (isFinite(hackThreads)) {\\r\\n\\t\\treturn hackThreads\\r\\n\\t}\\r\\n\\treturn 1\\r\\n}\\r\\n\\r\\nexport async function deployPayload(ns, name) {\\r\\n\\tif (name == \\\"home\\\") {\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tconst files = [\\r\\n\\t\\t\\\"/lib/utils.js\\\",\\r\\n\\t\\t\\\"/payload/hack-only.js\\\",\\r\\n\\t\\t\\\"/payload/grow-only.js\\\",\\r\\n\\t\\t\\\"/payload/weaken-only.js\\\",\\r\\n\\t\\t\\\"/payload/share.js\\\",\\r\\n\\t]\\r\\n\\tawait ns.scp(files, name, \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function hasFormulas(ns) {\\r\\n\\treturn ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function maxRegrowAmount(ns, server, secThreshold, cores = 1) {\\r\\n\\tvar threadsAvail = threadsAvailable(ns, 1.7, false)\\r\\n\\tvar maxAmount = server.moneyMax - server.moneyAvailable\\r\\n\\tif (maxAmount <= 0) {\\r\\n\\t\\tmaxAmount = server.moneyMax\\r\\n\\t}\\r\\n\\tif (!hasFormulas(ns)) {\\r\\n\\t\\treturn maxAmount\\r\\n\\t}\\r\\n\\tvar srv = { ...server }\\r\\n\\tsrv.hackDifficulty = secThreshold\\r\\n\\tvar growPercent = ns.formulas.hacking.growPercent(srv, threadsAvail, ns.getPlayer(), cores)\\r\\n\\tif (growPercent == Infinity) {\\r\\n\\t\\treturn server.moneyMax\\r\\n\\t}\\r\\n\\treturn Math.min(server.moneyMax, (server.moneyAvailable * growPercent) - server.moneyAvailable)\\r\\n}\\r\\n\\r\\nexport function getAdditionalServerInfo(ns, server, attacker = server) {\\r\\n\\tvar name = server.hostname\\r\\n\\tvar moneyThreshold = server.moneyMax * 0.75\\r\\n\\tvar securityThreshold = server.minDifficulty + 5\\r\\n\\tvar maxRegrow = maxRegrowAmount(ns, server, securityThreshold, attacker.cpuCores)\\r\\n\\tvar weakenTime = ns.getWeakenTime(name)\\r\\n\\tvar hackTime = ns.getHackTime(name)\\r\\n\\tvar growTime = ns.getGrowTime(name)\\r\\n\\tvar fakeServer = { ...server }\\r\\n\\tfakeServer.hackDifficulty = securityThreshold\\r\\n\\tif (hasFormulas(ns)) {\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tweakenTime = ns.formulas.hacking.weakenTime(fakeServer, player)\\r\\n\\t\\thackTime = ns.formulas.hacking.hackTime(fakeServer, player)\\r\\n\\t\\tgrowTime = ns.formulas.hacking.growTime(fakeServer, player)\\r\\n\\t}\\r\\n\\tvar score = server.moneyMax / (server.minDifficulty / server.serverGrowth)\\r\\n\\tvar timeScore = server.moneyMax / ((2 * weakenTime + growTime + hackTime) / 1000)\\r\\n\\tvar result = {\\r\\n\\t\\t...server,\\r\\n\\t\\t\\\"moneyThreshold\\\": moneyThreshold,\\r\\n\\t\\t\\\"securityThreshold\\\": securityThreshold,\\r\\n\\t\\t\\\"weakenThreads\\\": getWeakenThreads(ns, server, attacker),\\r\\n\\t\\t\\\"growThreads\\\": getGrowThreads(ns, server, attacker),\\r\\n\\t\\t\\\"hackThreads\\\": getHackThreads(ns, server, maxRegrow),\\r\\n\\t\\t\\\"maxRegrowAmount\\\": maxRegrow,\\r\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\r\\n\\t\\t\\\"hackTime\\\": hackTime,\\r\\n\\t\\t\\\"growTime\\\": growTime,\\r\\n\\t\\t\\\"score\\\": score,\\r\\n\\t\\t\\\"timeScore\\\": timeScore,\\r\\n\\t}\\r\\n\\treturn result\\r\\n}\\r\\n\\r\\nexport async function buyServers(ns) {\\r\\n\\tconst minRam = 64\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", minRam)\\r\\n\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\tlet serverCost = ns.getPurchasedServerCost(minRam)\\r\\n\\twhile (canAfford(ns, serverCost)) {\\r\\n\\t\\tlet name = ns.purchaseServer(prefix, minRam);\\r\\n\\t\\tawait deployPayload(ns, name)\\r\\n\\t\\tif (ns.getPurchasedServers().length >= ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport function getServersByRam(ns) {\\r\\n\\tvar servers = {}\\r\\n\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\tlet ram = ns.getServerMaxRam(name)\\r\\n\\t\\tif (ram in servers) {\\r\\n\\t\\t\\tservers[ram].push(name)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tservers[ram] = [name]\\r\\n\\t}\\r\\n\\treturn servers\\r\\n}\\r\\n\\r\\nexport function maxServerUpgrade(ns) {\\r\\n\\tvar maxUpgrade = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\twhile (!canAfford(ns, maxUpgradeCost) && (maxUpgrade > 4)) {\\r\\n\\t\\tmaxUpgrade = maxUpgrade / 2\\r\\n\\t\\tmaxUpgradeCost = ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(maxUpgrade)\\r\\n\\t}\\r\\n\\treturn maxUpgrade\\r\\n}\\r\\n\\r\\nexport async function bulkServerUpgrade(ns, ramLimit = ns.getPurchasedServerMaxRam()) {\\r\\n\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", ramLimit)\\r\\n\\tif (canAfford(ns, ns.getPurchasedServerLimit() * ns.getPurchasedServerCost(ramLimit))) {\\r\\n\\t\\t// clean up the old stuff\\r\\n\\t\\tfor (const name of ns.getPurchasedServers()) {\\r\\n\\t\\t\\tif (ns.getServer(name).maxRam < ramLimit) {\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twhile (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\r\\n\\t\\t\\tlet newName = ns.purchaseServer(prefix, ramLimit);\\r\\n\\t\\t\\tif (newName == \\\"\\\") {\\r\\n\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeServers(ns, ramLimit = 256) {\\r\\n\\tvar maxServers = ns.getPurchasedServerLimit()\\r\\n\\t// someday\\r\\n\\t// var ramLimit = ns.getPurchasedServerMaxRam()\\r\\n\\t// only start upgrading if we are already at our maximum server count\\r\\n\\tif (ns.getPurchasedServers().length < maxServers) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"getServerMaxRam\\\")\\r\\n\\r\\n\\tvar servers = {}\\r\\n\\twhile (!(ramLimit in servers) || (servers[ramLimit].length < maxServers)) {\\r\\n\\t\\tservers = getServersByRam(ns)\\r\\n\\t\\tlet ramSizes = [...Object.keys(servers)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxRamSize = ramSizes[ramSizes.length - 1]\\r\\n\\t\\tlet targetRamSize = Math.min(maxRamSize * 2, ramLimit)\\r\\n\\t\\tif (servers[maxRamSize].length < maxServers) {\\r\\n\\t\\t\\ttargetRamSize = maxRamSize\\r\\n\\t\\t\\tramSizes.pop()\\r\\n\\t\\t} else if (maxRamSize == ramLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tlet prefix = ns.sprintf(\\\"pserv-%d\\\", targetRamSize)\\r\\n\\t\\tfor (const size of ramSizes) {\\r\\n\\t\\t\\tfor (const name of servers[size]) {\\r\\n\\t\\t\\t\\tlet upgradeCost = ns.getPurchasedServerCost(targetRamSize)\\r\\n\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tns.killall(name, false)\\r\\n\\t\\t\\t\\tns.deleteServer(name)\\r\\n\\t\\t\\t\\tlet newName = ns.purchaseServer(prefix, targetRamSize);\\r\\n\\t\\t\\t\\tawait deployPayload(ns, newName)\\r\\n\\t\\t\\t\\tawait ns.sleep(100)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function isRunning(ns, script, args) {\\r\\n\\tvar procs = ns.ps(\\\"home\\\")\\r\\n\\tfor (const proc of procs) {\\r\\n\\t\\tlet scriptMatch = false\\r\\n\\t\\tlet argsMatch = false\\r\\n\\t\\tif (proc.filename == script) {\\r\\n\\t\\t\\tscriptMatch = true\\r\\n\\t\\t}\\r\\n\\t\\targsMatch = arrayEqual(args, proc.args)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function arrayEqual(a, b) {\\r\\n\\tif (a.length != b.length) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar _a = [...a].sort()\\r\\n\\tvar _b = [...b].sort()\\r\\n\\tfor (var index = 0; index < _a.length; index++) {\\r\\n\\t\\tif (_a[index] != _b[index]) {\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function setMoneyLimit(ns, val) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\tport.write(val)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tport.write(val)\\r\\n\\tport.read()\\r\\n\\treturn\\r\\n}\\r\\n\\r\\nexport function getMoneyLimit(ns) {\\r\\n\\tvar port = getMoneyLimitPort(ns)\\r\\n\\tif (port.empty()) {\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\treturn port.peek()\\r\\n}\\r\\n\\r\\nexport function myMoney(ns) {\\r\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\")\\r\\n\\treturn ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n}\\r\\n\\r\\nexport function canAfford(ns, cost) {\\r\\n\\treturn ((myMoney(ns) - cost) >= getMoneyLimit(ns))\\r\\n}\\r\\n\\r\\nexport function buyHacknetNodes(ns, nodeLimit) {\\r\\n\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\twhile (canAfford(ns, ns.hacknet.getPurchaseNodeCost())) {\\r\\n\\t\\tns.hacknet.purchaseNode()\\r\\n\\t\\tif (ns.hacknet.numNodes() >= nodeLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn false\\r\\n}\\r\\n\\r\\nexport async function upgradeHacknetNodes(ns, upgrade) {\\r\\n\\tvar nodeLimit = upgrade[\\\"nodeLimit\\\"]\\r\\n\\tvar resType = upgrade[\\\"type\\\"]\\r\\n\\tvar resLimit = upgrade[\\\"limit\\\"]\\r\\n\\tvar doUpgrade = upgrade[\\\"upgradeFunc\\\"]\\r\\n\\tvar getCosts = upgrade[\\\"costFunc\\\"]\\r\\n\\tvar curNodes = ns.hacknet.numNodes()\\r\\n\\tif (curNodes < nodeLimit) {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\tvar nodes = {}\\r\\n\\twhile (!(resLimit in nodes) || (nodes[resLimit].length < nodeLimit)) {\\r\\n\\t\\tnodes = {}\\r\\n\\t\\tfor (var i = 0; i < curNodes; i++) {\\r\\n\\t\\t\\tlet res = ns.hacknet.getNodeStats(i)[resType]\\r\\n\\t\\t\\tif (res in nodes) {\\r\\n\\t\\t\\t\\tnodes[res].push(i)\\r\\n\\t\\t\\t\\tcontinue\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnodes[res] = [i]\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet resValues = [...Object.keys(nodes)].sort((a, b) => a - b)\\r\\n\\t\\tlet maxResValue = resValues[resValues.length - 1]\\r\\n\\t\\tlet targetResValue = Math.min(maxResValue + 1, resLimit)\\r\\n\\t\\tif (nodes[maxResValue].length < nodeLimit) {\\r\\n\\t\\t\\ttargetResValue = maxResValue\\r\\n\\t\\t\\tresValues.pop()\\r\\n\\t\\t} else if (maxResValue == resLimit) {\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\t\\tfor (const val of resValues) {\\r\\n\\t\\t\\tfor (const i of nodes[val]) {\\r\\n\\t\\t\\t\\twhile (ns.hacknet.getNodeStats(i)[resType] != targetResValue) {\\r\\n\\t\\t\\t\\t\\tvar upgradeCost = getCosts(i, 1);\\r\\n\\t\\t\\t\\t\\tif (!canAfford(ns, upgradeCost)) {\\r\\n\\t\\t\\t\\t\\t\\t// not enough money to further upgrade, stop here\\r\\n\\t\\t\\t\\t\\t\\treturn false\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdoUpgrade(i, 1);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.sleep(50)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true\\r\\n}\\r\\n\\r\\nexport function getHacknetRamUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 64,\\r\\n\\t\\t\\\"type\\\": \\\"ram\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getRamUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeRam,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetLevelUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 200,\\r\\n\\t\\t\\\"type\\\": \\\"level\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getLevelUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeLevel,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHacknetCoreUpgrade(ns, nodeLimit = 8) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"nodeLimit\\\": nodeLimit,\\r\\n\\t\\t\\\"limit\\\": 16,\\r\\n\\t\\t\\\"type\\\": \\\"cores\\\",\\r\\n\\t\\t\\\"costFunc\\\": ns.hacknet.getCoreUpgradeCost,\\r\\n\\t\\t\\\"upgradeFunc\\\": ns.hacknet.upgradeCore,\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// set shouldThreads to -1 to automatically determine the number of threads\\r\\nexport async function schedule(ns, script, shouldThreads = 1, args = []) {\\r\\n\\tvar threads = parseInt(shouldThreads)\\r\\n\\tif (threads == 0) {\\r\\n\\t\\tns.tprintf(\\\"Failed to schedule '%s': threads must be > 0 or -1, is %d\\\", script, threads)\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tvar threadFactor = threads < 0 ? 1 : threads\\r\\n\\tvar size = ns.getScriptRam(script, \\\"home\\\") * threadFactor\\r\\n\\tvar hasAdminFilter = filter_adminRights(true)\\r\\n\\tvar ramFilter = filter_minRamAvailable(size)\\r\\n\\tvar candidates = applyFilter(getAllServers(ns), [hasAdminFilter, ramFilter], false, false)\\r\\n\\tvar target = \\\"\\\"\\r\\n\\tvar targetRamAvail = -1\\r\\n\\tfor (const name in candidates) {\\r\\n\\t\\tlet candidateRamAvail = ramAvail(candidates[name])\\r\\n\\t\\tif (candidateRamAvail > targetRamAvail) {\\r\\n\\t\\t\\ttarget = name\\r\\n\\t\\t\\ttargetRamAvail = candidateRamAvail\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tif (target == \\\"\\\") {\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\tif (target != \\\"home\\\") {\\r\\n\\t\\tawait ns.scp(\\\"/lib/utils.js\\\", target, \\\"home\\\")\\r\\n\\t\\tawait ns.scp(script, target, \\\"home\\\")\\r\\n\\t}\\r\\n\\tvar maxThreads = Math.floor(targetRamAvail / size)\\r\\n\\tvar execThreads = threads < 0 ? maxThreads : threads\\r\\n\\treturn ns.exec(script, target, execThreads, ...args) != 0\\r\\n}\\r\\n\\r\\nexport function performAttack(ns, attack, target, attackers) {\\r\\n\\tvar requiredThreads = target[attack[\\\"threads\\\"]]\\r\\n\\tvar waitTime = attack[\\\"wait\\\"](target.hostname) + 25\\r\\n\\tvar attackThreads = 0\\r\\n\\tvar serverCount = 0\\r\\n\\tvar scriptRam = ns.getScriptRam(attack[\\\"script\\\"])\\r\\n\\r\\n\\tns.disableLog(\\\"exec\\\")\\r\\n\\tvar pids = []\\r\\n\\t// this sorts the servers according to the amount of threads required by\\r\\n\\t// a single core system (assuming that all attackable systems are single core)...\\r\\n\\tvar servers = sortObjectBy(attackers, sortByComputePower(requiredThreads))\\r\\n\\t// ...lets see if we can reduce the amount of threads required by re-calculating\\r\\n\\t// this with the most suitable attacker\\r\\n\\trequiredThreads = getAdditionalServerInfo(ns, target, servers[0])[attack[\\\"threads\\\"]]\\r\\n\\tvar threadCount = requiredThreads\\r\\n\\tif (threadCount <= 0) {\\r\\n\\t\\tns.tprintf(\\\"Zero thread count for attack: t: %s; a: %s\\\", target.hostname, attack[\\\"type\\\"])\\r\\n\\t\\treturn {\\r\\n\\t\\t\\t\\\"waitTime\\\": 0,\\r\\n\\t\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\t\\\"attackThreads\\\": 0,\\r\\n\\t\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\t\\\"serverCount\\\": 0,\\r\\n\\t\\t\\t\\\"pids\\\": [],\\r\\n\\t\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfor (const server of servers) {\\r\\n\\t\\tlet serverThreads = Math.floor((ramAvail(server) / scriptRam))\\r\\n\\t\\tif (serverThreads > threadCount) {\\r\\n\\t\\t\\tserverThreads = threadCount\\r\\n\\t\\t}\\r\\n\\t\\tlet pid = ns.exec(attack[\\\"script\\\"], server.hostname, serverThreads, target.hostname, serverThreads)\\r\\n\\t\\tif (pid == 0) {\\r\\n\\t\\t\\tns.tprintf(\\\"Error while performing '%s' on %s from %s\\\", attack[\\\"type\\\"], target.hostname, server.hostname)\\r\\n\\t\\t\\tcontinue\\r\\n\\t\\t}\\r\\n\\t\\tpids.push(pid)\\r\\n\\t\\tthreadCount = threadCount - serverThreads\\r\\n\\t\\tattackThreads = attackThreads + serverThreads\\r\\n\\t\\tserverCount++\\r\\n\\t\\tif (threadCount <= 0) {\\r\\n\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn {\\r\\n\\t\\t\\\"waitTime\\\": waitTime,\\r\\n\\t\\t\\\"requiredThreads\\\": requiredThreads,\\r\\n\\t\\t\\\"attackThreads\\\": attackThreads,\\r\\n\\t\\t\\\"operation\\\": attack[\\\"type\\\"],\\r\\n\\t\\t\\\"serverCount\\\": serverCount,\\r\\n\\t\\t\\\"pids\\\": pids,\\r\\n\\t\\t\\\"target\\\": target.hostname,\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getGrowAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"grow\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getGrowTime,\\r\\n\\t\\t\\\"threads\\\": \\\"growThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/grow-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getWeakenAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"weaken\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getWeakenTime,\\r\\n\\t\\t\\\"threads\\\": \\\"weakenThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/weaken-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getHackAttack(ns) {\\r\\n\\treturn {\\r\\n\\t\\t\\\"type\\\": \\\"hack\\\",\\r\\n\\t\\t\\\"wait\\\": ns.getHackTime,\\r\\n\\t\\t\\\"threads\\\": \\\"hackThreads\\\",\\r\\n\\t\\t\\\"script\\\": \\\"/payload/hack-only.js\\\",\\r\\n\\t}\\r\\n}\\r\\n\\r\\nexport function getTargetAddPort(ns) {\\r\\n\\treturn ns.getPortHandle(1)\\r\\n}\\r\\n\\r\\nexport function getTargetRemovePort(ns) {\\r\\n\\treturn ns.getPortHandle(2)\\r\\n}\\r\\n\\r\\nexport function getMoneyLimitPort(ns) {\\r\\n\\treturn ns.getPortHandle(3)\\r\\n}\\r\\n\\r\\nexport function sortArrayBy(list, sortFunc) {\\r\\n\\treturn [...list].sort(sortFunc)\\r\\n}\\r\\n\\r\\nexport function sortObjectBy(object, sortFunc) {\\r\\n\\treturn [...Object.values(object)].sort(sortFunc)\\r\\n}\\r\\n\\r\\n\\r\\n// the function is called with func(elem[key])\\r\\nexport function sortByFunctionValue(func, key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (func(x[key]) < func(y[key])) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (func(x[key]) > func(y[key])) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByKey(key) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tif (x[key] < y[key]) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (x[key] > y[key]) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\\r\\n\\r\\nexport function sortByComputePower(fullSize) {\\r\\n\\treturn (function (x, y) {\\r\\n\\t\\tlet xAvail = ramAvail(x)\\r\\n\\t\\tlet yAvail = ramAvail(y)\\r\\n\\t\\tlet xDiff = Math.max(fullSize - xAvail, 0)\\r\\n\\t\\tlet yDiff = Math.max(fullSize - yAvail, 0)\\r\\n\\t\\tif ((xDiff <= 0) && !(yDiff <= 0)) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (!(xDiff <= 0) && (yDiff <= 0)) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\tif ((xDiff == 0) && (yDiff == 0)) {\\r\\n\\t\\t\\tif (x.cpuCores > y.cpuCores) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (x.cpuCores < y.cpuCores) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\t\\treturn -1\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\t\\treturn 1\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail > yAvail) {\\r\\n\\t\\t\\treturn -1\\r\\n\\t\\t}\\r\\n\\t\\tif (xAvail < yAvail) {\\r\\n\\t\\t\\treturn 1\\r\\n\\t\\t}\\r\\n\\t\\treturn 0\\r\\n\\t})\\r\\n}\",\"filename\":\"/lib/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":21.75,\"server\":\"pserv-8192-13\",\"moduleSequenceNumber\":626,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.hack(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/hack-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"pserv-8192-13\",\"moduleSequenceNumber\":627,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.grow(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/grow-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/payload/grow-only.js\",\"url\":\"blob:file:///32907858-8e19-4ae3-944b-9b142533d3be\",\"moduleSequenceNumber\":17350}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-13\",\"moduleSequenceNumber\":628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    var name = ns.args[0]\\r\\n    var threads = ns.args[1]\\r\\n    await ns.weaken(name, { threads: threads })\\r\\n}\",\"filename\":\"/payload/weaken-only.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"pserv-8192-13\",\"moduleSequenceNumber\":629,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../..\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n    while (true) {\\r\\n        await ns.share()\\r\\n    }\\r\\n}\",\"filename\":\"/payload/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"pserv-8192-13\",\"moduleSequenceNumber\":630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":534644.1955872013,\"favor\":0.032,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":538682.2430581771,\"favor\":0.032,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":467874.3690356244,\"favor\":0.032,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":419171.55377875,\"favor\":0.032,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":854016.8195866221,\"favor\":145.5515,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":463698.6792768755,\"favor\":0.032,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":532798.367594501,\"favor\":0.032,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":496530.43459728715,\"favor\":0.032,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":518443.5821877279,\"favor\":0.032,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":452292.5196300916,\"favor\":0.032,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.032,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.032,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.032,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.032,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.032,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.032,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.032,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.032,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.032,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.032,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.032,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.032,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.032,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.032,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.032,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.032,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.032,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.032,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.032,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.032,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.032,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.032,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.032,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.032,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.032,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.032,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.032,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.032,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Illuminati\",\"playerReputation\":1020650.0562481899}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Daedalus\",\"playerReputation\":1154582.4698905412}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":1.8779,\"isBanned\":false,\"isMember\":true,\"name\":\"The Covenant\",\"playerReputation\":1485075.279604775}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"ECorp\",\"playerReputation\":492546.462697433}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"MegaCorp\",\"playerReputation\":474561.5965354602}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Bachman & Associates\",\"playerReputation\":486699.27116425906}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Blade Industries\",\"playerReputation\":463526.7141726137}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":298.4004,\"isBanned\":false,\"isMember\":true,\"name\":\"NWO\",\"playerReputation\":40818834.94119785}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Clarke Incorporated\",\"playerReputation\":480983.81878175295}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"OmniTek Incorporated\",\"playerReputation\":509246.93348887836}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Four Sigma\",\"playerReputation\":468717.93915028614}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"KuaiGong International\",\"playerReputation\":515935.2288301171}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":498707.80143602495}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":261.9399,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":37024850.50737535}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":214.8206,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":32192155.13501935}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":250.0033,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":35801287.27802256}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":157.7796,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":164.8178,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":62.2815,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":61.7024,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":188.2213,\"isBanned\":true,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":55.8669,\"isBanned\":false,\"isMember\":true,\"name\":\"Volhaven\",\"playerReputation\":10304557.220583629}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":190.6156,\"isBanned\":false,\"isMember\":true,\"name\":\"Speakers for the Dead\",\"playerReputation\":29711462.997243952}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":115.5673,\"isBanned\":false,\"isMember\":true,\"name\":\"The Dark Army\",\"playerReputation\":22119195.56211472}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":253.0787,\"isBanned\":false,\"isMember\":true,\"name\":\"The Syndicate\",\"playerReputation\":36122908.79362376}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Silhouette\",\"playerReputation\":844523.005180218}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":205.8866,\"isBanned\":false,\"isMember\":true,\"name\":\"Tetrads\",\"playerReputation\":31280155.214226436}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":209.0288,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":31603434.823547773}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":245.6384,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":35357171.82008692}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":234.5001,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":34213241.27443305}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Shadows of Anarchy\",\"playerReputation\":55951.82138660399}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":240,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":true,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":false,\"MonacoTheme\":\"one-dark\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#98C379\",\"primary\":\"#98C379\",\"primarydark\":\"#98C379\",\"successlight\":\"#98C379\",\"success\":\"#98C379\",\"successdark\":\"#98C379\",\"errorlight\":\"#E06C75\",\"error\":\"#BE5046\",\"errordark\":\"#BE5046\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E5C07B\",\"warning\":\"#E5C07B\",\"warningdark\":\"#D19A66\",\"infolight\":\"#61AFEF\",\"info\":\"#61AFEF\",\"infodark\":\"#61AFEF\",\"welllight\":\"#4B5263\",\"well\":\"#282C34\",\"white\":\"#ABB2BF\",\"black\":\"#282C34\",\"hp\":\"#E06C75\",\"money\":\"#E5C07B\",\"hack\":\"#98C379\",\"combat\":\"#ABB2BF\",\"cha\":\"#C678DD\",\"int\":\"#61AFEF\",\"rep\":\"#ABB2BF\",\"disabled\":\"#56B6C2\",\"backgroundprimary\":\"#282C34\",\"backgroundsecondary\":\"#21252B\",\"button\":\"#4B5263\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-29,\"y\":1,\"opened\":true},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}}}","VersionSave":"25","AllGangsSave":"","LastExportBonus":"1662315666367","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}